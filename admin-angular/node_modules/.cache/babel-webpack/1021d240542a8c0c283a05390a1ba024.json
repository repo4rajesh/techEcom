{"ast":null,"code":"import { __decorate } from \"tslib\"; // Store\n\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport * as actions from '../action/auth.action';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../auth.service\";\nimport * as i3 from \"../auth.sandbox\";\nimport * as i4 from \"@angular/router\";\nexport class AuthEffects {\n  constructor(action$, authService, sandbox, router) {\n    this.action$ = action$;\n    this.authService = authService;\n    this.sandbox = sandbox;\n    this.router = router; // LOGIN EFFECT\n\n    this.doLogin$ = this.action$.pipe(ofType(actions.ActionTypes.DO_LOGIN), map(action => action.payload), switchMap(state => {\n      return this.authService.login(state).pipe(switchMap(user => [new actions.DoLoginSuccessAction(user)]), catchError(error => of(new actions.DoLoginFailAction(error))));\n    })); // FORGET EFFECT\n\n    this.doForget$ = this.action$.pipe(ofType(actions.ActionTypes.DO_FORGOT_PASSWORD), map(action => action.payload), switchMap(state => {\n      return this.authService.forgetPassword(state).pipe(switchMap(user => [new actions.DoForgotPasswordSuccessAction(user)]), catchError(error => of(new actions.DoForgotPasswordFailAction(error))));\n    }));\n    this.gettoken$ = this.action$.pipe(ofType(actions.ActionTypes.GET_TOKEN), map(action => action.payload), switchMap(state => {\n      console.log(\"eff\", state);\n      return this.authService.gettoken(state).pipe(tap(res => {\n        console.log('get token error', res);\n\n        if (res && res.status === 2) {\n          this.router.navigate(['/token-expired']);\n        }\n\n        if (res && res.status === 3) {\n          this.router.navigate(['/invalid-token']);\n        }\n      }), map(register => new actions.GettokenSuccess(register)), catchError(error => of(new actions.GettokenFail(error))));\n    }));\n    this.setpassword$ = this.action$.pipe(ofType(actions.ActionTypes.SET_PASSWORD), map(action => action.payload), switchMap(state => {\n      return this.authService.setpassword(state).pipe(tap(val => {\n        if (val && val.status === 1) {\n          this.router.navigate(['/auth/login']);\n        }\n      }), map(register => new actions.SetpasswordSuccess(register)), catchError(error => of(new actions.SetpasswordFail(error))));\n    }));\n  }\n\n}\n\nAuthEffects.ɵfac = function AuthEffects_Factory(t) {\n  return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.AuthSandbox), i0.ɵɵinject(i4.Router));\n};\n\nAuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthEffects,\n  factory: AuthEffects.ɵfac\n});\n\n__decorate([Effect()], AuthEffects.prototype, \"doLogin$\", void 0);\n\n__decorate([Effect()], AuthEffects.prototype, \"doForget$\", void 0);\n\n__decorate([Effect()], AuthEffects.prototype, \"gettoken$\", void 0);\n\n__decorate([Effect()], AuthEffects.prototype, \"setpassword$\", void 0);","map":null,"metadata":{},"sourceType":"module"}