{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as actions from '../role-action/role.action';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../role.ApiClientService\";\nexport class RoleEffects {\n  constructor(action$, apiCli) {\n    this.action$ = action$;\n    this.apiCli = apiCli; // NEW ROLE\n\n    this.doAddRole$ = this.action$.pipe(ofType(actions.ActionTypes.DO_NEW_ROLE), map(action => action.payload), switchMap(state => {\n      return this.apiCli.addRole(state).pipe(switchMap(role => [new actions.DoNewRoleSuccessAction(role)]), catchError(error => of(new actions.DoNewRoleFailAction(error))));\n    })); // UPDATE ROLE\n\n    this.doUpdateRole$ = this.action$.pipe(ofType(actions.ActionTypes.DO_UPDATE_ROLE), map(action => action.payload), switchMap(state => {\n      const Id = state.id;\n      return this.apiCli.updateRole(state, Id).pipe(switchMap(role => [new actions.DoUpdateRoleSuccessAction(role)]), catchError(error => of(new actions.DoUpdateRoleFailAction(error))));\n    })); // LIST - ROLE LIST\n\n    this.doRoleList$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ROLE_LIST), map(action => action.payload), switchMap(state => {\n      return this.apiCli.roleList(state).pipe(map(analysis => new actions.DoRoleListSuccessAction(analysis)), catchError(error => of(new actions.DoRoleListFailAction(error))));\n    })); // pagination - ROLE LIST\n\n    this.dopaginationRoleList$ = this.action$.pipe(ofType(actions.ActionTypes.GET_ROLE_COUNT), map(action => action.payload), switchMap(state => {\n      return this.apiCli.roleList(state).pipe(map(analysis => new actions.GetRoleCountSuccessAction(analysis)), catchError(error => of(new actions.GetRoleCountFailAction(error))));\n    })); // delete role\n\n    this.deleteRole$ = this.action$.pipe(ofType(actions.ActionTypes.DELETA_ROLE), map(action => action.payload), switchMap(state => {\n      return this.apiCli.roleDelete(state).pipe(map(analysis => new actions.DeleteRoleSuccess(analysis)), catchError(error => of(new actions.DeleteRoleFail(error))));\n    }));\n  }\n\n}\n\nRoleEffects.ɵfac = function RoleEffects_Factory(t) {\n  return new (t || RoleEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.RoleApiClientService));\n};\n\nRoleEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RoleEffects,\n  factory: RoleEffects.ɵfac\n});\n\n__decorate([Effect()], RoleEffects.prototype, \"doAddRole$\", void 0);\n\n__decorate([Effect()], RoleEffects.prototype, \"doUpdateRole$\", void 0);\n\n__decorate([Effect()], RoleEffects.prototype, \"doRoleList$\", void 0);\n\n__decorate([Effect()], RoleEffects.prototype, \"dopaginationRoleList$\", void 0);\n\n__decorate([Effect()], RoleEffects.prototype, \"deleteRole$\", void 0);","map":null,"metadata":{},"sourceType":"module"}