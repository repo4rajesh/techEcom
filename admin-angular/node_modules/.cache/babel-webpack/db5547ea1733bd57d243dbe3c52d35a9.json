{"ast":null,"code":"import * as orderActions from './orderstatus.action/orderstatus.action';\nimport { getneworderstatus, getneworderstatusroot, getorderdelete, getOrderstatuslist, getOrderstatuspaginationcount, getupdateorderstatus, getupdateorderstatusroot, OrderStatusListLoading, OrderStatusListLoaded, OrderStatusListFailed, OrderStatusDeleteLoading, OrderStatusDeleteLoaded, OrderStatusDeleteFailed, OrderStatusCountLoading, OrderStatusCountLoaded, OrderStatusCountFailed, OrderStatusAddLoading, OrderStatusAddFailed, OrderStatusAddLoaded, OrderStatusUpdateLoading, OrderStatusUpdateLoaded, OrderStatusUpdateFailed, getupdateProductTrackingstatus, getupdateProductorderstatus, TrackingStatusUpdateProductFailed, TrackingStatusUpdateProductLoaded, TrackingStatusUpdateProductLoading, OrderStatusUpdateProductFailed, OrderStatusUpdateProductLoaded, OrderStatusUpdateProductLoading } from './orderstatus-reducer/orderstatus.selectors';\nimport { OrderstatusForm } from './orderstatus.models/orderstatus.model';\nimport { OrderStatusListForm } from './orderstatus.models/orderstatuslist.model';\nimport { OrderStatusCountModel } from './orderstatus.models/OrderStatusCount.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ng6-toastr-notifications\";\nexport let OrderstatusSandbox = /*#__PURE__*/(() => {\n  class OrderstatusSandbox {\n    constructor(appState, router, toastr) {\n      this.appState = appState;\n      this.router = router;\n      this.toastr = toastr;\n      this.getOrderstatuslist$ = this.appState.select(getOrderstatuslist);\n      this.getOrderstatuspaginationcount$ = this.appState.select(getOrderstatuspaginationcount);\n      this.getneworderstatusroot$ = this.appState.select(getneworderstatusroot);\n      this.getneworderstatus$ = this.appState.select(getneworderstatus);\n      this.getupdateorderstatusroot$ = this.appState.select(getupdateorderstatusroot);\n      this.getupdateorderstatus$ = this.appState.select(getupdateorderstatus);\n      this.getupdateProductorderstatus$ = this.appState.select(getupdateProductorderstatus);\n      this.getupdateProductTrackingstatus$ = this.appState.select(getupdateProductTrackingstatus);\n      this.getorderdelete$ = this.appState.select(getorderdelete);\n      this.OrderstatusListLoading$ = this.appState.select(OrderStatusListLoading);\n      this.OrderstatusListLoaded$ = this.appState.select(OrderStatusListLoaded);\n      this.OrderstatusListFailed$ = this.appState.select(OrderStatusListFailed);\n      this.OrderstatusDeleteLoading$ = this.appState.select(OrderStatusDeleteLoading);\n      this.OrderstatusDeleteLoaded$ = this.appState.select(OrderStatusDeleteLoaded);\n      this.OrderstatusDeleteFailed$ = this.appState.select(OrderStatusDeleteFailed);\n      this.OrderstatusCountLoading$ = this.appState.select(OrderStatusCountLoading);\n      this.OrderstatusCountLoaded$ = this.appState.select(OrderStatusCountLoaded);\n      this.OrderstatusCountFailed$ = this.appState.select(OrderStatusCountFailed);\n      this.OrderstatusAddLoading$ = this.appState.select(OrderStatusAddLoading);\n      this.OrderstatusAddLoaded$ = this.appState.select(OrderStatusAddLoaded);\n      this.OrderstatusAddFailed$ = this.appState.select(OrderStatusAddFailed);\n      this.OrderstatusUpdateLoading$ = this.appState.select(OrderStatusUpdateLoading);\n      this.OrderstatusUpdateLoaded$ = this.appState.select(OrderStatusUpdateLoaded);\n      this.OrderstatusUpdateFailed$ = this.appState.select(OrderStatusUpdateFailed);\n      this.OrderstatusUpdateProductLoading$ = this.appState.select(OrderStatusUpdateProductLoading);\n      this.OrderstatusUpdateProductLoaded$ = this.appState.select(OrderStatusUpdateProductLoaded);\n      this.OrderstatusUpdateProductFailed$ = this.appState.select(OrderStatusUpdateProductFailed);\n      this.TrackingstatusUpdateProductLoading$ = this.appState.select(TrackingStatusUpdateProductLoading);\n      this.TrackingstatusUpdateProductLoaded$ = this.appState.select(TrackingStatusUpdateProductLoaded);\n      this.TrackingstatusUpdateProductFailed$ = this.appState.select(TrackingStatusUpdateProductFailed);\n      this.subscriptions = [];\n      this.subscribe();\n    }\n\n    orderStatusList(value) {\n      this.appState.dispatch(new orderActions.DoOrderStatusListAction(new OrderStatusListForm(value)));\n    } // #pagination\n\n\n    orderStatusListCount(value) {\n      this.appState.dispatch(new orderActions.DopaginationorderstatusListAction(new OrderStatusCountModel(value)));\n    }\n\n    updateOrderStatus(value) {\n      this.appState.dispatch(new orderActions.DoUpdateOrderstatusAction(new OrderstatusForm(value)));\n    }\n\n    updateProductOrderStatus(value) {\n      this.appState.dispatch(new orderActions.DoUpdateProductOrderstatusAction(value));\n    }\n\n    updateProductTrackingStatus(value) {\n      this.appState.dispatch(new orderActions.DoUpdateProductTrackingstatusAction(value));\n    }\n\n    orderStatusDelete(value) {\n      this.appState.dispatch(new orderActions.DoOrderStatusDeleteAction(value));\n    }\n\n    addOrderStatus(data) {\n      this.appState.dispatch(new orderActions.DoNewOrderStatusAction(new OrderstatusForm(data)));\n    }\n\n    subscribe() {\n      this.subscriptions.push(this.getneworderstatusroot$.subscribe(data => {\n        if (data && data.message) {\n          if (data.status === 1) {\n            this.router.navigate(['/settings/local/order-status']);\n          }\n        }\n      }));\n      this.subscriptions.push(this.getupdateorderstatusroot$.subscribe(data => {\n        if (data && data.message) {\n          if (data.status === 1) {\n            this.router.navigate(['/settings/local/order-status']);\n          }\n        }\n      })); // # delete message\n\n      this.subscriptions.push(this.getorderdelete$.subscribe(data => {\n        if (data && data.message) {\n          if (data.status === 1) {\n            this.router.navigate(['/settings/local/order-status']);\n          }\n        }\n      }));\n    }\n\n  }\n\n  OrderstatusSandbox.ɵfac = function OrderstatusSandbox_Factory(t) {\n    return new (t || OrderstatusSandbox)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrManager));\n  };\n\n  OrderstatusSandbox.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrderstatusSandbox,\n    factory: OrderstatusSandbox.ɵfac\n  });\n  return OrderstatusSandbox;\n})();","map":null,"metadata":{},"sourceType":"module"}