{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as actions from '../action/layout.action';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../layout.service\";\nexport class LayoutEffects {\n  constructor(action$, layoutService) {\n    this.action$ = action$;\n    this.layoutService = layoutService;\n    this.catalogCount$ = this.action$.pipe(ofType(actions.ActionTypes.GET_CATALOG_COUNT), map(action => action.payload), switchMap(state => {\n      return this.layoutService.getCatalogCount().pipe(switchMap(response => [new actions.GetCatalogCountSuccessAction(response)]), catchError(error => of(new actions.GetCatalogCountFailAction(error))));\n    }));\n  }\n\n}\n\nLayoutEffects.ɵfac = function LayoutEffects_Factory(t) {\n  return new (t || LayoutEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.LayoutService));\n};\n\nLayoutEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LayoutEffects,\n  factory: LayoutEffects.ɵfac\n});\n\n__decorate([Effect()], LayoutEffects.prototype, \"catalogCount$\", void 0);","map":null,"metadata":{},"sourceType":"module"}