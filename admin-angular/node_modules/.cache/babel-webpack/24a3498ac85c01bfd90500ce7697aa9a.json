{"ast":null,"code":"import * as authActions from './action/auth.action';\nimport { getLoginSuccessResponse, getLoginRequestLoading, getLoginRequestLoaded, getLoginRequestFailed, getForgotPasswordResponse, getForgotPasswordRequestLoading, getForgotPasswordRequestLoaded, getForgotPasswordRequestFailed, gettokenFailed, gettokenLoaded, gettoken, gettokenLoading, setpassword, setpasswordLoading, setpasswordLoaded } from './reducer/selectors'; // Models\n\nimport { ForgotForm } from './models/forgot.model';\nimport { LoginForm } from './models/login.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nexport let AuthSandbox = /*#__PURE__*/(() => {\n  class AuthSandbox {\n    constructor(appState, router) {\n      this.appState = appState;\n      this.router = router;\n      /* Login Action State Values */\n\n      this.getUser$ = this.appState.select(getLoginSuccessResponse);\n      this.loginLoading$ = this.appState.select(getLoginRequestLoading);\n      this.loginLoaded$ = this.appState.select(getLoginRequestLoaded);\n      this.loginFailed$ = this.appState.select(getLoginRequestFailed);\n      this.gettoken$ = this.appState.select(gettoken);\n      this.gettokenLoaded$ = this.appState.select(gettokenLoaded);\n      this.gettokenLoading$ = this.appState.select(gettokenLoading);\n      this.gettokenFailed$ = this.appState.select(gettokenFailed);\n      this.setpassword$ = this.appState.select(setpassword);\n      this.setpasswordLoaded$ = this.appState.select(setpasswordLoaded);\n      this.setpasswordLoading$ = this.appState.select(setpasswordLoading);\n      this.forgorPasswordResponse$ = this.appState.select(getForgotPasswordResponse);\n      this.forgotpasswordLoading$ = this.appState.select(getForgotPasswordRequestLoading);\n      this.forgotpasswordLoaded$ = this.appState.select(getForgotPasswordRequestLoaded);\n      this.forgotpasswordFailed$ = this.appState.select(getForgotPasswordRequestFailed);\n      this.subscriptions = [];\n      this.registerAuthEvents();\n    }\n    /**\n       * Unsubscribe from events\n       */\n\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    } // Auth Action\n\n\n    authLogin(value) {\n      this.appState.dispatch(new authActions.DoLoginAction(new LoginForm(value)));\n    }\n\n    authForget(value) {\n      this.appState.dispatch(new authActions.DoForgotPasswordAction(new ForgotForm(value)));\n    }\n\n    gettoken(params) {\n      this.appState.dispatch(new authActions.Gettoken(params));\n    }\n\n    setpassword(params) {\n      this.appState.dispatch(new authActions.Setpassword(params));\n    }\n    /**\n     * Registers events\n     */\n\n\n    registerAuthEvents() {\n      // Subscribes to logged user data and save/remove it from the local storage\n      this.subscriptions.push(this.getUser$.subscribe(user => {\n        if (user && user.accessToken) {\n          user.save();\n          this.router.navigate(['/dashboard']);\n        }\n      })); // Subscribes to logout user data remove it from the local storage\n\n      this.subscriptions.push(this.forgorPasswordResponse$.subscribe(result => {\n        if (result) {\n          this.router.navigate(['/auth/login']);\n        }\n      }));\n    }\n\n  }\n\n  AuthSandbox.ɵfac = function AuthSandbox_Factory(t) {\n    return new (t || AuthSandbox)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthSandbox.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthSandbox,\n    factory: AuthSandbox.ɵfac\n  });\n  return AuthSandbox;\n})();","map":null,"metadata":{},"sourceType":"module"}