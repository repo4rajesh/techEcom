{"ast":null,"code":"/*\n* spurtcommerce\n* http://www.spurtcommerce.com\n*\n* Copyright (c) 2021 Piccosoft Software Labs Pvt Ltd\n* Author Piccosoft Software Labs Pvt Ltd <support@spurtcommerce.com>\n* Licensed under the MIT license.\n*/\nconst typeCache = {};\n/**\n * This function coerces a string into a string literal type.\n * Using tagged union types in TypeScript 2.0, this enables\n * powerful typechecking of our reducers.\n *\n * Since every action label passes through this function it\n * is a good place to ensure all of our action labels are unique.\n *\n * @params label\n */\n\nexport function type(label) {\n  if (typeCache[label]) {\n    throw new Error(`Action type \"${label}\" is not unqiue\"`);\n  }\n\n  typeCache[label] = true;\n  return label;\n}\n/**\n * Runs through every condition, compares new and old values and returns true/false depends on condition state.\n * This is used to distinct if two observable values have changed.\n *\n * @params oldValues\n * @params newValues\n * @params conditions\n */\n\nexport function distinctChanges(oldValues, newValues, conditions) {\n  if (conditions.every(cond => cond(oldValues, newValues))) {\n    return false;\n  } else {\n    return true;\n  }\n}\n/**\n * Returns true if the given value is type of Object\n *\n * @params val\n */\n\nexport function isObject(val) {\n  if (val === null) {\n    return false;\n  } else {\n    return typeof val === 'function' || typeof val === 'object';\n  }\n}\n/**\n * Capitalizes the first character in given string\n *\n * @params s\n */\n\nexport function capitalize(s) {\n  if (!s || typeof s !== 'string') {\n    return s;\n  } else {\n    return s && s[0].toUpperCase() + s.slice(1);\n  }\n}\n/**\n * Uncapitalizes the first character in given string\n *\n * @params s\n */\n\nexport function uncapitalize(s) {\n  if (!s || typeof s !== 'string') {\n    return s;\n  } else {\n    return s && s[0].toLowerCase() + s.slice(1);\n  }\n}\n/**\n * Flattens multi dimensional object into one level deep\n *\n * @params obj\n * @params preservePath\n */\n\nexport function flattenObject(ob, preservePath = false) {\n  const toReturn = {};\n\n  for (const i in ob) {\n    if (!ob.hasOwnProperty(i)) {\n      continue;\n    }\n\n    if (typeof ob[i] === 'object') {\n      const flatObject = flattenObject(ob[i], preservePath);\n\n      for (const x in flatObject) {\n        if (!flatObject.hasOwnProperty(x)) {\n          continue;\n        }\n\n        const path = preservePath ? i + '.' + x : x;\n        toReturn[path] = flatObject[x];\n      }\n    } else {\n      toReturn[i] = ob[i];\n    }\n  }\n\n  return toReturn;\n}\n/**\n * Returns formated date based on given culture\n *\n * @params dateString\n * @params culture\n */\n\nexport function localeDateString(dateString, culture = 'en-EN') {\n  const date = new Date(dateString);\n  return date.toLocaleDateString(culture);\n}","map":null,"metadata":{},"sourceType":"module"}