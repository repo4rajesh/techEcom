{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { map, switchMap } from 'rxjs/operators';\nimport { catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as actions from '../stock-action/stock.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../stock.service\";\nexport class StockEffects {\n  constructor(action$, stockService) {\n    this.action$ = action$;\n    this.stockService = stockService; // stock list\n\n    this.doStockList$ = this.action$.pipe(ofType(actions.ActionTypes.DO_STOCKLIST), map(action => action.payload), switchMap(state => {\n      return this.stockService.stockList(state).pipe(switchMap(user => {\n        return [new actions.DoStockListSuccess(user)];\n      }), catchError(error => of(new actions.DoStockListFail(error))));\n    })); // stock add\n\n    this.doStockNew$ = this.action$.pipe(ofType(actions.ActionTypes.DO_NEWSTOCKLIST), map(action => action.payload), switchMap(state => {\n      delete state.stockStatusId;\n      return this.stockService.newStock(state).pipe(map(data => new actions.DoAddStockSuccess(data)), catchError(error => of(new actions.DoAddStockFail(error))));\n    })); // stock list Count\n\n    this.doStockListCount$ = this.action$.pipe(ofType(actions.ActionTypes.Do_STOCkLISTCOUNT), map(action => action.payload), switchMap(state => {\n      return this.stockService.stockListCount(state).pipe(switchMap(user => {\n        return [new actions.DoStockCountSuccess(user)];\n      }), catchError(error => of(new actions.DoStockCountFail(error))));\n    })); // stock update\n\n    this.doStockUpdate$ = this.action$.pipe(ofType(actions.ActionTypes.DO_STOCKUPDATE), map(action => action.payload), switchMap(state => {\n      return this.stockService.stockUpdate(state).pipe(switchMap(user => {\n        return [new actions.DoStockUpdateSuccess(user)];\n      }), catchError(error => of(new actions.DoStockUpdateFail(error))));\n    }));\n    this.doStockDelte$ = this.action$.pipe(ofType(actions.ActionTypes.DO_STOCKDELETE), map(action => action.payload), switchMap(state => {\n      const stockStatusId = state.stockStatusId;\n      return this.stockService.stockDelete(state, stockStatusId).pipe(switchMap(user => [new actions.DoStockDeleteSuccess(user)]), catchError(error => of(new actions.DoStockDeleteFail(error))));\n    }));\n  }\n\n}\n\nStockEffects.ɵfac = function StockEffects_Factory(t) {\n  return new (t || StockEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.StockService));\n};\n\nStockEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StockEffects,\n  factory: StockEffects.ɵfac\n});\n\n__decorate([Effect()], StockEffects.prototype, \"doStockList$\", void 0);\n\n__decorate([Effect()], StockEffects.prototype, \"doStockNew$\", void 0);\n\n__decorate([Effect()], StockEffects.prototype, \"doStockListCount$\", void 0);\n\n__decorate([Effect()], StockEffects.prototype, \"doStockUpdate$\", void 0);\n\n__decorate([Effect()], StockEffects.prototype, \"doStockDelte$\", void 0);","map":null,"metadata":{},"sourceType":"module"}