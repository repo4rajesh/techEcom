{"ast":null,"code":"import { Injectable, ɵɵdefineInjectable, Pipe, EventEmitter, Component, forwardRef, ChangeDetectorRef, ElementRef, Input, Output, ViewChildren, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-select-dropdown.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/forms';\nconst _c0 = [\"availableOption\"];\n\nconst _c1 = function (a0) {\n  return {\n    active: a0\n  };\n};\n\nfunction NgxSelectDropdownComponent_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(1, \"input\", 13);\n    ɵngcc0.ɵɵlistener(\"change\", function NgxSelectDropdownComponent_div_5_div_1_Template_input_change_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r6.changeSearchText($event);\n    })(\"input\", function NgxSelectDropdownComponent_div_5_div_1_Template_input_input_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r8.searchTextChanged();\n    })(\"ngModelChange\", function NgxSelectDropdownComponent_div_5_div_1_Template_input_ngModelChange_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r9 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r9.searchText = $event;\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(2, \"label\", 14);\n    ɵngcc0.ɵɵelement(3, \"span\", 15);\n    ɵngcc0.ɵɵtext(4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"direction\", ctx_r1.config.inputDirection);\n    ɵngcc0.ɵɵproperty(\"ngModel\", ctx_r1.searchText);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(5, _c1, ctx_r1.searchText));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.config.searchPlaceholder, \"\");\n  }\n}\n\nfunction NgxSelectDropdownComponent_div_5_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 16);\n    ɵngcc0.ɵɵlistener(\"click\", function NgxSelectDropdownComponent_div_5_li_3_Template_li_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r13);\n      const selected_r10 = restoredCtx.$implicit;\n      const i_r11 = restoredCtx.index;\n      const ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r12.deselectItem(selected_r10, i_r11);\n    });\n    ɵngcc0.ɵɵelementStart(1, \"span\", 17);\n    ɵngcc0.ɵɵtext(2, \"x\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"span\");\n    ɵngcc0.ɵɵtext(4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const selected_r10 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(4);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r2.config.displayFn ? ctx_r2.config.displayFn(selected_r10) : selected_r10[ctx_r2.config.displayKey] || selected_r10, \" \");\n  }\n}\n\nfunction NgxSelectDropdownComponent_div_5_hr_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"hr\");\n  }\n}\n\nconst _c2 = function (a0, a1) {\n  return {\n    active: a0,\n    disabled: a1\n  };\n};\n\nfunction NgxSelectDropdownComponent_div_5_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 18, 19);\n    ɵngcc0.ɵɵlistener(\"click\", function NgxSelectDropdownComponent_div_5_li_6_Template_li_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r18);\n      const item_r14 = restoredCtx.$implicit;\n      const i_r15 = restoredCtx.index;\n      const ctx_r17 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r17.selectItem(item_r14, i_r15);\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r14 = ctx.$implicit;\n    const i_r15 = ctx.index;\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(2, _c2, ctx_r4.focusedItemIndex == i_r15 && !item_r14.disabled, item_r14.disabled));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r4.config.displayFn ? ctx_r4.config.displayFn(item_r14) : item_r14[ctx_r4.config.displayKey] || item_r14, \" \");\n  }\n}\n\nfunction NgxSelectDropdownComponent_div_5_li_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"li\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.config.noResultsFound);\n  }\n}\n\nfunction NgxSelectDropdownComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 5);\n    ɵngcc0.ɵɵtemplate(1, NgxSelectDropdownComponent_div_5_div_1_Template, 5, 7, \"div\", 6);\n    ɵngcc0.ɵɵelementStart(2, \"ul\", 7);\n    ɵngcc0.ɵɵtemplate(3, NgxSelectDropdownComponent_div_5_li_3_Template, 5, 1, \"li\", 8);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(4, NgxSelectDropdownComponent_div_5_hr_4_Template, 1, 0, \"hr\", 9);\n    ɵngcc0.ɵɵelementStart(5, \"ul\", 10);\n    ɵngcc0.ɵɵtemplate(6, NgxSelectDropdownComponent_div_5_li_6_Template, 3, 5, \"li\", 11);\n    ɵngcc0.ɵɵpipe(7, \"limitTo\");\n    ɵngcc0.ɵɵpipe(8, \"filterBy\");\n    ɵngcc0.ɵɵtemplate(9, NgxSelectDropdownComponent_div_5_li_9_Template, 2, 1, \"li\", 9);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"max-height\", ctx_r0.config.height);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.config.search);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.selectedItems);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.selectedItems.length > 0 && ctx_r0.availableItems.length > 0);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind2(7, 7, ɵngcc0.ɵɵpipeBind3(8, 10, ctx_r0.availableItems, ctx_r0.searchText, ctx_r0.config.searchOnKey), ctx_r0.config.limitTo));\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.showNotFound);\n  }\n}\n\nconst _c3 = function (a0) {\n  return {\n    \"ngx-disabled\": a0\n  };\n};\n\nlet SelectDropDownService = /*#__PURE__*/(() => {\n  class SelectDropDownService {\n    constructor() {\n      // constructor\n      this._isOpen = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get isOpen() {\n      return this._isOpen;\n    }\n\n  }\n\n  SelectDropDownService.ɵfac = function SelectDropDownService_Factory(t) {\n    return new (t || SelectDropDownService)();\n  };\n  /** @nocollapse */\n\n\n  /** @nocollapse */\n  SelectDropDownService.ɵprov = ɵɵdefineInjectable({\n    factory: function SelectDropDownService_Factory() {\n      return new SelectDropDownService();\n    },\n    token: SelectDropDownService,\n    providedIn: \"root\"\n  });\n  return SelectDropDownService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  SelectDropDownService.prototype._isOpen;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/pipes/filter-by.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * filters an array based on searctext\n */\n\n\nlet FilterByPipe = /*#__PURE__*/(() => {\n  class FilterByPipe {\n    /**\n     * @param {?} array\n     * @param {?=} searchText\n     * @param {?=} keyName\n     * @return {?}\n     */\n    transform(array, searchText, keyName) {\n      if (!array || !searchText || !Array.isArray(array)) {\n        return array;\n      }\n\n      if (typeof array[0] === 'string') {\n        return array.filter(\n        /**\n        * @param {?} item\n        * @return {?}\n        */\n        item => item.toLowerCase().indexOf(searchText.toLowerCase()) > -1);\n      } // filter array, items which match and return true will be\n      // kept, false will be filtered out\n\n\n      if (!keyName) {\n        return array.filter(\n        /**\n        * @param {?} item\n        * @return {?}\n        */\n        item => {\n          for (const key in item) {\n            if (typeof item[key] !== 'object' && item[key].toString().toLowerCase().indexOf(searchText.toLowerCase()) > -1) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n      } else {\n        return array.filter(\n        /**\n        * @param {?} item\n        * @return {?}\n        */\n        item => {\n          if (typeof item[keyName] !== 'object' && item[keyName].toString().toLowerCase().indexOf(searchText.toLowerCase()) > -1) {\n            return true;\n          }\n\n          return false;\n        });\n      }\n    }\n\n  }\n\n  FilterByPipe.ɵfac = function FilterByPipe_Factory(t) {\n    return new (t || FilterByPipe)();\n  };\n\n  FilterByPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"filterBy\",\n    type: FilterByPipe,\n    pure: true\n  });\n  return FilterByPipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-select-dropdown.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet NgxSelectDropdownComponent = /*#__PURE__*/(() => {\n  class NgxSelectDropdownComponent {\n    /**\n     * @param {?} cdref\n     * @param {?} _elementRef\n     */\n    constructor(cdref, _elementRef) {\n      this.cdref = cdref;\n      this._elementRef = _elementRef;\n      /**\n       * Get the required inputs\n       */\n\n      this.options = [];\n      /**\n       * configuration options\n       */\n\n      this.config = {};\n      /**\n       * Whether multiple selection or single selection allowed\n       */\n\n      this.multiple = false;\n      /**\n       * change event when value changes to provide user to handle things in change event\n       */\n\n      this.change = new EventEmitter();\n      /**\n       * The search text change event emitter emitted when user type in the search input\n       */\n\n      this.searchChange = new EventEmitter();\n      /**\n       * Event emitted when dropdown is open.\n       */\n\n      this.open = new EventEmitter();\n      /**\n       * Event emitted when dropdown is open.\n       */\n\n      this.close = new EventEmitter();\n      /**\n       * Toogle the dropdown list\n       */\n\n      this.toggleDropdown = false;\n      /**\n       * Available items for selection\n       */\n\n      this.availableItems = [];\n      /**\n       * Selected Items\n       */\n\n      this.selectedItems = [];\n      /**\n       * Selection text to be Displayed\n       */\n\n      this.selectedDisplayText = 'Select';\n      /**\n       * variable to track if clicked inside or outside of component\n       */\n\n      this.clickedInside = false;\n      /**\n       * variable to track keypress event inside and outsid of component\n       */\n\n      this.insideKeyPress = false;\n      /**\n       * variable to track the focused item whenuser uses arrow keys to select item\n       */\n\n      this.focusedItemIndex = null;\n      /**\n       * element to show not found text when not itmes match the search\n       */\n\n      this.showNotFound = false;\n\n      this.onChange =\n      /**\n      * @return {?}\n      */\n      () => {// empty\n      };\n\n      this.onTouched =\n      /**\n      * @return {?}\n      */\n      () => {// empty\n      };\n\n      this.multiple = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get value() {\n      return this._value;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n\n\n    set value(val) {\n      this._value = val;\n      this.onChange(val);\n      this.onTouched();\n    }\n    /**\n     * click listener for host inside this component i.e\n     * if many instances are there, this detects if clicked inside\n     * this instance\n     * @return {?}\n     */\n\n\n    clickInsideComponent() {\n      this.clickedInside = true;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    blur() {\n      this.toggleDropdown = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    focus() {\n      /* istanbul ignore else */\n      if (!this.disabled) {\n        this.toggleSelectDropdown();\n      }\n    }\n    /**\n     * click handler on documnent to hide the open dropdown if clicked outside\n     * @return {?}\n     */\n\n\n    clickOutsideComponent() {\n      /* istanbul ignore else */\n      if (!this.clickedInside) {\n        this.toggleDropdown = false;\n        this.resetArrowKeyActiveElement(); // clear searh on close\n\n        this.searchText = null;\n        this.close.emit();\n      }\n\n      this.clickedInside = false;\n    }\n    /**\n     * click handler on documnent to hide the open dropdown if clicked outside\n     * @return {?}\n     */\n\n\n    KeyPressOutsideComponent() {\n      /* istanbul ignore else */\n      if (!this.insideKeyPress) {\n        this.toggleDropdown = false;\n        this.resetArrowKeyActiveElement();\n      }\n\n      this.insideKeyPress = false;\n    }\n    /**\n     * Event handler for key up and down event and enter press for selecting element\n     * @param {?} $event\n     * @return {?}\n     */\n\n\n    handleKeyboardEvent($event) {\n      this.insideKeyPress = true;\n      /* istanbul ignore else */\n\n      if ($event.keyCode === 27 || this.disabled) {\n        this.toggleDropdown = false;\n        this.insideKeyPress = false;\n        return;\n      }\n      /** @type {?} */\n\n\n      const avaOpts = this.availableOptions.toArray();\n      /* istanbul ignore else */\n\n      if ($event.keyCode !== 9 && avaOpts.length === 0 && !this.toggleDropdown) {\n        this.toggleDropdown = true;\n      } // Arrow Down\n\n      /* istanbul ignore else */\n\n\n      if ($event.keyCode === 40 && avaOpts.length > 0) {\n        this.onArrowKeyDown();\n        /* istanbul ignore else */\n\n        if (this.focusedItemIndex >= avaOpts.length) {\n          this.focusedItemIndex = 0;\n        }\n\n        avaOpts[this.focusedItemIndex].nativeElement.focus();\n        $event.preventDefault();\n      } // Arrow Up\n\n      /* istanbul ignore else */\n\n\n      if ($event.keyCode === 38 && avaOpts.length) {\n        this.onArrowKeyUp();\n        /* istanbul ignore else */\n\n        if (this.focusedItemIndex >= avaOpts.length) {\n          this.focusedItemIndex = avaOpts.length - 1;\n        }\n\n        avaOpts[this.focusedItemIndex].nativeElement.focus();\n        $event.preventDefault();\n      } // Enter\n\n      /* istanbul ignore else */\n\n\n      if ($event.keyCode === 13 && this.focusedItemIndex !== null) {\n        /** @type {?} */\n        const filteredItems = new FilterByPipe().transform(this.availableItems, this.searchText, this.config.searchOnKey);\n        this.selectItem(filteredItems[this.focusedItemIndex], this.availableItems.indexOf(filteredItems[this.focusedItemIndex]));\n        return false;\n      }\n    }\n    /**\n     * Component onInit\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      /* istanbul ignore else */\n      if (typeof this.options !== 'undefined' && Array.isArray(this.options)) {\n        this.availableItems = [...this.options.sort(this.config.customComparator)];\n        this.initDropdownValuesAndOptions();\n      }\n    }\n    /**\n     * after view init to subscribe to available option changes\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      this.availableOptions.changes.subscribe(this.setNotFoundState.bind(this));\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} internal\n     * @return {?}\n     */\n\n\n    writeValue(value, internal) {\n      if (value) {\n        if (Array.isArray(value)) {\n          if (this.multiple) {\n            this.value = value;\n          } else if (value.length > 0) {\n            this.value = value[0];\n          }\n        } else {\n          this.value = value;\n        }\n        /* istanbul ignore else */\n\n\n        if (this.selectedItems.length === 0) {\n          if (Array.isArray(value)) {\n            this.selectedItems = value;\n          } else {\n            this.selectedItems.push(value);\n          }\n\n          this.initDropdownValuesAndOptions();\n        }\n      } else {\n        this.value = [];\n        /* istanbul ignore else */\n\n        if (!internal) {\n          this.reset();\n        }\n      }\n      /* istanbul ignore else */\n\n\n      if (!internal) {\n        this.reset();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    reset() {\n      this.selectedItems = [];\n      this.availableItems = [...this.options.sort(this.config.customComparator)];\n      this.initDropdownValuesAndOptions();\n    }\n    /**\n     * function sets whether to show items not found text or not\n     * @return {?}\n     */\n\n\n    setNotFoundState() {\n      if (this.availableOptions.length === 0) {\n        this.showNotFound = true;\n      } else {\n        this.showNotFound = false;\n      }\n\n      this.cdref.detectChanges();\n    }\n    /**\n     * Component onchage i.e when any of the input properties change\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      this.selectedItems = []; // this.searchText = null;\n\n      this.options = this.options || [];\n      /* istanbul ignore else */\n\n      if (changes.options) {\n        this.availableItems = [...this.options.sort(this.config.customComparator)];\n      }\n      /* istanbul ignore else */\n\n\n      if (changes.value) {\n        /* istanbul ignore else */\n        if (JSON.stringify(changes.value.currentValue) === JSON.stringify([]) || changes.value.currentValue === '' || changes.value.currentValue === null) {\n          this.availableItems = [...this.options.sort(this.config.customComparator)];\n        }\n      }\n\n      this.initDropdownValuesAndOptions();\n    }\n    /**\n     * Deselct a selected items\n     * @param {?} item\n     * @param {?} index\n     * @return {?}\n     */\n\n\n    deselectItem(item, index) {\n      this.selectedItems.forEach(\n      /**\n      * @param {?} element\n      * @param {?} i\n      * @return {?}\n      */\n      (element, i) => {\n        /* istanbul ignore else */\n        if (item === element) {\n          this.selectedItems.splice(i, 1);\n        }\n      });\n      /** @type {?} */\n\n      let sortedItems = [...this.availableItems];\n      /* istanbul ignore else */\n\n      if (!this.availableItems.includes(item)) {\n        this.availableItems.push(item);\n        sortedItems = this.availableItems.sort(this.config.customComparator);\n      }\n\n      this.selectedItems = [...this.selectedItems];\n      this.availableItems = [...sortedItems];\n      /* istanbul ignore else */\n\n      if (!Array.isArray(this.value)) {\n        this.value = [];\n      }\n\n      this.valueChanged();\n      this.resetArrowKeyActiveElement();\n    }\n    /**\n     * Select an item\n     * @param {?} item\n     * @param {?=} index\n     * @return {?}\n     */\n\n\n    selectItem(item, index) {\n      /* istanbul ignore else */\n      if (!this.multiple) {\n        /* istanbul ignore else */\n        if (this.selectedItems.length > 0) {\n          this.availableItems.push(this.selectedItems[0]);\n        }\n\n        this.selectedItems = [];\n        this.toggleDropdown = false;\n      }\n\n      this.availableItems.forEach(\n      /**\n      * @param {?} element\n      * @param {?} i\n      * @return {?}\n      */\n      (element, i) => {\n        /* istanbul ignore else */\n        if (item === element) {\n          this.selectedItems.push(item);\n          this.availableItems.splice(i, 1);\n        }\n      });\n      /* istanbul ignore else */\n\n      if (this.config.clearOnSelection) {\n        this.searchText = null;\n      }\n\n      this.selectedItems = [...this.selectedItems];\n      this.availableItems = [...this.availableItems];\n      this.selectedItems.sort(this.config.customComparator);\n      this.availableItems.sort(this.config.customComparator); // this.searchText = null;\n\n      this.valueChanged();\n      this.resetArrowKeyActiveElement();\n    }\n    /**\n     * When selected items changes trigger the chaange back to parent\n     * @return {?}\n     */\n\n\n    valueChanged() {\n      this.writeValue(this.selectedItems, true); // this.valueChange.emit(this.value);\n\n      this.change.emit({\n        value: this.value\n      });\n      this.setSelectedDisplayText();\n    }\n    /**\n     * Toggle the dropdownlist on/off\n     * @return {?}\n     */\n\n\n    toggleSelectDropdown() {\n      this.toggleDropdown = !this.toggleDropdown;\n\n      if (this.toggleDropdown) {\n        this.open.emit();\n      } else {\n        this.searchText = null;\n        this.close.emit();\n      }\n\n      this.resetArrowKeyActiveElement();\n    }\n    /**\n     * The change handler for search text\n     * @return {?}\n     */\n\n\n    searchTextChanged() {\n      this.searchChange.emit(this.searchText);\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n\n\n    changeSearchText($event) {\n      $event.stopPropagation();\n    }\n    /**\n     * initialize the config and other properties\n     * @private\n     * @return {?}\n     */\n\n\n    initDropdownValuesAndOptions() {\n      /** @type {?} */\n      const config = {\n        displayKey: 'description',\n        height: 'auto',\n        search: false,\n        placeholder: 'Select',\n        searchPlaceholder: 'Search...',\n        limitTo: 0,\n        customComparator: undefined,\n        noResultsFound: 'No results found!',\n        moreText: 'more',\n        searchOnKey: null,\n        clearOnSelection: false,\n        inputDirection: 'ltr'\n      };\n      /* istanbul ignore else */\n\n      if (this.config === 'undefined' || Object.keys(this.config).length === 0) {\n        this.config = Object.assign({}, config);\n      }\n\n      for (const key of Object.keys(config)) {\n        this.config[key] = this.config[key] ? this.config[key] : config[key];\n      }\n\n      this.config = Object.assign({}, this.config); // Adding placeholder in config as default param\n\n      this.selectedDisplayText = this.config['placeholder'];\n      /* istanbul ignore else */\n\n      if (this.value !== '' && typeof this.value !== 'undefined') {\n        if (Array.isArray(this.value)) {\n          this.selectedItems = this.value;\n        } else if (this.value !== '' && this.value !== null) {\n          this.selectedItems[0] = this.value;\n        } else {\n          this.selectedItems = [];\n          this.value = [];\n        }\n\n        this.selectedItems.forEach(\n        /**\n        * @param {?} item\n        * @return {?}\n        */\n        item => {\n          /** @type {?} */\n          const ind = this.availableItems.findIndex(\n          /**\n          * @param {?} aItem\n          * @return {?}\n          */\n          aItem => JSON.stringify(item) === JSON.stringify(aItem));\n\n          if (ind !== -1) {\n            this.availableItems.splice(ind, 1);\n          }\n        });\n      }\n\n      this.setSelectedDisplayText();\n    }\n    /**\n     * set the text to be displayed\n     * @private\n     * @return {?}\n     */\n\n\n    setSelectedDisplayText() {\n      /** @type {?} */\n      let text = this.selectedItems[0];\n      /* istanbul ignore else */\n\n      if (typeof this.selectedItems[0] === 'object') {\n        text = this.config.displayFn ? this.config.displayFn(this.selectedItems[0]) : this.selectedItems[0][this.config.displayKey];\n      }\n\n      if (this.multiple && this.selectedItems.length > 0) {\n        this.selectedDisplayText = this.selectedItems.length === 1 ? text : text + ` + ${this.selectedItems.length - 1} ${this.config.moreText}`;\n      } else {\n        this.selectedDisplayText = this.selectedItems.length === 0 ? this.config.placeholder : text;\n      }\n    }\n    /**\n     * Event handler for arrow key up event thats focuses on a item\n     * @private\n     * @return {?}\n     */\n\n\n    onArrowKeyUp() {\n      /* istanbul ignore else */\n      if (this.focusedItemIndex === 0) {\n        this.focusedItemIndex = this.availableItems.length - 1;\n        return;\n      }\n      /* istanbul ignore else */\n\n\n      if (this.onArrowKey()) {\n        this.focusedItemIndex--;\n      }\n    }\n    /**\n     * Event handler for arrow key down event thats focuses on a item\n     * @private\n     * @return {?}\n     */\n\n\n    onArrowKeyDown() {\n      /* istanbul ignore else */\n      if (this.focusedItemIndex === this.availableItems.length - 1) {\n        this.focusedItemIndex = 0;\n        return;\n      }\n      /* istanbul ignore else */\n\n\n      if (this.onArrowKey()) {\n        this.focusedItemIndex++;\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    onArrowKey() {\n      /* istanbul ignore else */\n      if (this.focusedItemIndex === null) {\n        this.focusedItemIndex = 0;\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     * will reset the element that is marked active using arrow keys\n     * @private\n     * @return {?}\n     */\n\n\n    resetArrowKeyActiveElement() {\n      this.focusedItemIndex = null;\n    }\n\n  }\n\n  NgxSelectDropdownComponent.ɵfac = function NgxSelectDropdownComponent_Factory(t) {\n    return new (t || NgxSelectDropdownComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  NgxSelectDropdownComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgxSelectDropdownComponent,\n    selectors: [[\"ngx-select-dropdown\"]],\n    viewQuery: function NgxSelectDropdownComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.availableOptions = _t);\n      }\n    },\n    hostBindings: function NgxSelectDropdownComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NgxSelectDropdownComponent_click_HostBindingHandler() {\n          return ctx.clickInsideComponent();\n        })(\"blur\", function NgxSelectDropdownComponent_blur_HostBindingHandler() {\n          return ctx.blur();\n        })(\"focus\", function NgxSelectDropdownComponent_focus_HostBindingHandler() {\n          return ctx.focus();\n        })(\"click\", function NgxSelectDropdownComponent_click_HostBindingHandler() {\n          return ctx.clickOutsideComponent();\n        }, false, ɵngcc0.ɵɵresolveDocument)(\"keydown\", function NgxSelectDropdownComponent_keydown_HostBindingHandler() {\n          return ctx.KeyPressOutsideComponent();\n        }, false, ɵngcc0.ɵɵresolveDocument)(\"keydown\", function NgxSelectDropdownComponent_keydown_HostBindingHandler($event) {\n          return ctx.handleKeyboardEvent($event);\n        });\n      }\n    },\n    inputs: {\n      options: \"options\",\n      config: \"config\",\n      multiple: \"multiple\",\n      _value: \"_value\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      change: \"change\",\n      searchChange: \"searchChange\",\n      open: \"open\",\n      close: \"close\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(\n      /**\n      * @return {?}\n      */\n      () => NgxSelectDropdownComponent),\n      multi: true\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 6,\n    vars: 6,\n    consts: [[\"tabindex\", \"0\", 1, \"ngx-dropdown-container\"], [\"type\", \"button\", \"tabindex\", \"-1\", 1, \"ngx-dropdown-button\", 3, \"ngClass\", \"disabled\", \"click\"], [1, \"display-text\"], [1, \"nsdicon-angle-down\"], [\"class\", \"ngx-dropdown-list-container\", 3, \"maxHeight\", 4, \"ngIf\"], [1, \"ngx-dropdown-list-container\"], [\"class\", \"search-container\", 4, \"ngIf\"], [1, \"selected-items\"], [\"tabindex\", \"-1\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [1, \"available-items\"], [\"tabindex\", \"-1\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"search-container\"], [\"name\", \"search-text\", \"tabindex\", \"-1\", \"autocomplete\", \"off\", 3, \"ngModel\", \"change\", \"input\", \"ngModelChange\"], [3, \"ngClass\"], [1, \"nsdicon-search\"], [\"tabindex\", \"-1\", 3, \"click\"], [1, \"nsdicon-close\"], [\"tabindex\", \"-1\", 3, \"ngClass\", \"click\"], [\"availableOption\", \"\"]],\n    template: function NgxSelectDropdownComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"button\", 1);\n        ɵngcc0.ɵɵlistener(\"click\", function NgxSelectDropdownComponent_Template_button_click_1_listener() {\n          return ctx.toggleSelectDropdown();\n        });\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵtext(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"span\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(5, NgxSelectDropdownComponent_div_5_Template, 10, 14, \"div\", 4);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(4, _c3, ctx.disabled))(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate1(\"\", ctx.selectedDisplayText, \" \");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.toggleDropdown);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc1.NgForOf, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel];\n    },\n    pipes: function () {\n      return [LimitToPipe, FilterByPipe];\n    },\n    styles: [\".ngx-dropdown-container[_ngcontent-%COMP%]{width:100%;position:relative}.ngx-dropdown-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{display:inline-block;margin-bottom:0;font-weight:400;line-height:1.42857143;vertical-align:middle;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid #ccc;border-radius:4px;color:#333;background-color:#fff;white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis;text-align:left}.ngx-dropdown-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:inline;vertical-align:middle}.ngx-dropdown-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   .nsdicon-angle-down[_ngcontent-%COMP%]{right:5px;position:relative;float:right}.ngx-dropdown-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   .nsdicon-angle-down[_ngcontent-%COMP%]::before{border-style:solid;border-width:.1em .1em 0 0;content:\\\"\\\";display:inline-block;height:10px;position:relative;vertical-align:text-top;width:10px;top:0;transform:rotate(135deg)}.ngx-dropdown-container[_ngcontent-%COMP%]   .ngx-dropdown-button[_ngcontent-%COMP%]{width:100%;min-height:30px;padding:5px 10px;background-color:#fff}.ngx-dropdown-container[_ngcontent-%COMP%]   .ngx-dropdown-button[_ngcontent-%COMP%]   .display-text[_ngcontent-%COMP%]{display:inline-block;width:calc(100% - 20px)}.ngx-dropdown-container[_ngcontent-%COMP%]   .ngx-dropdown-list-container[_ngcontent-%COMP%]{box-sizing:border-box;border:1px solid rgba(0,0,0,.15);border-radius:4px;padding-left:10px;padding-right:10px;z-index:999999999;width:100%;background:#fff;position:absolute;box-shadow:5px 5px 5px 0 rgba(0,0,0,.21);overflow-y:auto}.ngx-dropdown-container[_ngcontent-%COMP%]   .ngx-dropdown-list-container[_ngcontent-%COMP%]   .search-container[_ngcontent-%COMP%]{position:relative;padding-top:10px;margin-top:5px}.ngx-dropdown-container[_ngcontent-%COMP%]   .ngx-dropdown-list-container[_ngcontent-%COMP%]   .search-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{background-color:transparent;border:none;border-bottom:1px solid #9e9e9e;border-radius:0;outline:0;height:2rem;width:100%;font-size:13px;margin:0;padding:0;box-shadow:none;box-sizing:content-box;transition:.3s}.ngx-dropdown-container[_ngcontent-%COMP%]   .ngx-dropdown-list-container[_ngcontent-%COMP%]   .search-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus{border-bottom:1px solid #26a69a}.ngx-dropdown-container[_ngcontent-%COMP%]   .ngx-dropdown-list-container[_ngcontent-%COMP%]   .search-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus + label[_ngcontent-%COMP%]{transform:translateY(-2px) scale(.8);transform-origin:0 0}.ngx-dropdown-container[_ngcontent-%COMP%]   .ngx-dropdown-list-container[_ngcontent-%COMP%]   .search-container[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{color:#9e9e9e;position:absolute;top:0;left:0;height:100%;font-size:1rem;cursor:text;transition:transform .2s ease-out;transform-origin:0 100%;text-align:initial;transform:translateY(12px);pointer-events:none}.ngx-dropdown-container[_ngcontent-%COMP%]   .ngx-dropdown-list-container[_ngcontent-%COMP%]   .search-container[_ngcontent-%COMP%]   label.active[_ngcontent-%COMP%]{transform:translateY(-2px) scale(.8);transform-origin:0 0}.ngx-dropdown-container[_ngcontent-%COMP%]   .ngx-dropdown-list-container[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]{margin-top:1rem;margin-bottom:1rem;list-style-type:none;padding-left:0}.ngx-dropdown-container[_ngcontent-%COMP%]   .ngx-dropdown-list-container[_ngcontent-%COMP%]   ul.selected-items[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{background-color:#337ab7;color:#fff;margin-bottom:2px}.ngx-dropdown-container[_ngcontent-%COMP%]   .ngx-dropdown-list-container[_ngcontent-%COMP%]   ul.selected-items[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   .nsdicon-close[_ngcontent-%COMP%]{font-weight:700;font-size:large}.ngx-dropdown-container[_ngcontent-%COMP%]   .ngx-dropdown-list-container[_ngcontent-%COMP%]   ul.available-items[_ngcontent-%COMP%]   li.active[_ngcontent-%COMP%]{background-color:#337ab7;color:#ffff}.ngx-dropdown-container[_ngcontent-%COMP%]   .ngx-dropdown-list-container[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{font-size:inherit;cursor:pointer;display:block;padding:3px 20px;clear:both;font-weight:400;line-height:1.42857143;color:#333;white-space:normal}.ngx-dropdown-container[_ngcontent-%COMP%]   .ngx-disabled[_ngcontent-%COMP%]{pointer-events:none;background-color:#e9ecef;opacity:1;cursor:no-drop}\"]\n  });\n  /** @nocollapse */\n\n  return NgxSelectDropdownComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * value of the dropdown\n   * @type {?}\n   */\n  NgxSelectDropdownComponent.prototype._value;\n  /**\n   * Get the required inputs\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.options;\n  /**\n   * configuration options\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.config;\n  /**\n   * Whether multiple selection or single selection allowed\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.multiple;\n  /**\n   * Value\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.disabled;\n  /**\n   * change event when value changes to provide user to handle things in change event\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.change;\n  /**\n   * The search text change event emitter emitted when user type in the search input\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.searchChange;\n  /**\n   * Event emitted when dropdown is open.\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.open;\n  /**\n   * Event emitted when dropdown is open.\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.close;\n  /**\n   * Toogle the dropdown list\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.toggleDropdown;\n  /**\n   * Available items for selection\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.availableItems;\n  /**\n   * Selected Items\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.selectedItems;\n  /**\n   * Selection text to be Displayed\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.selectedDisplayText;\n  /**\n   * Search text\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.searchText;\n  /**\n   * variable to track if clicked inside or outside of component\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.clickedInside;\n  /**\n   * variable to track keypress event inside and outsid of component\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.insideKeyPress;\n  /**\n   * variable to track the focused item whenuser uses arrow keys to select item\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.focusedItemIndex;\n  /**\n   * element to show not found text when not itmes match the search\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.showNotFound;\n  /**\n   * Hold the reference to available items in the list to focus on the item when scrolling\n   * @type {?}\n   */\n\n  NgxSelectDropdownComponent.prototype.availableOptions;\n  /** @type {?} */\n\n  NgxSelectDropdownComponent.prototype.onChange;\n  /** @type {?} */\n\n  NgxSelectDropdownComponent.prototype.onTouched;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxSelectDropdownComponent.prototype.cdref;\n  /** @type {?} */\n\n  NgxSelectDropdownComponent.prototype._elementRef;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/pipes/limit-to.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet LimitToPipe = /*#__PURE__*/(() => {\n  class LimitToPipe {\n    /**\n     * @param {?} array\n     * @param {?} itemsCount\n     * @param {?=} startIndex\n     * @return {?}\n     */\n    transform(array, itemsCount, startIndex = 0) {\n      if (!Array.isArray(array) || itemsCount === 0) {\n        return array;\n      }\n\n      return array.slice(startIndex, startIndex + itemsCount);\n    }\n\n  }\n\n  LimitToPipe.ɵfac = function LimitToPipe_Factory(t) {\n    return new (t || LimitToPipe)();\n  };\n\n  LimitToPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"limitTo\",\n    type: LimitToPipe,\n    pure: true\n  });\n  return LimitToPipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-select-dropdown.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet SelectDropDownModule = /*#__PURE__*/(() => {\n  class SelectDropDownModule {}\n\n  SelectDropDownModule.ɵfac = function SelectDropDownModule_Factory(t) {\n    return new (t || SelectDropDownModule)();\n  };\n\n  SelectDropDownModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: SelectDropDownModule\n  });\n  SelectDropDownModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule]]\n  });\n  return SelectDropDownModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SelectDropDownModule, {\n    declarations: function () {\n      return [NgxSelectDropdownComponent, FilterByPipe, LimitToPipe];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule];\n    },\n    exports: function () {\n      return [NgxSelectDropdownComponent, FilterByPipe, LimitToPipe];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngx-select-dropdown.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { FilterByPipe, LimitToPipe, NgxSelectDropdownComponent, SelectDropDownModule, SelectDropDownService }; //# sourceMappingURL=ngx-select-dropdown.js.map","map":null,"metadata":{},"sourceType":"module"}