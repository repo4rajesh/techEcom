{"ast":null,"code":"\"use strict\";\n\nvar ɵngcc0 = require('@angular/core');\n\nvar _c0 = [\"host\"];\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // Imports\n\nvar core_1 = require(\"@angular/core\");\n\nvar forms_1 = require(\"@angular/forms\");\n\nvar ckbutton_directive_1 = require(\"./ckbutton.directive\");\n\nvar ckgroup_directive_1 = require(\"./ckgroup.directive\");\n/**\n * CKEditor component\n * Usage :\n *  <ckeditor [(ngModel)]=\"data\" [config]=\"{...}\" debounce=\"500\"></ckeditor>\n */\n\n\nvar CKEditorComponent =\n/** @class */\nfunction () {\n  /**\n   * Constructor\n   */\n  function CKEditorComponent(zone) {\n    this.zone = zone;\n    this.change = new core_1.EventEmitter();\n    this.editorChange = new core_1.EventEmitter();\n    this.ready = new core_1.EventEmitter();\n    this.blur = new core_1.EventEmitter();\n    this.focus = new core_1.EventEmitter();\n    this.contentDom = new core_1.EventEmitter();\n    this.fileUploadRequest = new core_1.EventEmitter();\n    this.fileUploadResponse = new core_1.EventEmitter();\n    this.paste = new core_1.EventEmitter();\n    this.drop = new core_1.EventEmitter();\n    this._value = '';\n  }\n\n  CKEditorComponent_1 = CKEditorComponent;\n  Object.defineProperty(CKEditorComponent.prototype, \"value\", {\n    get: function () {\n      return this._value;\n    },\n    set: function (v) {\n      if (v !== this._value) {\n        this._value = v;\n        this.onChange(v);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CKEditorComponent.prototype.ngOnChanges = function (changes) {\n    if (changes.readonly && this.instance) {\n      this.instance.setReadOnly(changes.readonly.currentValue);\n    }\n  };\n  /**\n   * On component destroy\n   */\n\n\n  CKEditorComponent.prototype.ngOnDestroy = function () {\n    var _this = this;\n\n    if (this.instance) {\n      setTimeout(function () {\n        _this.instance.removeAllListeners();\n\n        CKEDITOR.instances[_this.instance.name].destroy();\n\n        _this.instance.destroy();\n\n        _this.instance = null;\n      });\n    }\n  };\n  /**\n   * On component view init\n   */\n\n\n  CKEditorComponent.prototype.ngAfterViewInit = function () {\n    this.ckeditorInit(this.config || {});\n  };\n  /**\n   * On component view checked\n   */\n\n\n  CKEditorComponent.prototype.ngAfterViewChecked = function () {\n    this.ckeditorInit(this.config || {});\n  };\n  /**\n   * Value update process\n   */\n\n\n  CKEditorComponent.prototype.updateValue = function (value) {\n    var _this = this;\n\n    this.zone.run(function () {\n      _this.value = value;\n\n      _this.onChange(value);\n\n      _this.onTouched();\n\n      _this.change.emit(value);\n    });\n  };\n  /**\n   * CKEditor init\n   */\n\n\n  CKEditorComponent.prototype.ckeditorInit = function (config) {\n    var _this = this;\n\n    if (typeof CKEDITOR === 'undefined') {\n      console.warn('CKEditor 4.x is missing (http://ckeditor.com/)');\n    } else {\n      // Check textarea exists\n      if (this.instance || !this.documentContains(this.host.nativeElement)) {\n        return;\n      }\n\n      if (this.readonly) {\n        config.readOnly = this.readonly;\n      } // CKEditor replace textarea\n\n\n      this.instance = CKEDITOR.replace(this.host.nativeElement, config); // Set initial value\n\n      this.instance.setData(this.value); // listen for instanceReady event\n\n      this.instance.on('instanceReady', function (evt) {\n        // if value has changed while instance loading\n        // update instance with current component value\n        if (_this.instance.getData() !== _this.value) {\n          _this.instance.setData(_this.value);\n        } // send the evt to the EventEmitter\n\n\n        _this.ready.emit(evt);\n      }); // CKEditor change event\n\n      this.instance.on('change', function (evt) {\n        _this.onTouched();\n\n        var value = _this.instance.getData();\n\n        if (_this.value !== value) {\n          // Debounce update\n          if (_this.debounce) {\n            if (_this.debounceTimeout) clearTimeout(_this.debounceTimeout);\n            _this.debounceTimeout = setTimeout(function () {\n              _this.updateValue(value);\n\n              _this.debounceTimeout = null;\n            }, parseInt(_this.debounce)); // Live update\n          } else {\n            _this.updateValue(value);\n          }\n        } // Original ckeditor event dispatch\n\n\n        _this.editorChange.emit(evt);\n      }); // CKEditor blur event\n\n      this.instance.on('blur', function (evt) {\n        _this.blur.emit(evt);\n      }); // CKEditor focus event\n\n      this.instance.on('focus', function (evt) {\n        _this.focus.emit(evt);\n      }); // CKEditor contentDom event\n\n      this.instance.on('contentDom', function (evt) {\n        _this.contentDom.emit(evt);\n      }); // CKEditor fileUploadRequest event\n\n      this.instance.on('fileUploadRequest', function (evt) {\n        _this.fileUploadRequest.emit(evt);\n      }); // CKEditor fileUploadResponse event\n\n      this.instance.on('fileUploadResponse', function (evt) {\n        _this.fileUploadResponse.emit(evt);\n      }); // CKEditor paste event\n\n      this.instance.on('paste', function (evt) {\n        _this.paste.emit(evt);\n      }); // CKEditor drop event\n\n      this.instance.on('drop', function (evt) {\n        _this.drop.emit(evt);\n      }); // Add Toolbar Groups to Editor. This will also add Buttons within groups.\n\n      this.toolbarGroups.forEach(function (group) {\n        group.initialize(_this);\n      }); // Add Toolbar Buttons to Editor.\n\n      this.toolbarButtons.forEach(function (button) {\n        button.initialize(_this);\n      });\n    }\n  };\n  /**\n   * Implements ControlValueAccessor\n   */\n\n\n  CKEditorComponent.prototype.writeValue = function (value) {\n    this._value = value;\n    if (this.instance) this.instance.setData(value);\n  };\n\n  CKEditorComponent.prototype.onChange = function (_) {};\n\n  CKEditorComponent.prototype.onTouched = function () {};\n\n  CKEditorComponent.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n\n  CKEditorComponent.prototype.registerOnTouched = function (fn) {\n    this.onTouched = fn;\n  };\n\n  CKEditorComponent.prototype.documentContains = function (node) {\n    return document.contains ? document.contains(node) : document.body.contains(node);\n  };\n\n  __decorate([core_1.Input(), __metadata(\"design:type\", Object)], CKEditorComponent.prototype, \"config\", void 0);\n\n  __decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], CKEditorComponent.prototype, \"readonly\", void 0);\n\n  __decorate([core_1.Input(), __metadata(\"design:type\", String)], CKEditorComponent.prototype, \"debounce\", void 0);\n\n  __decorate([core_1.Output(), __metadata(\"design:type\", Object)], CKEditorComponent.prototype, \"change\", void 0);\n\n  __decorate([core_1.Output(), __metadata(\"design:type\", Object)], CKEditorComponent.prototype, \"editorChange\", void 0);\n\n  __decorate([core_1.Output(), __metadata(\"design:type\", Object)], CKEditorComponent.prototype, \"ready\", void 0);\n\n  __decorate([core_1.Output(), __metadata(\"design:type\", Object)], CKEditorComponent.prototype, \"blur\", void 0);\n\n  __decorate([core_1.Output(), __metadata(\"design:type\", Object)], CKEditorComponent.prototype, \"focus\", void 0);\n\n  __decorate([core_1.Output(), __metadata(\"design:type\", Object)], CKEditorComponent.prototype, \"contentDom\", void 0);\n\n  __decorate([core_1.Output(), __metadata(\"design:type\", Object)], CKEditorComponent.prototype, \"fileUploadRequest\", void 0);\n\n  __decorate([core_1.Output(), __metadata(\"design:type\", Object)], CKEditorComponent.prototype, \"fileUploadResponse\", void 0);\n\n  __decorate([core_1.Output(), __metadata(\"design:type\", Object)], CKEditorComponent.prototype, \"paste\", void 0);\n\n  __decorate([core_1.Output(), __metadata(\"design:type\", Object)], CKEditorComponent.prototype, \"drop\", void 0);\n\n  __decorate([core_1.ViewChild('host'), __metadata(\"design:type\", Object)], CKEditorComponent.prototype, \"host\", void 0);\n\n  __decorate([core_1.ContentChildren(ckbutton_directive_1.CKButtonDirective), __metadata(\"design:type\", core_1.QueryList)], CKEditorComponent.prototype, \"toolbarButtons\", void 0);\n\n  __decorate([core_1.ContentChildren(ckgroup_directive_1.CKGroupDirective), __metadata(\"design:type\", core_1.QueryList)], CKEditorComponent.prototype, \"toolbarGroups\", void 0);\n\n  __decorate([core_1.Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], CKEditorComponent.prototype, \"value\", null);\n\n  CKEditorComponent = CKEditorComponent_1 = __decorate([__metadata(\"design:paramtypes\", [core_1.NgZone])], CKEditorComponent);\n\n  CKEditorComponent.ɵfac = function CKEditorComponent_Factory(t) {\n    return new (t || CKEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CKEditorComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CKEditorComponent,\n    selectors: [[\"ckeditor\"]],\n    contentQueries: function CKEditorComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ckbutton_directive_1.CKButtonDirective, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ckgroup_directive_1.CKGroupDirective, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toolbarButtons = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toolbarGroups = _t);\n      }\n    },\n    viewQuery: function CKEditorComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.host = _t.first);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      config: \"config\",\n      readonly: \"readonly\",\n      debounce: \"debounce\"\n    },\n    outputs: {\n      change: \"change\",\n      editorChange: \"editorChange\",\n      ready: \"ready\",\n      blur: \"blur\",\n      focus: \"focus\",\n      contentDom: \"contentDom\",\n      fileUploadRequest: \"fileUploadRequest\",\n      fileUploadResponse: \"fileUploadResponse\",\n      paste: \"paste\",\n      drop: \"drop\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: forms_1.NG_VALUE_ACCESSOR,\n      useExisting: core_1.forwardRef(function () {\n        return CKEditorComponent_1;\n      }),\n      multi: true\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"host\", \"\"]],\n    template: function CKEditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"textarea\", null, 0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return CKEditorComponent;\n  var CKEditorComponent_1;\n}();\n\nexports.CKEditorComponent = CKEditorComponent; //# sourceMappingURL=ckeditor.component.js.map","map":null,"metadata":{},"sourceType":"script"}