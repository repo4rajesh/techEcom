{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as actions from '../product-action/product-action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../product-service\";\nexport class PersonalizeProductEffect {\n  constructor(action$, service) {\n    this.action$ = action$;\n    this.service = service; // NEW PRODUCT SETTINGS\n\n    this.doAddseo$ = this.action$.pipe(ofType(actions.ActionTypes.DO_NEW_PRODUCT_SETTINGS), map(action => action.payload), switchMap(state => {\n      return this.service.createProduct(state).pipe(tap(res => {\n        sessionStorage.setItem('itemsPerPage', res.data.itemsPerPage);\n      }), switchMap(user => [new actions.DoNewProductSettingSuccessAction(user)]), catchError(error => of(new actions.DoNewProductSettingFailAction(error))));\n    })); // GET PRODUCT SETTINGS\n\n    this.dogetseosetting$ = this.action$.pipe(ofType(actions.ActionTypes.DO_PRODUCT_SETTINGS), map(action => action.payload), switchMap(() => {\n      return this.service.getProduct().pipe(switchMap(user => {\n        return [new actions.DoGetProductSettingSuccessAction(user)];\n      }), catchError(error => of(new actions.DoGetProductSettingFailAction(error))));\n    }));\n  }\n\n}\n\nPersonalizeProductEffect.ɵfac = function PersonalizeProductEffect_Factory(t) {\n  return new (t || PersonalizeProductEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.PerSonalizeProductService));\n};\n\nPersonalizeProductEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PersonalizeProductEffect,\n  factory: PersonalizeProductEffect.ɵfac\n});\n\n__decorate([Effect()], PersonalizeProductEffect.prototype, \"doAddseo$\", void 0);\n\n__decorate([Effect()], PersonalizeProductEffect.prototype, \"dogetseosetting$\", void 0);","map":null,"metadata":{},"sourceType":"module"}