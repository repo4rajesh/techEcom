{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { catchError } from 'rxjs/operators';\nimport * as actions from '../social-action/social.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../social.service\";\nexport class SocialEffect {\n  constructor(action$, service) {\n    this.action$ = action$;\n    this.service = service; // NEW SOCIAL EFFECT\n\n    this.doAddsocial$ = this.action$.pipe(ofType(actions.ActionTypes.DO_NEW_SOCIAL), map(action => action.payload), switchMap(state => {\n      return this.service.createsocial(state).pipe(switchMap(user => [new actions.DoNewSocialSuccessAction(user)]), catchError(error => of(new actions.DoNewSocialFailAction(error))));\n    })); // GET SOCIAL EFFECT\n\n    this.dogetsocial$ = this.action$.pipe(ofType(actions.ActionTypes.DO_GET_SOCIAL), map(action => action.payload), switchMap(() => {\n      return this.service.getSocial().pipe(switchMap(user => {\n        return [new actions.DoGetSocialSuccessAction(user)];\n      }), catchError(error => of(new actions.DoGetSocialFailAction())));\n    }));\n  }\n\n}\n\nSocialEffect.ɵfac = function SocialEffect_Factory(t) {\n  return new (t || SocialEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.SocialService));\n};\n\nSocialEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SocialEffect,\n  factory: SocialEffect.ɵfac\n});\n\n__decorate([Effect()], SocialEffect.prototype, \"doAddsocial$\", void 0);\n\n__decorate([Effect()], SocialEffect.prototype, \"dogetsocial$\", void 0);","map":null,"metadata":{},"sourceType":"module"}