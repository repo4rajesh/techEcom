{"ast":null,"code":"import * as zoneActions from '../zone/zone-action/zone.action';\nimport * as countryActions from '../country/country-action/country.action';\nimport { ZoneForm } from './zone-model/zone.model';\nimport { newZone, updateZone, zoneDelete, zonePagination, zoneList, ZoneAddFailed, ZoneAddLoaded, ZoneAddLoading, ZoneCountFailed, ZoneCountLoaded, ZoneCountLoading, ZoneDeleteFailed, ZoneDeleteLoaded, ZoneDeleteLoading, ZoneListFailed, ZoneListLoaded, ZoneListLoading, ZoneUpdateFailed, ZoneUpdateLoaded, ZoneUpdateLoading } from './zone-reducer/zone.selector';\nimport { ZonelistForm } from './zone-model/zonelist.model';\nimport { CountryListForm } from '../country/country-model/countrylist.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nexport let ZoneSandbox = /*#__PURE__*/(() => {\n  class ZoneSandbox {\n    constructor(appState, router) {\n      this.appState = appState;\n      this.router = router;\n      this.zoneList$ = this.appState.select(zoneList);\n      this.zonePagination$ = this.appState.select(zonePagination);\n      this.newZone$ = this.appState.select(newZone);\n      this.updateZone$ = this.appState.select(updateZone);\n      this.deleteZone$ = this.appState.select(zoneDelete);\n      this.zoneListLoading$ = this.appState.select(ZoneListLoading);\n      this.zoneListLoaded$ = this.appState.select(ZoneListLoaded);\n      this.zoneListFailed$ = this.appState.select(ZoneListFailed);\n      this.zoneDeleteLoading$ = this.appState.select(ZoneDeleteLoading);\n      this.zoneDeleteLoaded$ = this.appState.select(ZoneDeleteLoaded);\n      this.zoneDeleteFailed$ = this.appState.select(ZoneDeleteFailed);\n      this.zoneCountLoading$ = this.appState.select(ZoneCountLoading);\n      this.zoneCountLoaded$ = this.appState.select(ZoneCountLoaded);\n      this.zoneCountFailed$ = this.appState.select(ZoneCountFailed);\n      this.zoneAddLoading$ = this.appState.select(ZoneAddLoading);\n      this.zoneAddLoaded$ = this.appState.select(ZoneAddLoaded);\n      this.zoneAddFailed$ = this.appState.select(ZoneAddFailed);\n      this.zoneUpdateLoading$ = this.appState.select(ZoneUpdateLoading);\n      this.zoneUpdateLoaded$ = this.appState.select(ZoneUpdateLoaded);\n      this.zoneUpdateFailed$ = this.appState.select(ZoneUpdateFailed);\n      this.subscriptions = [];\n      this.subscribe();\n    }\n\n    addNewZone(data) {\n      this.appState.dispatch(new zoneActions.DoNewZoneAction(new ZoneForm(data)));\n    }\n\n    updateZone(value) {\n      this.appState.dispatch(new zoneActions.DoUpdateZoneAction(new ZoneForm(value)));\n    }\n\n    getZoneList(value) {\n      this.appState.dispatch(new zoneActions.GetZoneListAction(new ZonelistForm(value)));\n    }\n\n    zoneDelete(value) {\n      this.appState.dispatch(new zoneActions.DoZoneDeleteAction(value));\n    }\n\n    getZonePagination(value) {\n      this.appState.dispatch(new zoneActions.GetZoneCountAction(new ZonelistForm(value)));\n    }\n\n    getCountriesList(value) {\n      this.appState.dispatch(new countryActions.GetCountrylistAction(new CountryListForm(value)));\n    }\n\n    subscribe() {\n      this.subscriptions.push(this.updateZone$.subscribe(data => {\n        if (data && data.status === 1) {\n          this.router.navigate(['/settings/local/zone']);\n        }\n      }));\n      this.subscriptions.push(this.newZone$.subscribe(data => {\n        if (data && data.status === 1) {\n          this.router.navigate(['/settings/local/zone']);\n        }\n      }));\n    }\n\n  }\n\n  ZoneSandbox.ɵfac = function ZoneSandbox_Factory(t) {\n    return new (t || ZoneSandbox)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router));\n  };\n\n  ZoneSandbox.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ZoneSandbox,\n    factory: ZoneSandbox.ɵfac\n  });\n  return ZoneSandbox;\n})();","map":null,"metadata":{},"sourceType":"module"}