{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as actions from '../permission-action/permission.action';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../permission.ApiClientService\";\nexport class PermissionEffects {\n  constructor(action$, apiCli) {\n    this.action$ = action$;\n    this.apiCli = apiCli; // NEW PERMISSION\n\n    this.doAddPermission$ = this.action$.pipe(ofType(actions.ActionTypes.DO_NEW_PERMISSION), map(action => action.payload), switchMap(state => {\n      return this.apiCli.addPermission(state).pipe(switchMap(permission => [new actions.DoNewPermissionSuccessAction(permission)]), catchError(error => of(new actions.DoNewPermissionFailAction(error))));\n    })); // UPDATE PERMISSION\n\n    this.doUpdatePermission$ = this.action$.pipe(ofType(actions.ActionTypes.DO_UPDATE_PERMISSION), map(action => action.payload), switchMap(state => {\n      return this.apiCli.updatePermission(state).pipe(switchMap(permission => [new actions.DoUpdatePermissionSuccessAction(permission)]), catchError(error => of(new actions.DoUpdatePermissionFailAction(error))));\n    })); // LIST - PERMISSION LIST\n\n    this.doPermissionList$ = this.action$.pipe(ofType(actions.ActionTypes.DO_PERMISSION_LIST), map(action => action.payload), switchMap(state => {\n      return this.apiCli.permissionList(state).pipe(map(analysis => new actions.DoPermissionListSuccessAction(analysis)), catchError(error => of(new actions.DoPermissionListFailAction(error))));\n    })); // pagination - PERMISSION LIST\n\n    this.dopaginationPermissionList$ = this.action$.pipe(ofType(actions.ActionTypes.GET_PERMISSION_COUNT), map(action => action.payload), switchMap(state => {\n      return this.apiCli.permissionList(state).pipe(map(analysis => new actions.GetPermissionCountSuccessAction(analysis)), catchError(error => of(new actions.GetPermissionCountFailAction(error))));\n    })); // get permission\n\n    this.getPermission$ = this.action$.pipe(ofType(actions.ActionTypes.GET_PERMISSION), map(action => action.payload), switchMap(state => {\n      return this.apiCli.permissionGet(state).pipe(map(analysis => new actions.GetPermissionSuccess(analysis)), catchError(error => of(new actions.GetPermissionFail(error))));\n    }));\n  }\n\n}\n\nPermissionEffects.ɵfac = function PermissionEffects_Factory(t) {\n  return new (t || PermissionEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.PermissionApiClientService));\n};\n\nPermissionEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PermissionEffects,\n  factory: PermissionEffects.ɵfac\n});\n\n__decorate([Effect()], PermissionEffects.prototype, \"doAddPermission$\", void 0);\n\n__decorate([Effect()], PermissionEffects.prototype, \"doUpdatePermission$\", void 0);\n\n__decorate([Effect()], PermissionEffects.prototype, \"doPermissionList$\", void 0);\n\n__decorate([Effect()], PermissionEffects.prototype, \"dopaginationPermissionList$\", void 0);\n\n__decorate([Effect()], PermissionEffects.prototype, \"getPermission$\", void 0);","map":null,"metadata":{},"sourceType":"module"}