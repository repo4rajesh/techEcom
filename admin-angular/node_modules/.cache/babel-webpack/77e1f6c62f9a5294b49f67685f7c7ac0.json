{"ast":null,"code":"import * as countryActions from '../country/country-action/country.action';\nimport { CountryForm } from './country-model/country.model';\nimport { CountryListForm } from './country-model/countrylist.model';\nimport { CountryAddFailed, CountryAddLoaded, CountryAddLoading, CountryCountFailed, CountryCountLoaded, CountryCountLoading, CountryDeleteFailed, CountryDeleteLoaded, CountryDeleteLoading, CountryListFailed, CountryListLoaded, CountryListLoading, CountryUpdateFailed, CountryUpdateLoaded, CountryUpdateLoading, getAddcountry, getCountryCount, countryList, getDeleteCountry, getUpdateCountry, getUpdateCountryLoaded } from './country-reducer/country.selector';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ng6-toastr-notifications\";\nexport let CountrySandbox = /*#__PURE__*/(() => {\n  class CountrySandbox {\n    constructor(appState, router, toastr) {\n      this.appState = appState;\n      this.router = router;\n      this.toastr = toastr;\n      this.countryList$ = this.appState.select(countryList);\n      this.addCountry$ = this.appState.select(getAddcountry);\n      this.updateCountry$ = this.appState.select(getUpdateCountry);\n      this.updateCountryLoaded$ = this.appState.select(getUpdateCountryLoaded);\n      this.deleteCountry$ = this.appState.select(getDeleteCountry);\n      this.countryCount$ = this.appState.select(getCountryCount);\n      this.countryListLoading$ = this.appState.select(CountryListLoading);\n      this.countryListLoaded$ = this.appState.select(CountryListLoaded);\n      this.countryListFailed$ = this.appState.select(CountryListFailed);\n      this.countryDeleteLoading$ = this.appState.select(CountryDeleteLoading);\n      this.countryDeleteLoaded$ = this.appState.select(CountryDeleteLoaded);\n      this.countryDeleteFailed$ = this.appState.select(CountryDeleteFailed);\n      this.countryCountLoading$ = this.appState.select(CountryCountLoading);\n      this.countryCountLoaded$ = this.appState.select(CountryCountLoaded);\n      this.countryCountFailed$ = this.appState.select(CountryCountFailed);\n      this.countryAddLoading$ = this.appState.select(CountryAddLoading);\n      this.countryAddLoaded$ = this.appState.select(CountryAddLoaded);\n      this.countryAddFailed$ = this.appState.select(CountryAddFailed);\n      this.countryUpdateLoading$ = this.appState.select(CountryUpdateLoading);\n      this.countryUpdateLoaded$ = this.appState.select(CountryUpdateLoaded);\n      this.countryUpdateFailed$ = this.appState.select(CountryUpdateFailed);\n      this.subscriptions = [];\n    }\n\n    addCountry(value) {\n      this.appState.dispatch(new countryActions.DoNewCountryAction(new CountryForm(value)));\n    }\n\n    updateCountry(value) {\n      this.appState.dispatch(new countryActions.DoUpdateCountryAction(new CountryForm(value)));\n    }\n\n    getCountriesList(value) {\n      this.appState.dispatch(new countryActions.GetCountrylistAction(new CountryListForm(value)));\n    }\n\n    countryDelete(value) {\n      this.appState.dispatch(new countryActions.DoCountryDeleteAction(value));\n    }\n\n    getCountryCount(value) {\n      this.appState.dispatch(new countryActions.GetCountryCountAction(new CountryListForm(value)));\n    }\n\n  }\n\n  CountrySandbox.ɵfac = function CountrySandbox_Factory(t) {\n    return new (t || CountrySandbox)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrManager));\n  };\n\n  CountrySandbox.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CountrySandbox,\n    factory: CountrySandbox.ɵfac\n  });\n  return CountrySandbox;\n})();","map":null,"metadata":{},"sourceType":"module"}