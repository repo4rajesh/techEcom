{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let OnlyNumberDirective = /*#__PURE__*/(() => {\n  class OnlyNumberDirective {\n    constructor(el) {\n      this.el = el;\n      this.specialKeys = ['Backspace', 'Tab', 'End', 'Home'];\n    }\n\n    KeyDown(event) {\n      if (this.isDot) {\n        this.regex = new RegExp(/^[0-9]*\\.?[0-9]*$/);\n      } else {\n        this.regex = new RegExp(/^\\s*(?=.*[0-9])\\d*(?:\\.\\d{1,2})?\\s*$/);\n      }\n\n      const current = this.el.nativeElement.value;\n      const next = current.concat(event.key);\n\n      if (this.specialKeys.indexOf(event.key) !== -1) {\n        return;\n      }\n\n      if (next && !String(next).match(this.regex)) {\n        event.preventDefault();\n      }\n    }\n\n  }\n\n  OnlyNumberDirective.ɵfac = function OnlyNumberDirective_Factory(t) {\n    return new (t || OnlyNumberDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  OnlyNumberDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: OnlyNumberDirective,\n    selectors: [[\"\", \"appOnlyNumber\", \"\"]],\n    hostBindings: function OnlyNumberDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function OnlyNumberDirective_keydown_HostBindingHandler($event) {\n          return ctx.KeyDown($event);\n        });\n      }\n    },\n    inputs: {\n      isDot: \"isDot\"\n    }\n  });\n  return OnlyNumberDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}