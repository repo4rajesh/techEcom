{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { catchError } from 'rxjs/operators';\nimport * as actions from '../user-action/user.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../user.service\";\nexport class UserEffect {\n  constructor(action$, service) {\n    this.action$ = action$;\n    this.service = service; // NEW USER\n\n    this.doAddUser$ = this.action$.pipe(ofType(actions.ActionTypes.DO_NEW_USER), map(action => action.payload), switchMap(state => {\n      return this.service.addUser(state).pipe(switchMap(user => [new actions.DoNewUserSuccessAction(user)]), catchError(error => of(new actions.DoNewUserFailAction(error))));\n    })); // UPDATE USER\n\n    this.doUpdateUser$ = this.action$.pipe(ofType(actions.ActionTypes.DO_UPDATE_USER), map(action => action.payload), switchMap(state => {\n      const Id = state.id;\n      return this.service.updateUser(state, Id).pipe(switchMap(user => [new actions.DoUpdateUserSuccessAction(user)]), catchError(error => of(new actions.DoUpdateUserFailAction(error))));\n    }));\n    this.doUserGroupList$ = this.action$.pipe(ofType(actions.ActionTypes.GET_USER_GROUP_LIST), map(action => action.payload), switchMap(state => {\n      return this.service.userGrouplist(state).pipe(map(analysis => new actions.DoUserGroupListSuccessAction(analysis)), catchError(error => of(new actions.DoUserGroupListFailAction(error))));\n    })); // LIST-USER GROUP\n    // LIST-USERLIST\n\n    this.doUserList$ = this.action$.pipe(ofType(actions.ActionTypes.GET_USER_LIST), map(action => action.payload), switchMap(state => {\n      return this.service.userlist(state).pipe(map(analysis => new actions.DoUserListSuccessAction(analysis)), catchError(error => of(new actions.DoUserListFailAction(error))));\n    })); // USER LIST PAGINATION\n\n    this.douserpagination$ = this.action$.pipe(ofType(actions.ActionTypes.DO_USER_COUNT_ACTION), map(action => action.payload), switchMap(state => {\n      return this.service.userpagiantion(state).pipe(switchMap(user => [new actions.DoUserPaginationSuccessAction(user)]), catchError(error => of(new actions.DoUserPaginationFailAction(error))));\n    })); // USER DELATE\n\n    this.userDelate$ = this.action$.pipe(ofType(actions.ActionTypes.DELETE_USER), map(action => action.payload), switchMap(state => {\n      return this.service.userDelete(state).pipe(switchMap(user => [new actions.UserDeleteSuccess(user)]), catchError(error => of(new actions.UserDeleteFail(error))));\n    }));\n  }\n\n}\n\nUserEffect.ɵfac = function UserEffect_Factory(t) {\n  return new (t || UserEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.UserService));\n};\n\nUserEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserEffect,\n  factory: UserEffect.ɵfac\n});\n\n__decorate([Effect()], UserEffect.prototype, \"doAddUser$\", void 0);\n\n__decorate([Effect()], UserEffect.prototype, \"doUpdateUser$\", void 0);\n\n__decorate([Effect()], UserEffect.prototype, \"doUserGroupList$\", void 0);\n\n__decorate([Effect()], UserEffect.prototype, \"doUserList$\", void 0);\n\n__decorate([Effect()], UserEffect.prototype, \"douserpagination$\", void 0);\n\n__decorate([Effect()], UserEffect.prototype, \"userDelate$\", void 0);","map":null,"metadata":{},"sourceType":"module"}