{"ast":null,"code":"// actions\nimport * as brandActions from '../brand/action/brand.actions'; // model\n\nimport { ManufacturerCountModel } from './models/manufacturer-count.model';\nimport { ManufacturerUpdateModel } from './models/manufacturer-Update.model';\nimport { ManufactureAddModel } from './models/manufacture-Add.model';\nimport { ManufacturerListModel } from './models/manufacture-list.model';\nimport { // Manufacturer list selectors\ngetManufacturerList, manufacturerListLoading, manufacturerListLoaded, manufacturerListFailed, // Manufacturer add selectors\ngetManufacturerAdd, manufacturerAddLoading, manufacturerAddFailed, manufacturerAddLoaded, // Manufacturer update selectors\ngetManufacturerUpdate, manufacturerUpdateLoading, manufacturerUpdateLoaded, manufacturerUpdateFailed, // Manufacturer count\ngetManufacturerContdata, manufacturerCountFailed, manufacturerCountLoading, manufacturerCountLoaded, // Manufacturer delete\ngetManufacturerDelete, manufacturerDeleteLoading, manufacturerDeleteLoaded, manufacturerDeleteFailed, bulkDelete, bulkDeleteLoading, bulkDeleteLoaded } from './reducer/brand.selector';\nimport { ManufacturerDeleteModel } from './models/manufacturer-delete.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ng6-toastr-notifications\";\nexport let BrandSandbox = /*#__PURE__*/(() => {\n  class BrandSandbox {\n    constructor(appState, router, toastr) {\n      this.appState = appState;\n      this.router = router;\n      this.toastr = toastr;\n      this.getManufactureList$ = this.appState.select(getManufacturerList);\n      this.manufacturerListLoading$ = this.appState.select(manufacturerListLoading);\n      this.manufacturerListLoaded$ = this.appState.select(manufacturerListLoaded);\n      this.manufacturerListFailed$ = this.appState.select(manufacturerListFailed);\n      this.getManufacturercount$ = this.appState.select(getManufacturerContdata);\n      this.manufacturerCountLoading$ = this.appState.select(manufacturerCountLoading);\n      this.manufacturerCountLoaded$ = this.appState.select(manufacturerCountLoaded);\n      this.manufacturerCountFailed$ = this.appState.select(manufacturerCountFailed);\n      this.getManufacturerAdd$ = this.appState.select(getManufacturerAdd);\n      this.manufacturerAddLoading$ = this.appState.select(manufacturerAddLoading);\n      this.manufacturerAddLoaded$ = this.appState.select(manufacturerAddLoaded);\n      this.manufacturerAddFailed$ = this.appState.select(manufacturerAddFailed);\n      this.getManufacturerUpdate$ = this.appState.select(getManufacturerUpdate);\n      this.manufacturerUpdateLoading$ = this.appState.select(manufacturerUpdateLoading);\n      this.manufacturerUpdateLoaded$ = this.appState.select(manufacturerUpdateLoaded);\n      this.manufacturerUpdateFailed$ = this.appState.select(manufacturerUpdateFailed);\n      this.getManufacturerDelete$ = this.appState.select(getManufacturerDelete);\n      this.manufacturerDeleteLoading$ = this.appState.select(manufacturerDeleteLoading);\n      this.manufacturerDeleteLoaded$ = this.appState.select(manufacturerDeleteLoaded);\n      this.manufacturerDeleteFailed$ = this.appState.select(manufacturerDeleteFailed);\n      this.bulkDelete$ = this.appState.select(bulkDelete);\n      this.bulkDeleteLoading$ = this.appState.select(bulkDeleteLoading);\n      this.bulkDeleteLoaded$ = this.appState.select(bulkDeleteLoaded);\n      this.subscriptions = [];\n      this.subscribeData();\n    }\n\n    manufacturerCount(value) {\n      this.appState.dispatch(new brandActions.DoManufactCountAction(new ManufacturerCountModel(value)));\n    }\n\n    updateManufactuer(value) {\n      this.appState.dispatch(new brandActions.DoManufacturerUpdateAction(new ManufacturerUpdateModel(value)));\n    }\n\n    addManufacturer(value) {\n      this.appState.dispatch(new brandActions.DoAddManufacturerAction(new ManufactureAddModel(value)));\n    }\n\n    manufacturerList(value) {\n      this.appState.dispatch(new brandActions.DOManufacturerListAction(new ManufacturerListModel(value)));\n    }\n\n    deleteManufacturer(value) {\n      this.appState.dispatch(new brandActions.ManufacturerDeleteAction(new ManufacturerDeleteModel(value)));\n    }\n\n    bulkDeleteManufacturer(value) {\n      this.appState.dispatch(new brandActions.ManufacturerBulkDeleteAction(value));\n    }\n\n    exportManufacturer(value) {\n      this.appState.dispatch(new brandActions.ExportManufacturerAction(value));\n    }\n\n    subscribeData() {\n      this.subscriptions.push(this.getManufacturerAdd$.subscribe(data => {\n        if (data) {\n          if (data.name) {\n            this.router.navigate(['/catalog/brand/list']);\n          }\n        }\n      }));\n      this.subscriptions.push(this.getManufacturerUpdate$.subscribe(data => {\n        if (data) {\n          if (data.message) {\n            this.router.navigate(['/catalog/brand/list']);\n          }\n        }\n      }));\n    }\n\n  }\n\n  BrandSandbox.ɵfac = function BrandSandbox_Factory(t) {\n    return new (t || BrandSandbox)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrManager));\n  };\n\n  BrandSandbox.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BrandSandbox,\n    factory: BrandSandbox.ɵfac\n  });\n  return BrandSandbox;\n})();","map":null,"metadata":{},"sourceType":"module"}