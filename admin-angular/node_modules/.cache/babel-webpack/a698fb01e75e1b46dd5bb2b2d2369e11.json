{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as actions from '../generalsetting-action/generalsetting.action';\nimport * as layoutAction from '../../../layout/actions/layout.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"../generalsetting.service\";\nimport * as i4 from \"@ngx-translate/core\";\nexport class GeneralSettingEffect {\n  constructor(action$, appState$, service, translate) {\n    this.action$ = action$;\n    this.appState$ = appState$;\n    this.service = service;\n    this.translate = translate; // NEW USER\n\n    this.doAddUser$ = this.action$.pipe(ofType(actions.ActionTypes.DO_NEW_GENERAL_SETTINGS), map(action => action.payload), switchMap(state => {\n      return this.service.createGeneralSetting(state).pipe(switchMap(user => [new actions.DoNewGeneralSettingSuccessAction(user)]), tap(val => {\n        if (val.payload.data.storeLanguageName === 'Hindi') {\n          sessionStorage.setItem('defaultlanguage', 'hi');\n          this.translate.use('hi');\n          this.translate.reloadLang('hi');\n        } else {\n          sessionStorage.setItem('defaultlanguage', 'en');\n          this.translate.use('en');\n          this.translate.reloadLang('en');\n        }\n\n        this.appState$.dispatch(new layoutAction.GetSettings());\n      }), catchError(error => of(new actions.DoNewGeneralSettingFailAction(error))));\n    })); // GET GENERAL SETTINGS\n\n    this.dogetGeneralsetting$ = this.action$.pipe(ofType(actions.ActionTypes.DO_GET_GENERAL_SETTINGS), map(action => action.payload), switchMap(() => {\n      return this.service.getGeneralSetting().pipe(switchMap(user => {\n        return [new actions.DoGetGeneralSettingSuccessAction(user)];\n      }), catchError(error => of(new actions.DoGetGeneralSettingFailAction())));\n    })); // MAINTENANCE MODE\n\n    this.maintenanceMode$ = this.action$.pipe(ofType(actions.ActionTypes.MAINTENANCE_MODE), map(action => action.payload), switchMap(state => {\n      return this.service.maintenanceMode(state).pipe(switchMap(user => {\n        return [new actions.MaintenanceModeSuccessAction(user)];\n      }), catchError(error => of(new actions.MaintenanceModeFailAction())));\n    }));\n  }\n\n}\n\nGeneralSettingEffect.ɵfac = function GeneralSettingEffect_Factory(t) {\n  return new (t || GeneralSettingEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.GeneralSettingService), i0.ɵɵinject(i4.TranslateService));\n};\n\nGeneralSettingEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GeneralSettingEffect,\n  factory: GeneralSettingEffect.ɵfac\n});\n\n__decorate([Effect()], GeneralSettingEffect.prototype, \"doAddUser$\", void 0);\n\n__decorate([Effect()], GeneralSettingEffect.prototype, \"dogetGeneralsetting$\", void 0);\n\n__decorate([Effect()], GeneralSettingEffect.prototype, \"maintenanceMode$\", void 0);","map":null,"metadata":{},"sourceType":"module"}