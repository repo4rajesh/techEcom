{"ast":null,"code":"/*\n* spurtcommerce\n* http://www.spurtcommerce.com\n*\n* Copyright (c) 2021 Piccosoft Software Labs Pvt Ltd\n* Author Piccosoft Software Labs Pvt Ltd <support@spurtcommerce.com>\n* Licensed under the MIT license.\n*/\nimport { HttpHeaders } from '@angular/common/http';\nimport { HttpParams } from '@angular/common/http';\nimport { Api } from '../../providers/api/api';\nimport * as i0 from \"@angular/core\";\nexport let BrandApiClient = /*#__PURE__*/(() => {\n  class BrandApiClient extends Api {\n    constructor() {\n      super(...arguments); // url address\n\n      this.url = this.getBaseUrl();\n      this.checkLength = [];\n    }\n\n    deletePagerefresh(pageoffset, pagesize) {\n      this.pageoffset = pageoffset;\n      this.pagesize = pagesize;\n    } // delete data value\n\n\n    setDelManufact(value, checked, checkLength) {\n      this.delManufactvalue = value;\n      this.ischecked = checked;\n      this.checkLength = checkLength;\n    }\n\n    getDelManufact() {\n      return this.delManufactvalue;\n    } // passing manufacture editdata\n\n\n    setManufactureEditValue(editdata) {\n      this.editData = editdata;\n    }\n\n    getManufacturerEditeValue() {\n      return this.editData;\n    }\n    /**\n     * Handles 'manufacturerList' function. Calls get method with specific api address\n     * along its param.\n     *\n     * @param params form ManufacturerListModel\n     */\n\n\n    manufacturerList(params) {\n      let reqOpts = {};\n      reqOpts = params;\n      return this.http.get(this.url + '/manufacturer/manufacturerlist', {\n        params: reqOpts\n      });\n    }\n    /**\n     * Handles 'manufacturerCount' function. Calls get method with specific api address\n     * along its param.\n     *\n     * @param params from model\n     */\n\n\n    manufacturerCount(params) {\n      let reqOpts = {};\n      reqOpts = params;\n      return this.http.get(this.url + '/manufacturer/manufacturerlist', {\n        params: reqOpts\n      });\n    }\n    /**\n     * Handles 'updateManufacturer' function. Calls put method with specific api address\n     * along its param.\n     *\n     * @param value from model\n     */\n\n\n    updateManufacturer(value) {\n      return this.http.put(this.url + '/manufacturer/update-manufacturer/' + value.manufacturerId, value);\n    }\n    /**\n     * Handles 'addManufactureData' function. Calls post method with specific api address\n     * along its param.\n     *\n     * @param value from model\n     */\n\n\n    addManufactureData(value) {\n      return this.http.post(this.url + '/manufacturer/create-manufacturer', value);\n    }\n    /**\n     * Handles 'deleteManufacturer' function. Calls delete method with specific api address\n     * along its param.\n     *\n     * @param value from model\n     */\n\n\n    deleteManufacturer(value) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        }),\n        withCredentials: false,\n        body: {\n          manufacturerId: value.manufacturerId\n        }\n      };\n      return this.http.delete(this.url + '/manufacturer/delete-manufacturer/' + value.manufacturerId, httpOptions);\n    }\n\n    bulkDelete(value) {\n      return this.http.post(this.url + '/manufacturer/delete-manufacturer', value);\n    }\n\n    exportManufacturer(params) {\n      const reqOpts = {};\n      reqOpts.responseType = 'arraybuffer';\n\n      if (params) {\n        reqOpts.params = new HttpParams();\n\n        for (const k in params) {\n          if (k) {\n            reqOpts.params = reqOpts.params.set(k, params[k]);\n          }\n        }\n      }\n\n      return this.http.get(this.url + '/manufacturer/manufacturer-excel-list', reqOpts);\n    }\n\n  }\n\n  BrandApiClient.ɵfac = /*@__PURE__*/function () {\n    let ɵBrandApiClient_BaseFactory;\n    return function BrandApiClient_Factory(t) {\n      return (ɵBrandApiClient_BaseFactory || (ɵBrandApiClient_BaseFactory = i0.ɵɵgetInheritedFactory(BrandApiClient)))(t || BrandApiClient);\n    };\n  }();\n\n  BrandApiClient.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BrandApiClient,\n    factory: BrandApiClient.ɵfac\n  });\n  return BrandApiClient;\n})();","map":null,"metadata":{},"sourceType":"module"}