{"ast":null,"code":"/*\n* spurtcommerce\n* http://www.spurtcommerce.com\n*\n* Copyright (c) 2021 Piccosoft Software Labs Pvt Ltd\n* Author Piccosoft Software Labs Pvt Ltd <support@spurtcommerce.com>\n* Licensed under the MIT license.\n*/\nimport * as actions from '../sizechart-action/sizechart.action';\nimport { SizeChartRecordState } from './sizechart.state';\nexport const initialState = new SizeChartRecordState();\nexport function reducer(state = initialState, {\n  type,\n  payload\n}) {\n  if (!type) {\n    return state;\n  }\n\n  switch (type) {\n    case actions.ActionTypes.GET_SIZE_CHART_LIST:\n      {\n        return Object.assign({}, state, {\n          listLoading: true,\n          listLoaded: false,\n          listFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_SIZE_CHART_COUNT_ACTION:\n      {\n        return Object.assign({}, state, {\n          countLoading: true,\n          countLoaded: false,\n          countFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_NEW_SIZE_CHART:\n      {\n        return Object.assign({}, state, {\n          addLoading: true,\n          addLoaded: false,\n          addFailed: false\n        });\n      }\n\n    case actions.ActionTypes.GET_VARIENT_LIST:\n      {\n        return Object.assign({}, state, {});\n      }\n\n    case actions.ActionTypes.GET_SIZE_CHART_LIST_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          sizechartList: payload.data,\n          listLoading: false,\n          listLoaded: true,\n          listFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_SIZE_CHART_COUNT_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          userpagination: payload.data,\n          countLoading: false,\n          countLoaded: true,\n          countFailed: false\n        });\n      }\n\n    case actions.ActionTypes.GET_VARIENT_LIST_SUCCESS:\n      {\n        var varientData = [];\n        varientData = payload.data.map(item => Object.assign({}, item, {\n          checkData: false\n        }));\n        return Object.assign({}, state, {\n          varientList: varientData\n        });\n      }\n\n    case actions.ActionTypes.DO_NEW_SIZE_CHART_SUCCESS:\n      {\n        return Object.assign({}, initialState, {\n          newSizeChart: payload,\n          countLoading: false,\n          countLoaded: true,\n          countFailed: true\n        });\n      }\n\n    case actions.ActionTypes.GET_SIZE_CHART_LIST_FAIL:\n      {\n        return Object.assign({}, state, {\n          listLoading: false,\n          listLoaded: true,\n          listFailed: true\n        });\n      }\n\n    case actions.ActionTypes.GET_VARIENT_LIST_FAIL:\n      {\n        return Object.assign({}, state, {});\n      }\n\n    case actions.ActionTypes.DO_NEW_SIZE_CHART_FAIL:\n      {\n        return Object.assign({}, initialState, {\n          newSizeChart: payload,\n          countLoading: false,\n          countLoaded: true,\n          countFailed: true\n        });\n      }\n\n    case actions.ActionTypes.GET_SIZE_CHART_LIST_FAIL:\n      {\n        return Object.assign({}, state, {});\n      }\n\n    case actions.ActionTypes.DO_NEW_SIZE_CHART_FAIL:\n      {\n        return Object.assign({}, initialState, {\n          newSizeChart: payload\n        });\n      }\n    //  CLEAR_VARIENT_DATA\n\n    case actions.ActionTypes.CLEAR_VARIENT_DATA:\n      {\n        let tempVarientList = state.varientList;\n        tempVarientList.forEach(element => {\n          if (element.id === payload.id) {\n            element.checkData = false;\n          }\n        });\n        return Object.assign({}, initialState, {\n          varientList: tempVarientList\n        });\n      }\n    // Delete SizeChart\n\n    case actions.ActionTypes.DELETE_SIZE_CHART:\n      {\n        return Object.assign({}, state, {\n          deleteChartLoaded: false\n        });\n      }\n\n    case actions.ActionTypes.DELETE_SIZE_CHART_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          sizechartDelete: payload,\n          deleteChartLoaded: true\n        });\n      }\n\n    case actions.ActionTypes.DELETE_SIZE_CHART_FAIL:\n      {\n        return Object.assign({}, state, {\n          deleteChartLoaded: false\n        });\n      }\n    // Hearer Text List\n\n    case actions.ActionTypes.HEADER_TEXT_LIST:\n      {\n        return Object.assign({}, state, {});\n      }\n\n    case actions.ActionTypes.HEADER_TEXT_LIST_SUCCESS:\n      {\n        var headerTextData = [];\n        headerTextData = payload.data.map(item => Object.assign({}, item, {\n          checkData: false\n        }));\n        return Object.assign({}, state, {\n          headerTextList: headerTextData\n        });\n      }\n\n    case actions.ActionTypes.HEADER_TEXT_LIST_FAIL:\n      {\n        return Object.assign({}, state, {});\n      }\n    // Create Header Text\n\n    case actions.ActionTypes.CREATE_HEADER_TEXT:\n      {\n        return Object.assign({}, state, {\n          createHeaderTextLoading: true,\n          createHeaderTextLoaded: false,\n          createHeaderTextFailed: false\n        });\n      }\n\n    case actions.ActionTypes.CREATE_HEADER_TEXT_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          headerText: payload.data,\n          createHeaderTextLoading: false,\n          createHeaderTextLoaded: true,\n          createHeaderTextFailed: false\n        });\n      }\n\n    case actions.ActionTypes.CREATE_HEADER_TEXT_FAIL:\n      {\n        return Object.assign({}, state, {\n          createHeaderTextLoading: false,\n          createHeaderTextLoaded: false,\n          createHeaderTextFailed: true\n        });\n      }\n    // CLEAR_HEADER_TEXT\n\n    case actions.ActionTypes.CLEAR_HEADER_TEXT:\n      {\n        return Object.assign({}, state, {\n          createHeaderTextLoaded: false,\n          deleteHeaderTextLoader: false,\n          updateHeaderTextLoaded: false,\n          deleteChartLoaded: false\n        });\n      }\n    // Delete Header Text\n\n    case actions.ActionTypes.DELETE_HEADER_TEXT:\n      {\n        return Object.assign({}, state, {\n          deleteHeaderTextLoader: false\n        });\n      }\n\n    case actions.ActionTypes.DELETE_HEADER_TEXT_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          headerTextDelete: payload,\n          deleteHeaderTextLoader: true\n        });\n      }\n\n    case actions.ActionTypes.DELETE_HEADER_TEXT_FAIL:\n      {\n        return Object.assign({}, state, {\n          deleteHeaderTextLoader: false\n        });\n      }\n    // UPDATE_HEADER_TEXT\n\n    case actions.ActionTypes.UPDATE_HEADER_TEXT:\n      {\n        return Object.assign({}, state, {\n          updateHeaderTextLoading: true,\n          updateHeaderTextLoaded: false,\n          updateHeaderTextFailed: false\n        });\n      }\n\n    case actions.ActionTypes.UPDATE_HEADER_TEXT_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          updateHeaderText: payload.data,\n          updateHeaderTextLoading: false,\n          updateHeaderTextLoaded: true,\n          updateHeaderTextFailed: false\n        });\n      }\n\n    case actions.ActionTypes.UPDATE_HEADER_TEXT_FAIL:\n      {\n        return Object.assign({}, state, {\n          updateHeaderTextLoading: false,\n          updateHeaderTextLoaded: false,\n          updateHeaderTextFailed: true\n        });\n      }\n\n    case actions.ActionTypes.DO_GET_SIZE_CHART:\n      {\n        return Object.assign({}, state, {});\n      }\n\n    case actions.ActionTypes.DO_GET_SIZE_CHART_SUCCESS:\n      {\n        let tempHeaderList = state.headerTextList;\n\n        if (payload.data) {\n          payload.data.header.forEach(element => {\n            tempHeaderList.forEach(element1 => {\n              if (element.headerId === element1.id) {\n                element1.checkData = true;\n              }\n            });\n          });\n        }\n\n        return Object.assign({}, state, {\n          getSizeChart: payload.data,\n          headerTextList: tempHeaderList\n        });\n      }\n\n    case actions.ActionTypes.DO_GET_SIZE_CHART_FAIL:\n      {\n        return Object.assign({}, initialState, {});\n      }\n    // UPDATE_SIZE_CHART\n\n    case actions.ActionTypes.UPDATE_SIZE_CHART:\n      {\n        return Object.assign({}, state, {\n          updateSizeChartLoading: true,\n          updateSizeChartLoaded: false,\n          updateSizeChartFailed: false\n        });\n      }\n\n    case actions.ActionTypes.UPDATE_SIZE_CHART_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          updateSizeChart: payload.data,\n          updateSizeChartLoading: false,\n          updateSizeChartLoaded: true,\n          updateSizeChartFailed: false\n        });\n      }\n\n    case actions.ActionTypes.UPDATE_SIZE_CHART_FAIL:\n      {\n        return Object.assign({}, state, {\n          updateSizeChartLoading: false,\n          updateSizeChartLoaded: false,\n          updateSizeChartFailed: true\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\nexport const getNewSizeChart = state => state.newsizechart;\nexport const getSizeChart = state => state.getSizeChart;\nexport const sizechartList = state => state.sizechartList;\nexport const getSizeChartListLoading = state => state.listLoading;\nexport const getSizeChartListLoaded = state => state.listLoaded;\nexport const getSizeChartListFailed = state => state.listFailed;\nexport const varientList = state => state.varientList;\nexport const sizechartDelete = state => state.sizechartDelete;\nexport const deleteChartLoaded = state => state.deleteChartLoaded;\nexport const headerTextList = state => state.headerTextList;\nexport const headerText = state => state.headerText;\nexport const createHeaderTextLoading = state => state.createHeaderTextLoading;\nexport const createHeaderTextLoaded = state => state.createHeaderTextLoaded;\nexport const createHeaderTextFailed = state => state.createHeaderTextFailed;\nexport const headerTextDelete = state => state.headerTextDelete;\nexport const deleteHeaderTextLoader = state => state.deleteHeaderTextLoader;\nexport const updateHeaderText = state => state.updateHeaderText;\nexport const updateHeaderTextLoading = state => state.updateHeaderTextLoading;\nexport const updateHeaderTextLoaded = state => state.updateHeaderTextLoaded;\nexport const updateHeaderTextFailed = state => state.updateHeaderTextFailed;\nexport const updateSizeChart = state => state.updateSizeChart;\nexport const updateSizeChartLoading = state => state.updateSizeChartLoading;\nexport const updateSizeChartLoaded = state => state.updateSizeChartLoaded;\nexport const updateSizeChartFailed = state => state.updateSizeChartFailed;","map":null,"metadata":{},"sourceType":"module"}