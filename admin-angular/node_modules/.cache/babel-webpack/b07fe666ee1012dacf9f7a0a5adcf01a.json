{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as actions from '../orderstatus.action/orderstatus.action';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../orderstatus-ApiClientService\";\nexport class OrderstatusEffects {\n  constructor(action$, apiCli) {\n    this.action$ = action$;\n    this.apiCli = apiCli;\n    this.doOrderStatuslists$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ORDERSTATUS_LIST_ACTION), map(action => action.payload), switchMap(state => {\n      return this.apiCli.getorderstatuslist(state).pipe(switchMap(orderstatus => [new actions.DoOrderStatusSuccessAction(orderstatus)]), catchError(error => of(new actions.DoOrderStatusListFailAction(error))));\n    })); // ORDER STATUS PAGINATION\n\n    this.doorderstatuscount$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ORDERSTATUS_COUNT_ACTION), map(action => action.payload), switchMap(state => {\n      return this.apiCli.getorderstatuslist(state).pipe(switchMap(user => [new actions.DopaginationorderstatusSuccessAction(user)]), catchError(error => of(new actions.DopaginationorderstatusFailAction(error))));\n    })); // ADD ORDER STATUS\n\n    this.doorderstatus$ = this.action$.pipe(ofType(actions.ActionTypes.DO_NEWORDERSTATUS), map(action => action.payload), switchMap(state => {\n      return this.apiCli.adddorderstatus(state).pipe(map(analysis => new actions.DoNewOrderStatusSuccessAction(analysis)), catchError(error => of(new actions.DoNewOrderStatusFailAction(error))));\n    })); // UPDATE  order STATUS\n\n    this.doupdateorderstatus$ = this.action$.pipe(ofType(actions.ActionTypes.DO_UpdateOrderstatus), map(action => action.payload), switchMap(state => {\n      const Id = state.id;\n      return this.apiCli.updateorderstatus(state, Id).pipe(map(analysis => new actions.DoUpdateOrderstatusSuccessAction(analysis)), catchError(error => of(new actions.DoUpdateOrderstatusFailAction(error))));\n    })); // UPDATE  product order STATUS\n\n    this.doupdateProductorderstatus$ = this.action$.pipe(ofType(actions.ActionTypes.DO_UpdateProductOrderstatus), map(action => action.payload), switchMap(state => {\n      const Id = state.id;\n      return this.apiCli.updateProductorderstatus(state).pipe(map(analysis => new actions.DoUpdateProductOrderstatusSuccessAction(analysis)), catchError(error => of(new actions.DoUpdateProductOrderstatusFailAction(error))));\n    })); // UPDATE  product tracking STATUS\n\n    this.doupdateProductTrackingstatus$ = this.action$.pipe(ofType(actions.ActionTypes.DO_UpdateProductTrackingstatus), map(action => action.payload), switchMap(state => {\n      const Id = state.id;\n      return this.apiCli.updateProductTrackingstatus(state).pipe(map(analysis => new actions.DoUpdateProductTrackingstatusSuccessAction(analysis)), catchError(error => of(new actions.DoUpdateProductTrackingstatusFailAction(error))));\n    }));\n    this.doorderstatusDelete$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ORDERSTATUS_DELETE), map(action => action.payload), switchMap(state => {\n      const orderStatusId = state.orderStatusId;\n      return this.apiCli.deleteorderstatus(state, orderStatusId).pipe(switchMap(user => [new actions.DoOrderStatusDeleteSuccessAction(user)]), catchError(error => of(new actions.DoOrderStatusDeleteFailAction(error))));\n    }));\n  }\n\n}\n\nOrderstatusEffects.ɵfac = function OrderstatusEffects_Factory(t) {\n  return new (t || OrderstatusEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.OrderstatusApiClientService));\n};\n\nOrderstatusEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrderstatusEffects,\n  factory: OrderstatusEffects.ɵfac\n});\n\n__decorate([Effect()], OrderstatusEffects.prototype, \"doOrderStatuslists$\", void 0);\n\n__decorate([Effect()], OrderstatusEffects.prototype, \"doorderstatuscount$\", void 0);\n\n__decorate([Effect()], OrderstatusEffects.prototype, \"doorderstatus$\", void 0);\n\n__decorate([Effect()], OrderstatusEffects.prototype, \"doupdateorderstatus$\", void 0);\n\n__decorate([Effect()], OrderstatusEffects.prototype, \"doupdateProductorderstatus$\", void 0);\n\n__decorate([Effect()], OrderstatusEffects.prototype, \"doupdateProductTrackingstatus$\", void 0);\n\n__decorate([Effect()], OrderstatusEffects.prototype, \"doorderstatusDelete$\", void 0);","map":null,"metadata":{},"sourceType":"module"}