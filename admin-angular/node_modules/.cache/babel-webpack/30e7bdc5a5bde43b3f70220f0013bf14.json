{"ast":null,"code":"/*\n* spurtcommerce\n* http://www.spurtcommerce.com\n*\n* Copyright (c) 2021 Piccosoft Software Labs Pvt Ltd\n* Author Piccosoft Software Labs Pvt Ltd <support@spurtcommerce.com>\n* Licensed under the MIT license.\n*/\n// action\nimport * as actions from '../action/media.action'; // state\n\nimport { MediaStateRecord } from './media.state';\nimport { BucketlistResponseModel } from '../models/bucketlist.response.model';\nexport const initialState = new MediaStateRecord();\nexport function reducer(state = initialState, {\n  type,\n  payload\n}) {\n  if (!type) {\n    return state;\n  }\n\n  switch (type) {\n    // MEDIA UPLOAD FILE\n    case actions.ActionTypes.DO_MEDIAUPLOAD:\n      {\n        return Object.assign({}, state, {\n          mediauploadResponse: false,\n          mediauploadRequestLoading: true,\n          mediauploadRequestLoaded: false,\n          mediauploadRequestFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_MEDIAUPLOAD_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          mediaupload: payload,\n          mediauploadResponse: true,\n          mediauploadRequestLoading: false,\n          mediauploadRequestLoaded: false,\n          mediauploadRequestFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_MEDIAUPLOAD_FAIL:\n      {\n        return Object.assign({}, state, {\n          mediauploadResponse: false,\n          mediauploadRequestLoading: false,\n          mediauploadRequestLoaded: true,\n          mediauploadRequestFailed: true\n        });\n      }\n    // MEDIA CREATE FOLDER\n\n    case actions.ActionTypes.DO_MEDIACREATEFOLDER:\n      {\n        return Object.assign({}, state, {\n          mediacreatefolderResponse: false,\n          mediacreatefolderRequestLoading: true,\n          mediacreatefolderRequestLoaded: false,\n          mediacreatefolderRequestFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_MEDIACREATEFOLDER_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          mediaCreatefolder: payload,\n          mediacreatefolderResponse: true,\n          mediacreatefolderRequestLoading: false,\n          mediacreatefolderRequestLoaded: false,\n          mediacreatefolderRequestFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_MEDIACREATEFOLDER_FAIL:\n      {\n        return Object.assign({}, state, {\n          mediaCreatefolder: payload,\n          mediacreatefolderResponse: false,\n          mediacreatefolderRequestLoading: false,\n          mediacreatefolderRequestLoaded: true,\n          mediacreatefolderRequestFailed: true\n        });\n      }\n    // Media delete folder\n\n    case actions.ActionTypes.DO_DELETEFOLDER:\n      {\n        return Object.assign({}, state, {\n          deletefolderResponse: false,\n          deletefolderRequestLoading: true,\n          deletefolderRequestLoaded: false,\n          deletefolderRequestFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_DELETEFOLDER_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          bucketdeletefolder: payload,\n          deletefolderResponse: true,\n          deletefolderRequestLoading: false,\n          deletefolderRequestLoaded: false,\n          deletefolderRequestFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_DELETEFOLDER_FAIL:\n      {\n        return Object.assign({}, state, {\n          bucketdeletefolder: payload.user,\n          deletefolderResponse: false,\n          deletefolderRequestLoading: false,\n          deletefolderRequestLoaded: true,\n          deletefolderRequestFailed: true\n        });\n      }\n    // Media delete file\n\n    case actions.ActionTypes.DO_DELETEFILE:\n      {\n        return Object.assign({}, state, {\n          deletefileResponse: false,\n          deletefileRequestLoading: true,\n          deletefileRequestLoaded: false,\n          deletefileRequestFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_DELETEFILE_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          bucketdeletefile: payload,\n          deletefileResponse: true,\n          deletefileRequestLoading: false,\n          deletefileRequestLoaded: false,\n          deletefileRequestFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_DELETEFILE_FAIL:\n      {\n        return Object.assign({}, state, {\n          bucketdeletefolder: payload.user,\n          deletefileResponse: false,\n          deletefileRequestLoading: false,\n          deletefileRequestLoaded: true,\n          deletefileRequestFailed: true\n        });\n      }\n    // Media Bucketlist\n\n    case actions.ActionTypes.DO_BUCKETLIST:\n      {\n        return Object.assign({}, state, {\n          bucketlist: {},\n          bucketlistResponse: false,\n          bucketlistRequestLoading: true,\n          bucketlistRequestLoaded: false,\n          bucketlistRequestFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_BUCKETLIST_SUCCESS:\n      {\n        let tempCommonPrefixes = [];\n        let tempContents = [];\n\n        if (state.commonPrefixes) {\n          tempCommonPrefixes = state.commonPrefixes;\n        }\n\n        if (state.contents) {\n          tempContents = state.contents;\n        }\n\n        const tempList = new BucketlistResponseModel(payload.data);\n\n        if (tempList.CommonPrefixes && tempList.CommonPrefixes.length > 0) {\n          tempList.CommonPrefixes.forEach(data => {\n            tempCommonPrefixes.push(data);\n          });\n        }\n\n        if (tempList.Contents && tempList.Contents.length > 0) {\n          tempList.Contents.forEach(data => {\n            tempContents.push(data);\n          });\n        }\n\n        tempList.Contents = tempContents;\n        tempList.CommonPrefixes = tempCommonPrefixes;\n        return Object.assign({}, state, {\n          commonPrefixes: tempCommonPrefixes,\n          contents: tempContents,\n          bucketlist: tempList,\n          bucketlistResponse: true,\n          bucketlistRequestLoading: false,\n          bucketlistRequestLoaded: false,\n          bucketlistRequestFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_BUCKETLIST_FAIL:\n      {\n        return Object.assign({}, state, {\n          bucketlist: {},\n          bucketlistResponse: false,\n          bucketlistRequestLoading: false,\n          bucketlistRequestLoaded: true,\n          bucketlistRequestFailed: true\n        });\n      }\n    // Media Search folder\n\n    case actions.ActionTypes.DO_SEARCHFOLDER:\n      {\n        return Object.assign({}, state, {\n          searchFolderResponse: false,\n          searchFolderRequestLoading: true,\n          searchFolderRequestLoaded: false,\n          searchFolderRequestFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_SEARCHFOLDER_SUCCESS:\n      {\n        const tempList = new BucketlistResponseModel(payload.data);\n        return Object.assign({}, state, {\n          searchFolder: tempList,\n          bucketlist: tempList,\n          searchFolderResponse: true,\n          searchFolderRequestLoading: false,\n          searchFolderRequestLoaded: false,\n          searchFolderRequestFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_SEARCHFOLDER_FAIL:\n      {\n        return Object.assign({}, state, {\n          // bucketlist: payload,\n          searchFolderResponse: false,\n          searchFolderRequestLoading: false,\n          searchFolderRequestLoaded: true,\n          searchFolderRequestFailed: true\n        });\n      }\n    // clear bucketlist\n\n    case actions.ActionTypes.CLEAR_BUCKETLIST:\n      {\n        return Object.assign({}, state, {\n          bucketlist: {},\n          commonPrefixes: [],\n          contents: []\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n} // Media create folder\n\nexport const getMediaCreateFolder = state => state.mediaCreatefolder; // Media delete file\n\nexport const getBucketdeletefile = state => state.bucketdeletefile; // Media bucketlist\n\nexport const getBucketList = state => state.bucketlist; // Media upload\n\nexport const getMediaUpload = state => state.mediaupload;\nexport const getmediauploadResponse = state => state.mediauploadResponse;\nexport const getmediauploadRequestLoading = state => state.mediauploadRequestLoading;\nexport const getmediauploadRequestLoaded = state => state.mediauploadRequestLoaded;\nexport const getmediauploadRequestFailed = state => state.mediauploadRequestFailed; // Media delete folder\n\nexport const getBucketdeletefolder = state => state.bucketdeletefolder;\nexport const getdeletefolderResponse = state => state.deletefolderResponse;\nexport const getdeletefolderRequestLoading = state => state.deletefolderRequestLoading;\nexport const getdeletefolderRequestLoaded = state => state.deletefolderRequestLoaded;\nexport const getdeletefolderRequestFailed = state => state.deletefolderRequestFailed; // Media bucklist\n\nexport const getbucketlistResponse = state => state.bucketlistResponse;\nexport const getbucketlistRequestLoading = state => state.bucketlistRequestLoading;\nexport const getbucketlistRequestLoaded = state => state.bucketlistRequestLoaded;\nexport const getbucketlistRequestFailed = state => state.bucketlistRequestFailed; // Media search folder\n\nexport const getSearchFolder = state => state.searchFolder;\nexport const getSearchFolderResponse = state => state.searchFolderResponse;\nexport const getSearchFolderRequestLoading = state => state.searchFolderRequestLoading;\nexport const getSearchFolderRequestLoaded = state => state.searchFolderRequestLoaded;\nexport const getSearchFolderRequestFailed = state => state.searchFolderRequestFailed;","map":null,"metadata":{},"sourceType":"module"}