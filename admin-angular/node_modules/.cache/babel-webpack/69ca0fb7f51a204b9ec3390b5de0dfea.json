{"ast":null,"code":"import * as bannerActions from '../banners/banner-action/banner.action';\nimport { getaddBanner, getbanneraddfailed, getbanneraddloaded, getbanneraddloading, getbannercountfailed, getbannercountloaded, getbannercountloading, getbannerdeletefailed, getbannerdeleteloaded, getbannerdeleteloading, getbannerlistfailed, getbannerlistloaded, getbannerlistloading, getBannerlst, getbannerpagination, getbannerupdatefailed, getbannerupdateloaded, getbannerupdateloading, getdeletebanner, getUpdatebanner, getbannerListCountLoading, getbannerListCountFailed, getbannerListCountLoaded, getbannerListCount, getbannerListActiveLoading, getbannerListACtiveFailed, getbannerListActiveLoaded, getbannerListActive, getbannerListInActiveLoading, getbannerListInACtiveFailed, getbannerListInActiveLoaded, getbannerListInActive, getBannerCount, getBannerCountLoading, getBannerDetails, getBannerDetailsLoading, getBannerDetailsLoaded, categoryLists, categoryListsLoading, categoryListsLoaded, categoryListsFailed, ProductLists, ProductListsLoading, ProductListsLoaded, ProductListsFailed } from './banner-reducer/banner.selector';\nimport { getAddBanners } from './banner-reducer/banner.selector';\nimport { BannerlistModel } from './banner-model/bannerlist.model';\nimport { BannerdeleteModel } from './banner-model/bannerdelete.model';\nimport { BannercountModel } from './banner-model/bannercount.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ng6-toastr-notifications\";\nexport let BannerSandbox = /*#__PURE__*/(() => {\n  class BannerSandbox {\n    constructor(appState, router, toastr) {\n      this.appState = appState;\n      this.router = router;\n      this.toastr = toastr;\n      this.getbannerlist$ = this.appState.select(getBannerlst);\n      this.getbannerpagelength$ = this.appState.select(getbannerpagination);\n      this.getAddNewBanner$ = this.appState.select(getAddBanners);\n      this.getaddBanner$ = this.appState.select(getaddBanner);\n      this.getUpdatebanner$ = this.appState.select(getUpdatebanner);\n      this.getdeletebanner$ = this.appState.select(getdeletebanner);\n      this.getbanneraddloaded$ = this.appState.select(getbanneraddloaded);\n      this.getbanneraddfailed$ = this.appState.select(getbanneraddfailed);\n      this.getbanneraddloading$ = this.appState.select(getbanneraddloading);\n      this.getbannerupdateloading$ = this.appState.select(getbannerupdateloading);\n      this.getbannerupdateloaded$ = this.appState.select(getbannerupdateloaded);\n      this.getbannerupdatefailed$ = this.appState.select(getbannerupdatefailed);\n      this.getbannerdeleteloading$ = this.appState.select(getbannerdeleteloading);\n      this.getbannerdeleteloaded$ = this.appState.select(getbannerdeleteloaded);\n      this.getbannerdeletefailed$ = this.appState.select(getbannerdeletefailed);\n      this.getbannercountloading$ = this.appState.select(getbannercountloading);\n      this.getbannercountloaded$ = this.appState.select(getbannercountloaded);\n      this.getbannercountfailed$ = this.appState.select(getbannercountfailed);\n      this.getbannerlistloaded$ = this.appState.select(getbannerlistloaded);\n      this.getbannerlistfailed$ = this.appState.select(getbannerlistfailed);\n      this.getbannerlistloading$ = this.appState.select(getbannerlistloading);\n      this.getBannerCount$ = this.appState.select(getBannerCount);\n      this.getBannerCountLoading$ = this.appState.select(getBannerCountLoading);\n      this.getbannerListCount$ = this.appState.select(getbannerListCount);\n      this.getbannerListCountLoaded$ = this.appState.select(getbannerListCountLoaded);\n      this.getbannerListCountFailed$ = this.appState.select(getbannerListCountFailed);\n      this.getbannerListCountLoading$ = this.appState.select(getbannerListCountLoading);\n      this.getbannerListActive$ = this.appState.select(getbannerListActive);\n      this.getbannerListActiveLoaded$ = this.appState.select(getbannerListActiveLoaded);\n      this.getbannerListACtiveFailed$ = this.appState.select(getbannerListACtiveFailed);\n      this.getbannerListActiveLoading$ = this.appState.select(getbannerListActiveLoading);\n      this.getbannerListInActive$ = this.appState.select(getbannerListInActive);\n      this.getbannerListInActiveLoaded$ = this.appState.select(getbannerListInActiveLoaded);\n      this.getbannerListInACtiveFailed$ = this.appState.select(getbannerListInACtiveFailed);\n      this.getbannerListInActiveLoading$ = this.appState.select(getbannerListInActiveLoading);\n      this.getBannerDetails$ = this.appState.select(getBannerDetails);\n      this.getBannerDetailsLoading$ = this.appState.select(getBannerDetailsLoading);\n      this.getBannerDetailsLoaded$ = this.appState.select(getBannerDetailsLoaded);\n      /*category List*/\n\n      this.categoryLists$ = this.appState.select(categoryLists);\n      this.categoryListsLoading$ = this.appState.select(categoryListsLoading);\n      this.categoryListsLoaded$ = this.appState.select(categoryListsLoaded);\n      this.categoryListsFailed$ = this.appState.select(categoryListsFailed);\n      /*Product List*/\n\n      this.ProductLists$ = this.appState.select(ProductLists);\n      this.ProductListsLoading$ = this.appState.select(ProductListsLoading);\n      this.ProductListsLoaded$ = this.appState.select(ProductListsLoaded);\n      this.ProductListsFailed$ = this.appState.select(ProductListsFailed);\n      this.subscriptions = []; // this.subscribe();\n    }\n\n    getBannerList(value) {\n      this.appState.dispatch(new bannerActions.DoBannerListAction(new BannerlistModel(value)));\n    }\n\n    getBannerListCount(value) {\n      this.appState.dispatch(new bannerActions.DoBannerListCountAction(new BannerlistModel(value)));\n    }\n\n    getBannerListActive(value) {\n      this.appState.dispatch(new bannerActions.DoBannerListActiveAction(new BannerlistModel(value)));\n    }\n\n    getBannerListInActive(value) {\n      this.appState.dispatch(new bannerActions.DoBannerListInActiveAction(new BannerlistModel(value)));\n    }\n\n    getBannerPagination(value) {\n      this.appState.dispatch(new bannerActions.DoBannerPaginationAction(new BannercountModel(value)));\n    }\n\n    addBanner(data) {\n      this.appState.dispatch(new bannerActions.DoBannerAddAction(data));\n    }\n\n    UpdateBanner(data) {\n      this.appState.dispatch(new bannerActions.DoBannerUpdateAction(data));\n    }\n\n    deletebanner(data) {\n      this.appState.dispatch(new bannerActions.DoBannerDeleteAction(new BannerdeleteModel(data)));\n    } // Do banner Bulk Delete\n\n\n    bulkDelete(value) {\n      this.appState.dispatch(new bannerActions.DoBannerBulkDelete(value));\n    } // Get Banner overall counts\n\n\n    getBannerCount() {\n      this.appState.dispatch(new bannerActions.GetBannerCountAction());\n    } // Get Banner Details\n\n\n    getBannerDetails(value) {\n      this.appState.dispatch(new bannerActions.GetBannerDetailsAction(value));\n    }\n\n    exportBanner(value) {\n      this.appState.dispatch(new bannerActions.ExportBannerAction(value));\n    }\n    /*category List*/\n\n\n    categoryLists(value) {\n      this.appState.dispatch(new bannerActions.categoryListsAction(value));\n    }\n    /*Product List*/\n\n\n    ProductLists(value) {\n      this.appState.dispatch(new bannerActions.ProductListsAction(value));\n    }\n\n    subscribe() {\n      this.subscriptions.push(this.getAddNewBanner$.subscribe(data => {\n        if (data) {\n          if (data.message) {\n            this.router.navigate(['/cms/banners/list']);\n          }\n        }\n      }));\n      this.subscriptions.push(this.getUpdatebanner$.subscribe(data => {\n        if (data) {\n          if (data.message) {\n            this.router.navigate(['/cms/banners/list']);\n          }\n        }\n      }));\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  BannerSandbox.ɵfac = function BannerSandbox_Factory(t) {\n    return new (t || BannerSandbox)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrManager));\n  };\n\n  BannerSandbox.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BannerSandbox,\n    factory: BannerSandbox.ɵfac\n  });\n  return BannerSandbox;\n})();","map":null,"metadata":{},"sourceType":"module"}