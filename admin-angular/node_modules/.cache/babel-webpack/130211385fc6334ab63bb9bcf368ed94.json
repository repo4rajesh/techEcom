{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../../../../../core/admin/settings/generalsetting/generalsetting.sandbox\";\nimport * as i2 from \"@angular/material/radio\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@ngx-translate/core\";\nexport let MaintenanceComponent = /*#__PURE__*/(() => {\n  class MaintenanceComponent {\n    constructor(sandbox, changeDetect) {\n      this.sandbox = sandbox;\n      this.changeDetect = changeDetect;\n      this.mode = '';\n      this.subscriptions = [];\n    }\n\n    ngOnInit() {\n      this.getGeneralSetting();\n      this.subscribe(); // this.getGeneralSetting();\n    }\n\n    submitMode() {\n      const params = {};\n      params.mode = this.mode;\n      this.sandbox.maintenanceMode(params);\n    }\n\n    subscribe() {\n      this.subscriptions.push(this.sandbox.getGeneralSettings$.subscribe(data => {\n        if (data && data[0]) {\n          if (data[0].maintenanceMode === 1) {\n            this.mode = '1';\n            this.changeDetect.detectChanges();\n          } else if (data[0].maintenanceMode === 0) {\n            this.mode = '0';\n            this.changeDetect.detectChanges();\n          }\n        }\n      }));\n    }\n\n    getGeneralSetting() {\n      this.sandbox.getGeneralSetting();\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(each => each.unsubscribe());\n    }\n\n  }\n\n  MaintenanceComponent.ɵfac = function MaintenanceComponent_Factory(t) {\n    return new (t || MaintenanceComponent)(i0.ɵɵdirectiveInject(i1.GeneralSettingSandbox), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  MaintenanceComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MaintenanceComponent,\n    selectors: [[\"app-maintenance\"]],\n    decls: 22,\n    vars: 15,\n    consts: [[1, \"set-lay-notes\", \"flex\", 2, \"padding\", \"0 10px 10px 10px\"], [1, \"maintenance-wrap\"], [1, \"maintenance-bx\"], [1, \"radio\", \"flex\"], [\"fxLayout\", \"column\", \"fxLayoutGap\", \".25rem\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\"], [3, \"click\"]],\n    template: function MaintenanceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"h4\");\n        i0.ɵɵtext(2, \"Note :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"p\");\n        i0.ɵɵtext(4, \"By enabling this, the admin will be stopping the end-users/customers from doing any kind of activity \\u2013 browsing and searching for products or doing an online purchase, on the eCommerce portal. The admin can use this option, whenever they need to make any update or enhancement to the eCommerce portal. This way, they will be informing the Customers about the same, and requesting for their patience, while they are updating or enhancing the eCommerce portal. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 1);\n        i0.ɵɵelementStart(6, \"h3\");\n        i0.ɵɵtext(7);\n        i0.ɵɵpipe(8, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 2);\n        i0.ɵɵtext(10, \"Would you like to turn on the maintenance mode for your eCommerce portal? Remember that your customers will not be able to carry out any activity on the eCommerce portal, when maintenance mode is enabled. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 3);\n        i0.ɵɵelementStart(12, \"mat-radio-group\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function MaintenanceComponent_Template_mat_radio_group_ngModelChange_12_listener($event) {\n          return ctx.mode = $event;\n        });\n        i0.ɵɵelementStart(13, \"mat-radio-button\", 5);\n        i0.ɵɵtext(14);\n        i0.ɵɵpipe(15, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"mat-radio-button\", 5);\n        i0.ɵɵtext(17);\n        i0.ɵɵpipe(18, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function MaintenanceComponent_Template_button_click_19_listener() {\n          return ctx.submitMode();\n        });\n        i0.ɵɵtext(20);\n        i0.ɵɵpipe(21, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 7, \"Settings.system.Entermaintenancemode\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.mode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", \"1\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(15, 9, \"Settings.system.Yes\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", \"0\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(18, 11, \"Settings.system.No\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(21, 13, \"Settings.system.Save\"));\n      }\n    },\n    directives: [i2.MatRadioGroup, i3.NgControlStatus, i3.NgModel, i2.MatRadioButton],\n    pipes: [i4.TranslatePipe],\n    styles: [\"\"]\n  });\n  return MaintenanceComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}