{"ast":null,"code":"import * as emailtempActions from '../emailtemplate/emailtemp-action/emailtemp.action';\nimport { EmailTempAddFailed, EmailTempAddLoaded, EmailTempAddLoading, EmailTempCountFailed, EmailTempCountLoaded, EmailTempCountLoading, EmailTempDeleteFailed, EmailTempDeleteLoaded, EmailTempDeleteLoading, EmailTempListFailed, EmailTempListLoaded, EmailTempListLoading, EmailTempUpdateFailed, EmailTempUpdateLoaded, EmailTempUpdateLoading, getAddEmailTemp, emailTempDelete, emailTempList, emailTempPagination, updateEmailTemp } from './emailtemp-reducer/emailtemp.selector';\nimport { EmailTempForm } from './emailtemp-model/emailtemp.model';\nimport { EmailTempListForm } from './emailtemp-model/emailtemplist.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ng6-toastr-notifications\";\nexport let EmailTempSandbox = /*#__PURE__*/(() => {\n  class EmailTempSandbox {\n    constructor(appState, router, toastr) {\n      this.appState = appState;\n      this.router = router;\n      this.toastr = toastr;\n      this.emailTempList$ = this.appState.select(emailTempList);\n      this.emailTempPagination$ = this.appState.select(emailTempPagination);\n      this.getAddEmailTemp$ = this.appState.select(getAddEmailTemp);\n      this.updateEmailTemp$ = this.appState.select(updateEmailTemp);\n      this.emailTempDelete$ = this.appState.select(emailTempDelete);\n      this.emailTempListLoading$ = this.appState.select(EmailTempListLoading);\n      this.emailTempListLoaded$ = this.appState.select(EmailTempListLoaded);\n      this.emailTempListFailed$ = this.appState.select(EmailTempListFailed);\n      this.emailTempDeleteLoading$ = this.appState.select(EmailTempDeleteLoading);\n      this.emailTempDeleteLoaded$ = this.appState.select(EmailTempDeleteLoaded);\n      this.emailTempDeleteFailed$ = this.appState.select(EmailTempDeleteFailed);\n      this.emailTempCountLoading$ = this.appState.select(EmailTempCountLoading);\n      this.emailTempCountLoaded$ = this.appState.select(EmailTempCountLoaded);\n      this.emailTempCountFailed$ = this.appState.select(EmailTempCountFailed);\n      this.emailTempAddLoading$ = this.appState.select(EmailTempAddLoading);\n      this.emailTempAddLoaded$ = this.appState.select(EmailTempAddLoaded);\n      this.emailTempAddFailed$ = this.appState.select(EmailTempAddFailed);\n      this.emailTempUpdateLoading$ = this.appState.select(EmailTempUpdateLoading);\n      this.emailTempUpdateLoaded$ = this.appState.select(EmailTempUpdateLoaded);\n      this.emailTempUpdateFailed$ = this.appState.select(EmailTempUpdateFailed);\n      this.subscriptions = []; // this.subscribe();\n    }\n\n    addEmailTemplate(value) {\n      this.appState.dispatch(new emailtempActions.DoNewEmailTempAction(new EmailTempForm(value)));\n    }\n\n    updateEmailTemplate(value) {\n      this.appState.dispatch(new emailtempActions.DoUpdateEmailTempAction(new EmailTempForm(value)));\n    }\n\n    getEmailTemplateList(value) {\n      this.appState.dispatch(new emailtempActions.DoEmailTemplistAction(new EmailTempListForm(value)));\n    }\n\n    emailTemplateDelete(value) {\n      this.appState.dispatch(new emailtempActions.DoEmailTempDeleteAction(value));\n    }\n\n    emailTemplatePagination(value) {\n      this.appState.dispatch(new emailtempActions.DoEmailTempPaginationAction(new EmailTempListForm(value)));\n    }\n\n    subscribe() {\n      this.subscriptions.push(this.getAddEmailTemp$.subscribe(data => {\n        if (data) {\n          if (data.message) {\n            this.router.navigate(['/settings/local/emailtemp']);\n          }\n        }\n      })); // getupdateemailtemp$\n\n      this.subscriptions.push(this.updateEmailTemp$.subscribe(data => {\n        if (data) {\n          if (data.message && data.status === 1) {\n            this.router.navigate(['/settings/local/emailtemp']);\n          }\n        }\n      }));\n    }\n\n  }\n\n  EmailTempSandbox.ɵfac = function EmailTempSandbox_Factory(t) {\n    return new (t || EmailTempSandbox)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrManager));\n  };\n\n  EmailTempSandbox.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmailTempSandbox,\n    factory: EmailTempSandbox.ɵfac\n  });\n  return EmailTempSandbox;\n})();","map":null,"metadata":{},"sourceType":"module"}