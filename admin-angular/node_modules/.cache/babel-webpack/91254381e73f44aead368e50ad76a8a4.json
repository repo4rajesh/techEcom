{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport * as actions from '../banner-action/banner.action';\nimport { catchError } from 'rxjs/operators';\nimport { BannercountResponseModel } from '../banner-model/bannercount.response.model';\nimport { saveAs } from 'file-saver';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../banner.service\";\nimport * as i3 from \"@ngrx/store\";\nexport class BannerEffect {\n  constructor(action$, service, appState) {\n    this.action$ = action$;\n    this.service = service;\n    this.appState = appState; // Banner List\n\n    this.doBannerLists$ = this.action$.pipe(ofType(actions.ActionTypes.DO_BANNER_LIST), map(action => action.payload), switchMap(state => {\n      return this.service.bannerList(state).pipe(switchMap(user => [new actions.DoBannerListSuccessAction(user)]), catchError(error => of(new actions.DoBannerListFailAction(error))));\n    })); // Banner Count List\n\n    this.doBannerCountLists$ = this.action$.pipe(ofType(actions.ActionTypes.DO_BANNER_LIST_COUNT), map(action => action.payload), switchMap(state => {\n      return this.service.bannerList(state).pipe(switchMap(user => [new actions.DoBannerListCountSuccessAction(user)]), catchError(error => of(new actions.DoBannerListCountFailAction(error))));\n    })); // Banner Active List\n\n    this.doBannerActiveLists$ = this.action$.pipe(ofType(actions.ActionTypes.DO_BANNER_LIST_ACTIVE), map(action => action.payload), switchMap(state => {\n      return this.service.bannerList(state).pipe(switchMap(user => [new actions.DoBannerListActiveSuccessAction(user)]), catchError(error => of(new actions.DoBannerListActiveFailAction(error))));\n    })); // Banner In-Active List\n\n    this.doBannerInActiveLists$ = this.action$.pipe(ofType(actions.ActionTypes.DO_BANNER_LIST_IN_ACTIVE), map(action => action.payload), switchMap(state => {\n      return this.service.bannerList(state).pipe(switchMap(user => [new actions.DoBannerListInActiveSuccessAction(user)]), catchError(error => of(new actions.DoBannerListInActiveFailAction(error))));\n    })); // Banner LIST PAGINATION\n\n    this.doBannerPagination$ = this.action$.pipe(ofType(actions.ActionTypes.DO_BANNER_PAGINATION_ACTION), map(action => action.payload), switchMap(state => {\n      return this.service.bannerPagiantion(state).pipe(switchMap(user => [new actions.DoBannerPaginationSuccessAction(new BannercountResponseModel(user))]), catchError(error => of(new actions.DoBannerPaginationFailAction(error))));\n    })); // ADD BANNER\n\n    this.doAddBanner$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ADD_BANNER_ACTION), map(action => action.payload), switchMap(state => {\n      return this.service.addBanner(state).pipe(tap(response => {\n        this.appState.dispatch(new actions.DoBannerListActiveAction({\n          count: 1,\n          status: 1\n        }));\n        this.appState.dispatch(new actions.DoBannerListInActiveAction({\n          count: 1,\n          status: 0\n        }));\n      }), map(analysis => new actions.DoBannerAddSuccessAction(analysis)), catchError(error => of(new actions.DoBannerAddSuccessAction(error))));\n    })); // Update\n\n    this.doUpdateBanner$ = this.action$.pipe(ofType(actions.ActionTypes.DO_UPDATE_BANNER_ACTION), map(action => action.payload), switchMap(state => {\n      const Id = state.bannerId;\n\n      if (state.image === '') {\n        delete state.image;\n      }\n\n      return this.service.updateBanner(state, Id).pipe(tap(response => {\n        this.appState.dispatch(new actions.DoBannerListActiveAction({\n          count: 1,\n          status: 1\n        }));\n        this.appState.dispatch(new actions.DoBannerListInActiveAction({\n          count: 1,\n          status: 0\n        }));\n      }), switchMap(user => [new actions.DoBannerUpdateSuccessAction(user)]), catchError(error => of(new actions.DoBannerUpdateFailAction(error))));\n    })); // // Delete\n\n    this.doDeleteBanner$ = this.action$.pipe(ofType(actions.ActionTypes.DO_DELETE_BANNER_ACTION), map(action => action.payload), switchMap(state => {\n      const bannerId = state.bannerId;\n      return this.service.deleteBanner(state, bannerId).pipe(tap(response => {\n        this.appState.dispatch(new actions.DoBannerListActiveAction({\n          count: 1,\n          status: 1\n        }));\n        this.appState.dispatch(new actions.DoBannerListInActiveAction({\n          count: 1,\n          status: 0\n        }));\n      }), map(update => new actions.DoBannerDeleteSuccessAction(update)), catchError(error => of(new actions.DoBannerDeleteFailAction(error))));\n    })); // Product Bulk Delete\n\n    this.doProductBannerDelete$ = this.action$.pipe(ofType(actions.ActionTypes.DO_BANNER_BULK_DELETE), map(action => action.payload), switchMap(state => {\n      return this.service.bannerBulkDelete(state).pipe(tap(response => {\n        this.appState.dispatch(new actions.DoBannerListActiveAction({\n          count: 1,\n          status: 1\n        }));\n        this.appState.dispatch(new actions.DoBannerListInActiveAction({\n          count: 1,\n          status: 0\n        }));\n      }), switchMap(user => [new actions.DoBannerBulkDeleteSuccess(user)]), catchError(error => of(new actions.DoBannerBulkDeleteFail(error))));\n    })); // Banner Count\n\n    this.bannerCount$ = this.action$.pipe(ofType(actions.ActionTypes.GET_BANNER_COUNT), map(action => action.payload), switchMap(state => {\n      return this.service.bannerCount().pipe(switchMap(user => [new actions.GetBannerCountSuccessAction(user)]), catchError(error => of(new actions.GetBannerCountFailAction(error))));\n    })); // Banner Details\n\n    this.getBannerDetails$ = this.action$.pipe(ofType(actions.ActionTypes.GET_BANNER_DETAILS), map(action => action.payload), switchMap(state => {\n      return this.service.bannerDetails(state).pipe(switchMap(user => [new actions.GetBannerDetailsSuccessAction(user)]), catchError(error => of(new actions.GetBannerDetailsFailAction(error))));\n    }));\n    this.bannerExport$ = this.action$.pipe(ofType(actions.ActionTypes.EXPORT_BANNER_ACTION), map(action => action.payload), switchMap(state => {\n      return this.service.exportBanner(state).pipe(tap(data => {\n        const filename = 'banner_excel_' + Date.now() + '.xlsx';\n        const blob = new Blob([data], {\n          type: 'text/xlsx'\n        });\n        saveAs(blob, filename);\n      }), switchMap(user => [new actions.ExportBannerSuccessAction(user)]), catchError(error => of(new actions.ExportBannerFailAction(error))));\n    }));\n    /*category List*/\n\n    this.categoryLists$ = this.action$.pipe(ofType(actions.ActionTypes.CATEGORY_LISTS), map(action => action.payload), switchMap(state => {\n      return this.service.categoryLists(state).pipe(switchMap(user => [new actions.categoryListsSuccessAction(user)]), catchError(error => of(new actions.categoryListsFailAction(error))));\n    }));\n    /*Product List*/\n\n    this.ProductLists$ = this.action$.pipe(ofType(actions.ActionTypes.PRODUCT_LISTS), map(action => action.payload), switchMap(state => {\n      return this.service.ProductLists(state).pipe(switchMap(user => [new actions.ProductListsSuccessAction(user)]), catchError(error => of(new actions.ProductListsFailAction(error))));\n    }));\n  }\n\n}\n\nBannerEffect.ɵfac = function BannerEffect_Factory(t) {\n  return new (t || BannerEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.BannerService), i0.ɵɵinject(i3.Store));\n};\n\nBannerEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BannerEffect,\n  factory: BannerEffect.ɵfac\n});\n\n__decorate([Effect()], BannerEffect.prototype, \"doBannerLists$\", void 0);\n\n__decorate([Effect()], BannerEffect.prototype, \"doBannerCountLists$\", void 0);\n\n__decorate([Effect()], BannerEffect.prototype, \"doBannerActiveLists$\", void 0);\n\n__decorate([Effect()], BannerEffect.prototype, \"doBannerInActiveLists$\", void 0);\n\n__decorate([Effect()], BannerEffect.prototype, \"doBannerPagination$\", void 0);\n\n__decorate([Effect()], BannerEffect.prototype, \"doAddBanner$\", void 0);\n\n__decorate([Effect()], BannerEffect.prototype, \"doUpdateBanner$\", void 0);\n\n__decorate([Effect()], BannerEffect.prototype, \"doDeleteBanner$\", void 0);\n\n__decorate([Effect()], BannerEffect.prototype, \"doProductBannerDelete$\", void 0);\n\n__decorate([Effect()], BannerEffect.prototype, \"bannerCount$\", void 0);\n\n__decorate([Effect()], BannerEffect.prototype, \"getBannerDetails$\", void 0);\n\n__decorate([Effect()], BannerEffect.prototype, \"bannerExport$\", void 0);\n\n__decorate([Effect()], BannerEffect.prototype, \"categoryLists$\", void 0);\n\n__decorate([Effect()], BannerEffect.prototype, \"ProductLists$\", void 0);","map":null,"metadata":{},"sourceType":"module"}