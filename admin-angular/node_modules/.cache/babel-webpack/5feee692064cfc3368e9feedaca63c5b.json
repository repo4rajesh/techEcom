{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { catchError } from 'rxjs/operators';\nimport * as actions from '../zone-action/zone.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../zone.service\";\nexport class ZoneEffect {\n  constructor(action$, service) {\n    this.action$ = action$;\n    this.service = service; // NEW ZONE\n\n    this.doAddZone$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ADD_ZONE), map(action => action.payload), switchMap(state => {\n      return this.service.addZone(state).pipe(switchMap(zone => [new actions.DoNewZoneSuccessAction(zone)]), catchError(error => of(new actions.DoNewZoneFailAction(error))));\n    })); // Update Zone\n\n    this.doUpdateZone$ = this.action$.pipe(ofType(actions.ActionTypes.DO_UPDATE_ZONE), map(action => action.payload), switchMap(state => {\n      return this.service.updateZone(state).pipe(map(analysis => new actions.DoUpdateZoneSuccessAction(analysis)), catchError(error => of(new actions.DoUpdateZoneFailAction(error))));\n    })); // ZONE LIST PAGINATION\n\n    this.dozonepagination$ = this.action$.pipe(ofType(actions.ActionTypes.GET_ZONE_COUNT_ACTION), map(action => action.payload), switchMap(state => {\n      return this.service.zonePagiantion(state).pipe(switchMap(user => [new actions.GetZoneCountSuccessAction(user)]), catchError(error => of(new actions.GetZoneCountFailAction(error))));\n    })); // ZONE LIST\n\n    this.dozonelists$ = this.action$.pipe(ofType(actions.ActionTypes.GET_ZONE_LIST), map(action => action.payload), switchMap(state => {\n      return this.service.zoneList(state).pipe(switchMap(user => [new actions.GetZoneListSuccessAction(user)]), catchError(error => of(new actions.GetZoneListFailAction(error))));\n    })); // Zone Delete\n\n    this.doZoneDelete$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ZONE_DELETE), map(action => action.payload), switchMap(state => {\n      const zoneId = state.zoneId;\n      return this.service.deleteZone(state, zoneId).pipe(switchMap(user => [new actions.DoZoneDeleteSuccessAction(user)]), catchError(error => of(new actions.DoZoneDeleteFailAction(error))));\n    }));\n  }\n\n}\n\nZoneEffect.ɵfac = function ZoneEffect_Factory(t) {\n  return new (t || ZoneEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ZoneService));\n};\n\nZoneEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ZoneEffect,\n  factory: ZoneEffect.ɵfac\n});\n\n__decorate([Effect()], ZoneEffect.prototype, \"doAddZone$\", void 0);\n\n__decorate([Effect()], ZoneEffect.prototype, \"doUpdateZone$\", void 0);\n\n__decorate([Effect()], ZoneEffect.prototype, \"dozonepagination$\", void 0);\n\n__decorate([Effect()], ZoneEffect.prototype, \"dozonelists$\", void 0);\n\n__decorate([Effect()], ZoneEffect.prototype, \"doZoneDelete$\", void 0);","map":null,"metadata":{},"sourceType":"module"}