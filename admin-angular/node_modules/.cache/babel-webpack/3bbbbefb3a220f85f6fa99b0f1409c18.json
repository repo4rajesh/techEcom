{"ast":null,"code":"import * as layoutAction from './actions/layout.action';\nimport { getSettingsResponse, getUserResponse, getChangePayment, getChangePaymentLoaded, getChangePaymentLoading, settingDetails } from './reducer/layout.selector';\nimport { LoginResponseModel } from '../auth/models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngx-translate/core\";\nimport * as i3 from \"@angular/router\";\nexport let LayoutSandbox = /*#__PURE__*/(() => {\n  class LayoutSandbox {\n    constructor(appState$, translate, router) {\n      this.appState$ = appState$;\n      this.translate = translate;\n      this.router = router;\n      this.user$ = this.appState$.select(getUserResponse);\n      this.settings$ = this.appState$.select(getSettingsResponse);\n      this.settingDetails$ = this.appState$.select(settingDetails);\n      this.changePayment$ = this.appState$.select(getChangePayment);\n      this.changePaymentLoading$ = this.appState$.select(getChangePaymentLoading);\n      this.changePaymentLoaded$ = this.appState$.select(getChangePaymentLoaded);\n      const user = JSON.parse(sessionStorage.getItem('adminUser'));\n      this.getUserDetail(user);\n    }\n\n    ngOnInit() {\n      this.mylanguage = sessionStorage.getItem('defaultlanguage');\n\n      if (!this.mylanguage) {\n        this.translate.setDefaultLang('en');\n        this.translate.use('en');\n      } else {\n        if (this.mylanguage === 'en') {\n          this.translate.use('en');\n        } else {\n          this.translate.use('hi');\n        }\n      }\n    }\n\n    getSettings() {\n      this.appState$.dispatch(new layoutAction.GetSettings());\n    }\n\n    getUserDetail(params) {\n      this.appState$.dispatch(new layoutAction.GetUserDetail(params));\n    }\n\n    logOut() {\n      const userResponse = new LoginResponseModel({});\n      userResponse.remove();\n      this.router.navigate(['/auth/login']);\n    }\n\n    getChangePayment(params = {}) {\n      this.appState$.dispatch(new layoutAction.ChangePaymentAction(params));\n    }\n\n  }\n\n  LayoutSandbox.ɵfac = function LayoutSandbox_Factory(t) {\n    return new (t || LayoutSandbox)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.TranslateService), i0.ɵɵinject(i3.Router));\n  };\n\n  LayoutSandbox.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LayoutSandbox,\n    factory: LayoutSandbox.ɵfac\n  });\n  return LayoutSandbox;\n})();","map":null,"metadata":{},"sourceType":"module"}