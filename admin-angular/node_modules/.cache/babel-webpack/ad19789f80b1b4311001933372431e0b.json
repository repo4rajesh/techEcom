{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { Api } from '../../providers/api/api';\nimport * as i0 from \"@angular/core\";\nexport let CustomersApiClientService = /*#__PURE__*/(() => {\n  class CustomersApiClientService extends Api {\n    constructor() {\n      super(...arguments);\n      this.params = {}; // url Address\n\n      this.url = this.getBaseUrl();\n    }\n\n    setcusteditdata(data) {\n      this.editcustomerdata = data;\n    }\n\n    getcusteditdata() {\n      return this.editcustomerdata;\n    }\n    /**\n     * Handles 'customersList' function. Calls get method with specific api address\n     * along its param.\n     *\n     * @param params form customerList Data\n     */\n\n\n    customersList(params) {\n      return this.http.get(this.url + '/customer/customerlist', {\n        params: params\n      });\n    }\n    /**\n     * Handles 'addcustomer' function. Calls put method with specific api address\n     * along its param.\n     *\n     * @param value from model\n     */\n\n\n    addcustomer(param) {\n      return this.http.post(this.url + '/customer/add-customer', param);\n    }\n    /**\n     * Handles 'updatecustomer' function. Calls put method with specific api address\n     * along its param.\n     *\n     * @param params from model\n     */\n\n\n    updatecustomer(params) {\n      return this.http.put(this.url + '/customer/update-customer/' + params.customerId, params);\n    }\n    /**\n     * Handles 'deleteCustomer' function. Calls put method with specific api address\n     * along its param.\n     * @param params from model\n     */\n\n\n    deleteCustomer(param, Id) {\n      return this.http.delete(this.url + '/customer/delete-customer/' + Id, param);\n    }\n    /**\n     * Handles 'addAddressList' function. Calls put method with specific api address\n     * along its param.\n     * @param params from model\n     */\n\n\n    addAddressList(params, customerId) {\n      return this.http.get(this.url + '/address/get-address-list/' + customerId, {\n        params\n      });\n    }\n    /**\n     * Handles 'customer detail' function. Calls put method with specific api address\n     * along its param.\n     */\n\n\n    customerDetail(params, Id) {\n      return this.http.get(this.url + '/customer/customer-details/' + Id, params);\n    }\n    /**\n     * Handles 'addAddressPagination' function. Calls put method with specific api address\n     * along its param.\n     * @param params from model\n     */\n\n\n    addAddressPagination(params, customerId) {\n      return this.http.get(this.url + '/address/get-address-list/' + customerId, {\n        params: params\n      });\n    }\n    /**\n     * Handles 'addaddressAdd' function. Calls put method with specific api address\n     * along its param.\n     * @param params from model\n     */\n\n\n    addaddressAdd(param) {\n      return this.http.post(this.url + '/address/add-address', param);\n    }\n    /**\n     * Handles 'updateAddAddress' function. Calls put method with specific api address\n     * along its param.\n     * @param params from model\n     */\n\n\n    updateAddAddress(params) {\n      return this.http.put(this.url + '/address/update-address/' + params.addressId, params);\n    }\n    /**\n     * Handles 'updateAddAddress' function. Calls put method with specific api address\n     * along its param.\n     * @param params from model\n     * @param Id from addressId\n     */\n\n\n    deleteAddAddress(param, Id) {\n      return this.http.delete(this.url + '/address/delete-address/' + Id, param);\n    }\n    /**\n     * Handles 'productBulkDelete' function. Calls post method with specific api address\n     * along its param.\n     *\n     * @param param from Model\n     */\n\n\n    customerBulkDelete(param) {\n      return this.http.post(this.url + '/customer/delete-customer', param);\n    }\n    /**\n     * Handles 'CustomerExcel' function. Calls put method with specific api address\n     * along its param.\n     *\n     * @param params from model\n     */\n\n\n    customerExcel(params) {\n      const reqOpts = {};\n      reqOpts.responseType = 'arraybuffer';\n\n      if (params) {\n        reqOpts.params = new HttpParams();\n\n        for (const k in params) {\n          if (k) {\n            reqOpts.params = reqOpts.params.set(k, params[k]);\n          }\n        }\n      }\n\n      return this.http.get(this.url + '/customer/customer-excel-list/', reqOpts);\n    }\n\n    customerAllExcel(params) {\n      const reqOpts = {};\n      reqOpts.responseType = 'blob';\n\n      if (params) {\n        reqOpts.params = new HttpParams();\n\n        for (const k in params) {\n          if (k) {\n            reqOpts.params = reqOpts.params.set(k, params[k]);\n          }\n        }\n      }\n\n      return this.http.get(this.url + '/customer/allcustomer-excel-list/', reqOpts);\n    }\n\n    viewCustomerProduct(param) {\n      return this.http.get(this.url + '/customer/product-view-log-list', {\n        params: param\n      });\n    }\n\n    viewCustomerProductCount(param) {\n      return this.http.get(this.url + '/customer/product-view-log-list', {\n        params: param\n      });\n    }\n\n    viewOrderProduct(param) {\n      return this.http.get(this.url + '/customer/order-product-list', {\n        params: param\n      });\n    }\n\n    viewOrderProductCount(param) {\n      return this.http.get(this.url + '/customer/order-product-list', {\n        params: param\n      });\n    }\n\n  }\n\n  CustomersApiClientService.ɵfac = /*@__PURE__*/function () {\n    let ɵCustomersApiClientService_BaseFactory;\n    return function CustomersApiClientService_Factory(t) {\n      return (ɵCustomersApiClientService_BaseFactory || (ɵCustomersApiClientService_BaseFactory = i0.ɵɵgetInheritedFactory(CustomersApiClientService)))(t || CustomersApiClientService);\n    };\n  }();\n\n  CustomersApiClientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomersApiClientService,\n    factory: CustomersApiClientService.ɵfac\n  });\n  return CustomersApiClientService;\n})();","map":null,"metadata":{},"sourceType":"module"}