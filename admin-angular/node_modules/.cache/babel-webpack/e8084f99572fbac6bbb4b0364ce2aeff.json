{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as actions from '../orders-action/orders.action';\nimport { catchError } from 'rxjs/operators';\nimport { tap } from 'rxjs/operators';\nimport { saveAs } from 'file-saver';\nimport * as layoutAction from '../../layout/action/layout.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../orders.service\";\nimport * as i3 from \"@ngrx/store\";\nexport class OrdersEffects {\n  constructor(action$, apiCli, appState) {\n    this.action$ = action$;\n    this.apiCli = apiCli;\n    this.appState = appState;\n    this.doOrderlists$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ORDER_LIST_ACTION), map(action => action.payload), switchMap(state => {\n      return this.apiCli.getorderlist(state).pipe(switchMap(salesorders => [new actions.DoOrderSuccessAction(salesorders)]), catchError(error => of(new actions.DoOrderListFailAction(error))));\n    }));\n    this.doOrderdelete$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ORDER_DELETE_ACTION), map(action => action.payload), switchMap(state => {\n      return this.apiCli.getorderDelete(state).pipe(tap(data => {\n        this.appState.dispatch(new layoutAction.GetSalesCountAction({\n          count: true\n        }));\n      }), switchMap(salesorders => [new actions.DoOrderDeleteSuccessAction(salesorders)]), catchError(error => of(new actions.DoOrderDeleteFailAction(error))));\n    }));\n    this.doOrderCount$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ORDER_COUNT_ACTION), map(action => action.payload), switchMap(state => {\n      return this.apiCli.getorderlistCount(state).pipe(switchMap(salesorders => [new actions.DoOrderCountSuccessAction(salesorders)]), catchError(error => of(new actions.DoOrderCountFailAction(error))));\n    }));\n    this.doOrderDetails$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ORDER_DETAIL_ACTION), map(action => action.payload), switchMap(state => {\n      return this.apiCli.getorderDetail(state).pipe(switchMap(orderDetails => [new actions.DoOrderDetailsSuccessAction(orderDetails)]), catchError(error => of(new actions.DoOrderDetailsFailAction(error))));\n    }));\n    this.doOrderLog$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ORDER_LOG_ACTION), map(action => action.payload), switchMap(state => {\n      return this.apiCli.getOrderLog(state).pipe(switchMap(orderLog => [new actions.DoOrderLogSuccessAction(orderLog)]), catchError(error => of(new actions.DoOrderLogFailAction(error))));\n    })); // Order Status Change\n\n    this.doOrderStatusChange$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ORDER_CHANGE_STATUS_ACTION), map(action => action.payload), switchMap(state => {\n      return this.apiCli.changeOrderStatus(state).pipe(switchMap(orderDetails => [new actions.DoOrderChangeStatusSuccess(orderDetails)]), catchError(error => of(new actions.DoOrderChangeStatusFail(error))));\n    }));\n    this.getSettings$ = this.action$.pipe(ofType(actions.ActionTypes.GET_SETTINGS_ACTION), map(action => action.payload), switchMap(state => {\n      return this.apiCli.getsettings().pipe(map(featured => new actions.GetSettingsSuccess(featured)), catchError(error => of(new actions.GetSettingsFail(error))));\n    })); // Order Excel\n\n    this.doOrderExcel$ = this.action$.pipe(ofType(actions.ActionTypes.GET_ORDER_EXCEL), map(action => action.payload), switchMap(state => {\n      return this.apiCli.orderExcel(state).pipe(tap(data => {\n        const filename = 'OrderExcel_' + Date.now() + '.xlsx';\n        const blob = new Blob([data], {\n          type: 'text/xlsx'\n        });\n        saveAs(blob, filename);\n      }), switchMap(user => [new actions.DoOrderExcelSuccess(user)]), catchError(error => of(new actions.DoOrderExcelFail(error))));\n    }));\n    this.getInvoiceDetail$ = this.action$.pipe(ofType(actions.ActionTypes.DOWNLOAD_INVOICE), map(action => action.payload), switchMap(state => {\n      const orderPrefixId = state.orderPrefixId;\n      return this.apiCli.downloadInvoice(state).pipe(tap(response => {\n        this.downloadPdfFile(response.data, orderPrefixId);\n      }), switchMap(SettingList => [new actions.DownloadInvoiceSuccess(SettingList)]), catchError(error => of(new actions.DownloadInvoiceFail(error))));\n    }));\n  }\n\n  downloadPdfFile(base64content, orderPrefixId) {\n    const fileName = orderPrefixId.toUpperCase() + '-' + new Date();\n    const blobData = this.convertBase64PDFToBlobData(base64content);\n\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      // IE\n      window.navigator.msSaveOrOpenBlob(blobData, fileName);\n    } else {\n      // chrome\n      const blob = new Blob([blobData], {\n        type: 'application/pdf'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n      link.click();\n    }\n  }\n\n  convertBase64PDFToBlobData(base64Data, contentType = 'application/pdf', sliceSize = 512) {\n    const byteCharacters = atob(base64Data.replace(/^data:([A-Za-z-+\\/]+);base64,/, ''));\n    const byteArrays = [];\n\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      const slice = byteCharacters.slice(offset, offset + sliceSize);\n      const byteNumbers = new Array(slice.length);\n\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n\n      const byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n\n    const blob = new Blob(byteArrays, {\n      type: contentType\n    });\n    return blob;\n  }\n\n}\n\nOrdersEffects.ɵfac = function OrdersEffects_Factory(t) {\n  return new (t || OrdersEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.OrdersService), i0.ɵɵinject(i3.Store));\n};\n\nOrdersEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrdersEffects,\n  factory: OrdersEffects.ɵfac\n});\n\n__decorate([Effect()], OrdersEffects.prototype, \"doOrderlists$\", void 0);\n\n__decorate([Effect()], OrdersEffects.prototype, \"doOrderdelete$\", void 0);\n\n__decorate([Effect()], OrdersEffects.prototype, \"doOrderCount$\", void 0);\n\n__decorate([Effect()], OrdersEffects.prototype, \"doOrderDetails$\", void 0);\n\n__decorate([Effect()], OrdersEffects.prototype, \"doOrderLog$\", void 0);\n\n__decorate([Effect()], OrdersEffects.prototype, \"doOrderStatusChange$\", void 0);\n\n__decorate([Effect()], OrdersEffects.prototype, \"getSettings$\", void 0);\n\n__decorate([Effect()], OrdersEffects.prototype, \"doOrderExcel$\", void 0);\n\n__decorate([Effect()], OrdersEffects.prototype, \"getInvoiceDetail$\", void 0);","map":null,"metadata":{},"sourceType":"module"}