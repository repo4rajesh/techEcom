{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { HttpParams } from '@angular/common/http';\nimport { Api } from '../../providers/api/api';\nimport * as i0 from \"@angular/core\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService extends Api {\n    constructor() {\n      super(...arguments); // for get method\n\n      this.params = {}; // url\n\n      this.basUrl = this.getBaseUrl();\n    }\n    /**\n     * Handles 'productList' function. Calls get method with specific api address\n     * along its param.\n     *\n    //  * @param params from RatingReviewListModel\n     */\n\n\n    productList(params) {\n      let reqOpts = {};\n      reqOpts = params;\n      return this.http.get(this.basUrl + '/product/productlist', {\n        params: reqOpts\n      });\n    }\n    /**\n     * Handles 'productCount' function. Calls get method with specific api address\n     * along its param.\n     *\n     * @param params from RatingReviewListModel\n     */\n\n\n    productCount(params) {\n      let reqOpts = {};\n      reqOpts = params;\n      return this.http.get(this.basUrl + '/product/productlist', {\n        params: reqOpts\n      });\n    }\n    /**\n     * Handles 'productDelete' function. Calls delete method with specific api address\n     * along its param.\n     *\n     * @param params from ProductDeleteModel\n     */\n\n\n    productDelete(params) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        }),\n        withCredentials: false,\n        body: {\n          productId: params.productId\n        }\n      };\n      return this.http.delete(this.basUrl + '/product/delete-product/' + params.productId, httpOptions);\n    }\n    /**\n     * Handles 'productAdd' function. Calls post method with specific api address\n     * along its param.\n     *\n     * @param param from Model\n     */\n\n\n    productAdd(param) {\n      return this.http.post(this.basUrl + '/product/add-product', param);\n    }\n    /**\n     * Handles 'productDetail' function. Calls post method with specific api address\n     * along its param.\n     *\n     * @param param from Model\n     */\n\n\n    productUpdate(param) {\n      return this.http.post(this.basUrl + '/product/update-product/' + param.productId, param);\n    }\n    /**\n     * Handles 'productDetail' function. Calls get method with specific api address\n     * along its param.\n     *\n     * @param param from DetailModel\n     */\n\n\n    productDetail(param) {\n      return this.http.get(this.basUrl + '/product/product-detail/' + param.Id);\n    }\n    /**\n     * Handles 'productIsfeature' function. Calls put method with specific api address\n     * along its param.\n     *\n     * @param params from model\n     */\n\n\n    productIsfeature(params) {\n      return this.http.put(this.basUrl + '/product/update-featureproduct/' + params.productId, params);\n    }\n    /**\n     * Handles 'productTodayDeals' function. Calls put method with specific api address\n     * along its param.\n     *\n     * @param params from model\n     */\n\n\n    productTodayDeals(params) {\n      return this.http.put(this.basUrl + '/product/update-todayDeals/' + params.productId, params);\n    }\n    /**\n     * Handles 'optionList' function. Calls put method with specific api address\n     * along its param.\n     *\n     * @param params from model\n     */\n\n\n    optionListApi(params) {\n      let reqOpts = {};\n      reqOpts = params;\n      return this.http.get(this.basUrl + '/option/search-option', {\n        params: reqOpts\n      });\n    } // getting option value\n\n\n    gettingOptionApi(params) {\n      return this.http.get(this.basUrl + `/varients/varients-detail/${params}`);\n    }\n    /**\n     * Handles 'productRatingStatus' function. Calls put method with specific api address\n     * along its param.\n     *\n     * @param params from model\n     */\n\n\n    productRatingStatus(params) {\n      return this.http.put(this.basUrl + '/product/Product-rating-status/' + params.ratingId, params);\n    }\n    /**\n     * Handles 'RatingList' function. Calls put method with specific api address\n     * along its param.\n     *\n     * @param params from model\n     */\n\n\n    ratingListApi(params) {\n      let reqOpts = {};\n      reqOpts = params;\n      return this.http.get(this.basUrl + '/product/Get-Product-rating', {\n        params: reqOpts\n      });\n    }\n    /**\n     * Handles 'productBulkDelete' function. Calls post method with specific api address\n     * along its param.\n     *\n     * @param param from Model\n     */\n\n\n    productBulkDelete(param) {\n      return this.http.post(this.basUrl + '/product/delete-product', param);\n    }\n    /**\n     * Handles 'ProductExcel' function. Calls put method with specific api address\n     * along its param.\n     *\n     * @param params from model\n     */\n\n\n    productExcel(params) {\n      const reqOpts = {};\n      reqOpts.responseType = 'arraybuffer';\n\n      if (params) {\n        reqOpts.params = new HttpParams();\n\n        for (const k in params) {\n          if (k) {\n            reqOpts.params = reqOpts.params.set(k, params[k]);\n          }\n        }\n      }\n\n      return this.http.get(this.basUrl + '/product/product-excel-list/', reqOpts);\n    }\n    /**\n    * Handles 'ProductExcel' function. Calls put method with specific api address\n    * along its param.\n    *\n    * @param params from model\n    */\n\n\n    productAllExcel(params) {\n      const reqOpts = {};\n      reqOpts.responseType = 'blob';\n\n      if (params) {\n        reqOpts.params = new HttpParams();\n\n        for (const k in params) {\n          if (k) {\n            reqOpts.params = reqOpts.params.set(k, params[k]);\n          }\n        }\n      }\n\n      return this.http.get(this.basUrl + '/product/allproduct-excel-list', reqOpts);\n    } // get question list\n\n\n    questionList(params) {\n      return this.http.get(this.basUrl + '/admin-product-question/question-list', {\n        params: params\n      });\n    } // add question\n\n\n    questionAdd(params) {\n      return this.http.post(this.basUrl + '/admin-product-question/add-question', params);\n    } // delete Question\n\n\n    deleteQuestion(params) {\n      return this.http.delete(this.basUrl + '/admin-product-question/delete-question/' + params.questionId);\n    } // change Question\n\n\n    changeQuestionStatus(params) {\n      return this.http.put(this.basUrl + '/admin-product-question/update-question-status/' + params.questionId, params);\n    } // add Question\n\n\n    answerAdd(params) {\n      return this.http.post(this.basUrl + '/admin-product-answer/add-answer', params);\n    } // get answer list\n\n\n    answerList(params) {\n      return this.http.get(this.basUrl + '/admin-product-answer/answer-list', {\n        params: params\n      });\n    } // update answer\n\n\n    answerUpdate(params) {\n      return this.http.put(this.basUrl + '/admin-product-answer/update-answer/' + params.answerId, params);\n    } // delete answer\n\n\n    answerDelete(params) {\n      return this.http.delete(this.basUrl + '/admin-product-answer/delete-answer/' + params.answerId, params);\n    } // change Answer Status\n\n\n    changeAnswerStatus(params) {\n      return this.http.put(this.basUrl + '/admin-product-answer/update-answer-status/' + params.answerId, params);\n    } // make default answer\n\n\n    defaultAnswer(params) {\n      return this.http.put(this.basUrl + '/admin-product-answer/make-default-answer/' + params.answerId, params);\n    } // manufacturer list\n\n\n    manufacturerList(params) {\n      return this.http.get(this.basUrl + '/manufacturer/manufacturerlist', {\n        params: params\n      });\n    }\n\n    deleteProbabilityOption(params) {\n      return this.http.delete(this.basUrl + '/product/delete-product-varient-option/' + params.id);\n    }\n\n    videoUpload(params) {\n      return this.http.post(this.basUrl + '/media/upload-video', params);\n    }\n\n    videoPreview(params) {\n      return this.http.get(this.basUrl + '/media/video-preview-s3', {\n        params: params\n      });\n    }\n\n    getProductPaginationIndex() {\n      return this.index;\n    }\n\n    setProductPaginationIndex(index) {\n      this.index = index;\n    }\n\n  }\n\n  ProductService.ɵfac = /*@__PURE__*/function () {\n    let ɵProductService_BaseFactory;\n    return function ProductService_Factory(t) {\n      return (ɵProductService_BaseFactory || (ɵProductService_BaseFactory = i0.ɵɵgetInheritedFactory(ProductService)))(t || ProductService);\n    };\n  }();\n\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module"}