{"ast":null,"code":"import { __decorate } from \"tslib\"; // effects\n\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators'; // actions\n\nimport * as actions from '../product-action/product.action';\nimport * as layoutActions from '../../layout/action/layout.action';\nimport { catchError } from 'rxjs/operators';\nimport { tap } from 'rxjs/operators';\nimport { saveAs } from 'file-saver';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"../product.service\";\nimport * as i4 from \"ng6-toastr-notifications\";\nexport class ProductEffect {\n  constructor(action$, appState, service, toastr) {\n    this.action$ = action$;\n    this.appState = appState;\n    this.service = service;\n    this.toastr = toastr; // Product list\n\n    this.doprodlists$ = this.action$.pipe(ofType(actions.ActionTypes.GET_PRODUCT_LIST), map(action => action.payload), switchMap(state => {\n      return this.service.productList(state).pipe(switchMap(product => [new actions.GetProductlistSuccessAction(product)]), catchError(error => of(new actions.GetProductlistFailAction(error))));\n    })); // Product list count\n\n    this.doprodlistscount$ = this.action$.pipe(ofType(actions.ActionTypes.GET_PRODUCT_COUNT), map(action => action.payload), switchMap(state => {\n      return this.service.productCount(state).pipe(map(count => new actions.GetProductCountSuccessAction(count)), catchError(error => of(new actions.GetProductCountFailAction(error))));\n    })); // Product delete\n\n    this.doProductDelete$ = this.action$.pipe(ofType(actions.ActionTypes.DO_PRODUCT_DELETE), map(action => action.payload), switchMap(state => {\n      return this.service.productDelete(state).pipe(switchMap(user => [new actions.DoProductDeleteSuccessAction(user)]), catchError(error => of(new actions.DoProductDeleteFailAction(error))));\n    })); // Product add\n\n    this.doProductAdd$ = this.action$.pipe(ofType(actions.ActionTypes.DO_PRODUCT_ADD), map(action => action.payload), switchMap(state => {\n      return this.service.productAdd(state).pipe(map(user => new actions.DoProductAddSuccessAction(user)), catchError(error => of(new actions.DoProductAddFailAction(error))));\n    })); // Product update\n\n    this.doProductUpdate$ = this.action$.pipe(ofType(actions.ActionTypes.DO_PRODUCT_UPDATE), map(action => action.payload), switchMap(state => {\n      return this.service.productUpdate(state).pipe(switchMap(user => [new actions.DoProductUpdateSuccessAction(user)]), catchError(error => of(new actions.DoProductUpdateFailAction(error))));\n    })); // Product detail\n\n    this.doDetail$ = this.action$.pipe(ofType(actions.ActionTypes.GET_PRODUCT_DETAIL), map(action => action.payload), switchMap(state => {\n      return this.service.productDetail(state).pipe(switchMap(user => [new actions.GetProductDetailSuccess(user)]), catchError(error => of(new actions.GetProductDetailFail(error))));\n    })); // IS Feature\n\n    this.doProductIsFeature$ = this.action$.pipe(ofType(actions.ActionTypes.DO_IS_FEATURE_DETAIL), map(action => action.payload), switchMap(state => {\n      return this.service.productIsfeature(state).pipe(tap(res => {\n        this.appState.dispatch(new layoutActions.GetCatalogCountAction());\n      }), switchMap(user => [new actions.DoProductDetailIsFeatureSuccess(user)]), catchError(error => of(new actions.DoProductDetailIsFeatureFail(error))));\n    })); // Product Today Deals\n\n    this.doProductTodayDeals$ = this.action$.pipe(ofType(actions.ActionTypes.DO_TODAY_DEALS_DETAIL), map(action => action.payload), switchMap(state => {\n      return this.service.productTodayDeals(state).pipe(switchMap(user => [new actions.DoProductTodayDealSuccess(user)]), catchError(error => of(new actions.DoProductTodayDealFail(error))));\n    })); // Get Rating list\n\n    this.DoRatingList$ = this.action$.pipe(ofType(actions.ActionTypes.GET_PRODUCT_RATING), map(action => action.payload), switchMap(state => {\n      return this.service.ratingListApi(state).pipe(switchMap(user => [new actions.GetProductRatingSuccess(user)]), catchError(error => of(new actions.GetProductRatingFail(error))));\n    })); // Rating Status\n\n    this.doProductRatingStatus$ = this.action$.pipe(ofType(actions.ActionTypes.DO_PRODUCT_RATING_STATUS), map(action => action.payload), switchMap(state => {\n      return this.service.productRatingStatus(state).pipe(switchMap(user => [new actions.DoProductRatingStatusSuccess(user)]), catchError(error => of(new actions.DoProductRatingStatusFail(error))));\n    })); // Product Bulk Delete\n\n    this.doProductBulkDelete$ = this.action$.pipe(ofType(actions.ActionTypes.DO_PRODUCT_BULK_DELETE), map(action => action.payload), switchMap(state => {\n      return this.service.productBulkDelete(state).pipe(switchMap(user => [new actions.DoProductBulkDeleteSuccess(user)]), catchError(error => of(new actions.DoProductBulkDeleteFail(error))));\n    })); // Product Excel\n\n    this.doProductExcel$ = this.action$.pipe(ofType(actions.ActionTypes.GET_PRODUCT_EXCEL), map(action => action.payload), switchMap(state => {\n      return this.service.productExcel(state).pipe(tap(data => {\n        const filename = 'ProductExcel_' + Date.now() + '.xlsx';\n        const blob = new Blob([data], {\n          type: 'text/xlsx'\n        });\n        saveAs(blob, filename);\n      }), switchMap(user => [new actions.DoProductExcelSuccess(user)]), catchError(error => of(new actions.DoProductExcelFail(error))));\n    })); // Product Excel\n\n    this.doProductAllExcel$ = this.action$.pipe(ofType(actions.ActionTypes.GET_PRODUCT_ALL_EXCEL), map(action => action.payload), switchMap(state => {\n      return this.service.productAllExcel(state).pipe(tap(data => {\n        const filename = 'ProductExcel_' + Date.now() + '.xlsx';\n        const blob = new Blob([data], {\n          type: 'text/xlsx'\n        });\n        saveAs(blob, filename);\n      }), switchMap(user => [new actions.DoProductExcelSuccess(user)]), catchError(error => of(new actions.DoProductExcelFail(error))));\n    })); // Question list\n\n    this.questionList$ = this.action$.pipe(ofType(actions.ActionTypes.GET_QUESTION_LIST), map(action => action.payload), switchMap(state => {\n      return this.service.questionList(state).pipe(switchMap(product => [new actions.GetQuestionListSuccessAction(product)]), catchError(error => of(new actions.GetQuestionListFailAction(error))));\n    })); // Question add\n\n    this.questionAdd$ = this.action$.pipe(ofType(actions.ActionTypes.ADD_QUESTION), map(action => action.payload), switchMap(state => {\n      return this.service.questionAdd(state).pipe(switchMap(product => [new actions.AddQuestionSuccessAction(product)]), catchError(error => of(new actions.AddQuestionFailAction(error))));\n    })); // Question delete\n\n    this.questionDelete$ = this.action$.pipe(ofType(actions.ActionTypes.DELETE_QUESTION), map(action => action.payload), switchMap(state => {\n      return this.service.deleteQuestion(state).pipe(switchMap(product => [new actions.DeleteQuestionSuccessAction(product)]), catchError(error => of(new actions.DeleteQuestionFailAction(error))));\n    })); // Question status change\n\n    this.questionStatus$ = this.action$.pipe(ofType(actions.ActionTypes.CHANGE_QUESTION_STATUS), map(action => action.payload), switchMap(state => {\n      return this.service.changeQuestionStatus(state).pipe(switchMap(product => [new actions.ChangeQuestionStatusSuccessAction(product)]), catchError(error => of(new actions.ChangeQuestionStatusFailAction(error))));\n    })); // Answer list\n\n    this.answerList$ = this.action$.pipe(ofType(actions.ActionTypes.GET_ANSWER_LIST), map(action => action.payload), switchMap(state => {\n      return this.service.answerList(state).pipe(switchMap(product => [new actions.GetAnswerListSuccessAction(product)]), catchError(error => of(new actions.GetAnswerListFailAction(error))));\n    })); // Answer Add\n\n    this.answerAdd$ = this.action$.pipe(ofType(actions.ActionTypes.ADD_ANSWER), map(action => action.payload), switchMap(state => {\n      return this.service.answerAdd(state).pipe(switchMap(product => [new actions.AddAnswerSuccessAction(product)]), catchError(error => of(new actions.AddAnswerFailAction(error))));\n    })); // Answer Update\n\n    this.answerUpdate$ = this.action$.pipe(ofType(actions.ActionTypes.UPDATE_ANSWER), map(action => action.payload), switchMap(state => {\n      return this.service.answerUpdate(state).pipe(switchMap(product => [new actions.UpdateAnswerSuccessAction(product)]), catchError(error => of(new actions.UpdateAnswerFailAction(error))));\n    })); // Answer Delete\n\n    this.answerDelete$ = this.action$.pipe(ofType(actions.ActionTypes.DELETE_ANSWER), map(action => action.payload), switchMap(state => {\n      return this.service.answerDelete(state).pipe(switchMap(product => [new actions.DeleteAnswerSuccessAction(product)]), catchError(error => of(new actions.DeleteAnswerFailAction(error))));\n    })); // Answer change status\n\n    this.answerStatus$ = this.action$.pipe(ofType(actions.ActionTypes.CHANGE_ANSWER_STATUS), map(action => action.payload), switchMap(state => {\n      return this.service.changeAnswerStatus(state).pipe(switchMap(product => [new actions.ChangeAnswerStatusSuccessAction(product)]), catchError(error => of(new actions.ChangeAnswerStatusFailAction(error))));\n    })); // Answer Default\n\n    this.answerDefault$ = this.action$.pipe(ofType(actions.ActionTypes.MAKE_DEFAULT_ANSWER), map(action => action.payload), switchMap(state => {\n      return this.service.defaultAnswer(state).pipe(switchMap(product => [new actions.MakeDefaultAnswerSuccess(product)]), catchError(error => of(new actions.MakeDefaultAnswerFail(error))));\n    })); // manufacturer list\n\n    this.manufacturerList$ = this.action$.pipe(ofType(actions.ActionTypes.GET_MANUFACTURER_LIST), map(action => action.payload), switchMap(state => {\n      return this.service.manufacturerList(state).pipe(switchMap(product => [new actions.ManufacturerListSuccessAction(product)]), catchError(error => of(new actions.ManufacturerListFailAction(error))));\n    }));\n    this.videoUpload$ = this.action$.pipe(ofType(actions.ActionTypes.VIDEO_UPLOAD), map(action => action.payload), switchMap(state => {\n      return this.service.videoUpload(state).pipe(switchMap(user => [new actions.VideoUploadSuccess(user)]), catchError(error => of(new actions.VideoUploadFail(error))));\n    }));\n    this.videoPreview$ = this.action$.pipe(ofType(actions.ActionTypes.VIDEO_PREVIEW), map(action => action.payload), switchMap(state => {\n      return this.service.videoPreview(state).pipe(switchMap(user => [new actions.videoPreviewSuccess(user)]), catchError(error => of(new actions.videoPreviewFail(error))));\n    }));\n  }\n  /**\n   * Shows error notification with given title and message\n   *\n   * @params message\n   */\n\n\n  showNotificationError(message) {\n    this.toastr.errorToastr(message);\n  }\n\n  showSuccess(message) {\n    this.toastr.successToastr(message);\n  }\n\n}\n\nProductEffect.ɵfac = function ProductEffect_Factory(t) {\n  return new (t || ProductEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.ProductService), i0.ɵɵinject(i4.ToastrManager));\n};\n\nProductEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductEffect,\n  factory: ProductEffect.ɵfac\n});\n\n__decorate([Effect()], ProductEffect.prototype, \"doprodlists$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"doprodlistscount$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"doProductDelete$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"doProductAdd$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"doProductUpdate$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"doDetail$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"doProductIsFeature$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"doProductTodayDeals$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"DoRatingList$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"doProductRatingStatus$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"doProductBulkDelete$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"doProductExcel$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"doProductAllExcel$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"questionList$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"questionAdd$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"questionDelete$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"questionStatus$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"answerList$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"answerAdd$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"answerUpdate$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"answerDelete$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"answerStatus$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"answerDefault$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"manufacturerList$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"videoUpload$\", void 0);\n\n__decorate([Effect()], ProductEffect.prototype, \"videoPreview$\", void 0);","map":null,"metadata":{},"sourceType":"module"}