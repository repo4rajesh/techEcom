{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { CustomValidators } from '../../shared/components/interface/custom-password-validation';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"../../../../../core/admin/auth/auth.sandbox\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/common\";\n\nfunction SetPasswordComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SetPasswordComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \"Must be at least 8 characters long\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SetPasswordComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \"Password must contain at least one lowercase and one uppercase letter\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SetPasswordComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \"Password must contain at least one symbol and one number\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SetPasswordComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \"Password should not more than 50 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SetPasswordComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \"Confirm password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SetPasswordComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \"Password does not match\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SetPasswordComponent_ng_template_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelementStart(1, \"span\", 13);\n    i0.ɵɵtext(2, \" Link have already been used \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    validationcolor: a0\n  };\n};\n\nexport let SetPasswordComponent = /*#__PURE__*/(() => {\n  class SetPasswordComponent {\n    constructor(fb, route, snackBar, authSandbox) {\n      this.fb = fb;\n      this.route = route;\n      this.snackBar = snackBar;\n      this.authSandbox = authSandbox;\n      this.submitted = false;\n    }\n\n    ngOnInit() {\n      this.initForm();\n      this.route.queryParams.subscribe(token => {\n        const params = {}; // params.userIdToken = token.token;\n\n        params.key = token.token;\n        this.key = token.token;\n        this.authSandbox.gettoken(params);\n        console.log(\"hhh\", params);\n      });\n    }\n\n    initForm() {\n      this.setPasswordForm = this.fb.group({\n        'password': ['', Validators.compose([Validators.required, CustomValidators.patternValidator(/[0-9 ]*\\.?[0-9]/, {\n          hasNumber: true\n        }), CustomValidators.patternValidator(/[A-Z]/, {\n          hasCapitalCase: true\n        }), CustomValidators.patternValidator(/[a-z]/, {\n          hasSmallCase: true\n        }), Validators.minLength(8), Validators.maxLength(50), CustomValidators.patternValidator(/[!@#$%^&*()_+\\-=~\\[\\]{};':\"\\\\|,.<>\\/?]/, {\n          hasSpecialCharacter: true\n        })])],\n        'confirmPassword': ['', Validators.compose([Validators.required])]\n      }, {\n        validator: this.matchingPasswords('password', 'confirmPassword')\n      });\n      this.newPassword = this.setPasswordForm.controls['password'];\n      this.confirmPassword = this.setPasswordForm.controls['confirmPassword'];\n    }\n\n    recoverPassword(form) {\n      this.submitted = true;\n\n      if (!form.valid) {\n        this.validateAllFormFields(form);\n        return;\n      }\n\n      const params = {};\n      params.key = this.key;\n      params.newPassword = form.value.password;\n      console.log(\"000\", params);\n      this.authSandbox.setpassword(params);\n      this.authSandbox.setpasswordLoaded$.subscribe(data => {\n        if (data == true || data == false) {\n          this.submitted = false;\n          this.setPasswordForm.reset();\n          this.setPasswordForm.clearValidators();\n        }\n      });\n    }\n\n    validateAllFormFields(formGroup) {\n      Object.keys(formGroup.controls).forEach(field => {\n        const control = formGroup.get(field);\n\n        if (control instanceof FormControl) {\n          control.markAsTouched({\n            onlySelf: true\n          });\n        } else if (control instanceof FormGroup) {\n          this.validateAllFormFields(control);\n        }\n      });\n    }\n\n    matchingPasswords(passwordKey, passwordConfirmationKey) {\n      return group => {\n        const password = group.controls[passwordKey];\n        const passwordConfirmation = group.controls[passwordConfirmationKey];\n\n        if (password.value !== passwordConfirmation.value) {\n          return passwordConfirmation.setErrors({\n            mismatchedPasswords: true\n          });\n        }\n      };\n    }\n\n  }\n\n  SetPasswordComponent.ɵfac = function SetPasswordComponent_Factory(t) {\n    return new (t || SetPasswordComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.MatSnackBar), i0.ɵɵdirectiveInject(i4.AuthSandbox));\n  };\n\n  SetPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SetPasswordComponent,\n    selectors: [[\"app-set-password\"]],\n    decls: 35,\n    vars: 14,\n    consts: [[1, \"body-section\"], [\"autocomplete\", \"off\", 3, \"formGroup\", \"ngSubmit\"], [1, \"recover-form\"], [1, \"pwd-title\"], [1, \"data-col\"], [1, \"form-group\"], [\"placeholder\", \"Password\", \"formControlName\", \"password\", \"type\", \"password\", \"minlength\", \"8\", \"required\", \"\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"validation-error\", 4, \"ngIf\"], [\"placeholder\", \"Confirm Password\", \"maxlength\", \"50\", \"formControlName\", \"confirmPassword\", \"type\", \"password\", \"required\", \"\", 1, \"form-control\", 3, \"ngClass\"], [1, \"text-center\", \"mt-2\", \"btn\"], [\"type\", \"button\", 1, \"mat-elevation-z6\", \"signinbtn\", 3, \"click\"], [\"expriedToken\", \"\"], [1, \"validation-error\"], [1, \"pwd-title\", \"pwd-link-expired\"]],\n    template: function SetPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\");\n        i0.ɵɵelementStart(1, \"div\", 0);\n        i0.ɵɵelementContainerStart(2);\n        i0.ɵɵelementContainerStart(3);\n        i0.ɵɵelementStart(4, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function SetPasswordComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.recoverPassword(ctx.setPasswordForm);\n        });\n        i0.ɵɵelementStart(5, \"div\", 2);\n        i0.ɵɵelementStart(6, \"span\", 3);\n        i0.ɵɵtext(7, \"Reset Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 4);\n        i0.ɵɵelementStart(9, \"div\", 5);\n        i0.ɵɵelementStart(10, \"label\");\n        i0.ɵɵtext(11, \"Password\");\n        i0.ɵɵelementStart(12, \"sup\");\n        i0.ɵɵtext(13, \"*\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"input\", 6);\n        i0.ɵɵtemplate(15, SetPasswordComponent_div_15_Template, 2, 0, \"div\", 7);\n        i0.ɵɵtemplate(16, SetPasswordComponent_div_16_Template, 2, 0, \"div\", 7);\n        i0.ɵɵtemplate(17, SetPasswordComponent_div_17_Template, 2, 0, \"div\", 7);\n        i0.ɵɵtemplate(18, SetPasswordComponent_div_18_Template, 2, 0, \"div\", 7);\n        i0.ɵɵtemplate(19, SetPasswordComponent_div_19_Template, 2, 0, \"div\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 4);\n        i0.ɵɵelementStart(21, \"div\", 5);\n        i0.ɵɵelementStart(22, \"label\");\n        i0.ɵɵtext(23, \"Confirm Password\");\n        i0.ɵɵelementStart(24, \"sup\");\n        i0.ɵɵtext(25, \"*\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(26, \"input\", 8);\n        i0.ɵɵtemplate(27, SetPasswordComponent_div_27_Template, 2, 0, \"div\", 7);\n        i0.ɵɵtemplate(28, SetPasswordComponent_div_28_Template, 2, 0, \"div\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"div\", 9);\n        i0.ɵɵelementStart(30, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function SetPasswordComponent_Template_button_click_30_listener() {\n          return ctx.recoverPassword(ctx.setPasswordForm);\n        });\n        i0.ɵɵelementStart(31, \"span\");\n        i0.ɵɵtext(32, \"Submit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(33, SetPasswordComponent_ng_template_33_Template, 3, 0, \"ng-template\", null, 11, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formGroup\", ctx.setPasswordForm);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0, ctx.setPasswordForm.controls.password.hasError(\"required\") && ctx.submitted));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.setPasswordForm.controls[\"password\"].hasError(\"required\") && ctx.submitted);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.setPasswordForm.controls[\"password\"].hasError(\"minlength\") && ctx.submitted);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.setPasswordForm.controls[\"password\"].hasError(\"hasCapitalCase\") || ctx.setPasswordForm.controls[\"password\"].hasError(\"hasSmallCase\") && ctx.submitted);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.setPasswordForm.controls[\"password\"].hasError(\"hasNumber\") || ctx.setPasswordForm.controls[\"password\"].hasError(\"hasSpecialCharacter\") && ctx.submitted);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.setPasswordForm.controls[\"password\"].hasError(\"maxlength\") && ctx.submitted);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(12, _c0, ctx.setPasswordForm.controls.confirmPassword.hasError(\"required\") && ctx.submitted));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.setPasswordForm.controls[\"confirmPassword\"].hasError(\"required\") && ctx.submitted);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.setPasswordForm.controls[\"confirmPassword\"].hasError(\"mismatchedPasswords\") && ctx.submitted);\n      }\n    },\n    directives: [i5.MatCard, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.MinLengthValidator, i1.RequiredValidator, i6.NgClass, i6.NgIf, i1.MaxLengthValidator],\n    styles: [\".body-section[_ngcontent-%COMP%]{box-shadow:0 2px 10px #00000026;background-color:#fff;width:70%;margin:auto;padding:3% 5%;position:fixed;top:50%;left:50%;transform:translate(-50%,-50%)}.body-section[_ngcontent-%COMP%]   .recover-form[_ngcontent-%COMP%]{width:422px;margin:auto}.body-section[_ngcontent-%COMP%]   .recover-form[_ngcontent-%COMP%]   .pwd-title[_ngcontent-%COMP%]{font-size:17px;font-weight:600;font-stretch:normal;font-style:normal;line-height:normal;letter-spacing:normal;color:#264151;display:block;margin-bottom:15px;padding:1em;text-align:center}.body-section[_ngcontent-%COMP%]   .recover-form[_ngcontent-%COMP%]   .pwd-title.pwd-link-expired[_ngcontent-%COMP%]{color:red!important;padding:1.5em!important}.body-section[_ngcontent-%COMP%]   .recover-form[_ngcontent-%COMP%]   .content[_ngcontent-%COMP%]{font-size:14px;font-weight:500;font-stretch:normal;font-style:normal;line-height:normal;letter-spacing:normal;color:#1b1b1c;display:block}.body-section[_ngcontent-%COMP%]   .recover-form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{height:53px;background-color:#264151;font-family:\\\"Poppins\\\",sans-serif;font-size:18px;font-weight:500;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#fff;width:100%;margin:5% 0% 3%;border:none}.body-section[_ngcontent-%COMP%]   .error-data[_ngcontent-%COMP%]{color:#ffedeb;position:absolute;font-size:12px;font-weight:500;font-stretch:normal;font-style:normal;line-height:normal;letter-spacing:normal;color:#ff0101}.body-section[_ngcontent-%COMP%]   .mt-2[_ngcontent-%COMP%]{width:100%}.invalid[_ngcontent-%COMP%]{border:1px solid red!important}.errMsg[_ngcontent-%COMP%]{font-size:11px!important;color:red!important}\"]\n  });\n  return SetPasswordComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}