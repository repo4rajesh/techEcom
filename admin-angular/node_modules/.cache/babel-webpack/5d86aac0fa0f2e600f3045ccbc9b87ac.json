{"ast":null,"code":"import * as userActions from '../user/user-action/user.action';\nimport { UserForm } from './user-model/user.model';\nimport { UserlistForm } from './user-model/userlist.model';\nimport { getAddUser, getAddUserData, userAddFailed, userAddLoaded, userAddLoading, userCountFailed, userCountLoaded, userCountLoading, userGroupFailed, userGroupLoaded, userGroupLoading, userListFailed, userListLoaded, userListLoading, userUpdateFailed, userUpdateLoaded, userUpdateLoading, userDelate, userPagination } from './user-reducer/user.selector';\nimport { getUpdateUser } from './user-reducer/user.selector';\nimport { getUsersList } from './user-reducer/user.selector';\nimport { getGroupList } from './user-reducer/user.selector';\nimport { RoleListModel } from '../role/role.models/role-list.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ng6-toastr-notifications\";\nexport let UserSandbox = /*#__PURE__*/(() => {\n  class UserSandbox {\n    constructor(appState, router, toastr) {\n      this.appState = appState;\n      this.router = router;\n      this.toastr = toastr;\n      this.getAddUser$ = this.appState.select(getAddUser);\n      this.userPagination$ = this.appState.select(userPagination);\n      this.getUpdateUser$ = this.appState.select(getUpdateUser);\n      this.getUsersList$ = this.appState.select(getUsersList);\n      this.getGroupRoleList$ = this.appState.select(getGroupList);\n      this.newUserData$ = this.appState.select(getAddUserData);\n      this.userListLoading$ = this.appState.select(userListLoading);\n      this.userListLoaded$ = this.appState.select(userListLoaded);\n      this.userListFailed$ = this.appState.select(userListFailed);\n      this.userGroupLoading$ = this.appState.select(userGroupLoading);\n      this.userGroupLoaded$ = this.appState.select(userGroupLoaded);\n      this.userGroupFailed$ = this.appState.select(userGroupFailed);\n      this.userCountLoading$ = this.appState.select(userCountLoading);\n      this.userCountLoaded$ = this.appState.select(userCountLoaded);\n      this.userCountFailed$ = this.appState.select(userCountFailed);\n      this.userAddLoading$ = this.appState.select(userAddLoading);\n      this.userAddLoaded$ = this.appState.select(userAddLoaded);\n      this.userAddFailed$ = this.appState.select(userAddFailed);\n      this.userUpdateLoading$ = this.appState.select(userUpdateLoading);\n      this.userUpdateLoaded$ = this.appState.select(userUpdateLoaded);\n      this.userUpdateFailed$ = this.appState.select(userUpdateFailed);\n      this.userDelate$ = this.appState.select(userDelate);\n      this.subscriptions = []; // this.subscribe();\n    }\n\n    addUser(value) {\n      this.appState.dispatch(new userActions.DoNewUserAction(new UserForm(value)));\n    }\n\n    updateUser(value) {\n      this.appState.dispatch(new userActions.DoUpdateUserAction(new UserForm(value)));\n    }\n\n    getUserPagination(value) {\n      this.appState.dispatch(new userActions.DoUserPaginationAction(new UserlistForm(value)));\n    }\n\n    getUserList(value) {\n      this.appState.dispatch(new userActions.DoUserListAction(new UserlistForm(value)));\n    }\n\n    getUserGroupList(value) {\n      this.appState.dispatch(new userActions.DoUserGroupListAction(new RoleListModel(value)));\n    }\n\n    deleteUser(value) {\n      this.appState.dispatch(new userActions.UserDelete(value));\n    }\n\n    clearVariable() {\n      this.appState.dispatch(new userActions.ClearVariable());\n    }\n\n    subscribe() {\n      this.subscriptions.push(this.getAddUser$.subscribe(data => {\n        if (data) {\n          if (data && data.status === 1) {\n            this.router.navigate(['/settings/user']);\n          }\n        }\n      }));\n      this.subscriptions.push(this.getUpdateUser$.subscribe(data => {\n        if (data) {\n          if (data && data.status === 1) {\n            this.router.navigate(['/settings/user']);\n          }\n        }\n      }));\n    }\n\n  }\n\n  UserSandbox.ɵfac = function UserSandbox_Factory(t) {\n    return new (t || UserSandbox)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrManager));\n  };\n\n  UserSandbox.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserSandbox,\n    factory: UserSandbox.ɵfac\n  });\n  return UserSandbox;\n})();","map":null,"metadata":{},"sourceType":"module"}