{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as actions from '../action/editprofile.action';\nimport { catchError } from 'rxjs/operators';\nimport { EditprofileResponseModel } from '../models/editprofile.response.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../editprofile.service\";\nexport class EditprofileEffect {\n  constructor(action$, service) {\n    this.action$ = action$;\n    this.service = service;\n    this.doEditProfile$ = this.action$.pipe(ofType(actions.ActionTypes.DO_EDIT_PROFILE), map(action => action.payload), switchMap(state => {\n      return this.service.editProfile(state).pipe(switchMap(user => [new actions.DoEditprofileSucessAction(new EditprofileResponseModel(user))]), catchError(error => of(new actions.DoEditprofileFailAction(error))));\n    }));\n    this.doGetProfile$ = this.action$.pipe(ofType(actions.ActionTypes.GET_PROFILE), map(action => action.payload), switchMap(state => {\n      return this.service.getProfileDetail().pipe(switchMap(user => [new actions.getProfileSuccess(user)]), catchError(error => of(new actions.getProfileFail(error))));\n    }));\n  }\n\n}\n\nEditprofileEffect.ɵfac = function EditprofileEffect_Factory(t) {\n  return new (t || EditprofileEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.EditprofileService));\n};\n\nEditprofileEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EditprofileEffect,\n  factory: EditprofileEffect.ɵfac\n});\n\n__decorate([Effect()], EditprofileEffect.prototype, \"doEditProfile$\", void 0);\n\n__decorate([Effect()], EditprofileEffect.prototype, \"doGetProfile$\", void 0);","map":null,"metadata":{},"sourceType":"module"}