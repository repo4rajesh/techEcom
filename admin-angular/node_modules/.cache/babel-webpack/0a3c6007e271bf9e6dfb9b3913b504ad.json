{"ast":null,"code":"import * as roleActions from './role-action/role.action';\nimport { getroleCount, getRoleList, getupdaterole, newRoleStatus, RoleAddFailed, RoleAddLoaded, RoleAddLoading, RoleCountFailed, RoleCountLoaded, RoleCountLoading, RoleListFailed, RoleListLoaded, RoleListLoading, RoleUpdateFailed, RoleUpdateLoaded, RoleUpdateLoading, RoleDelete } from './role-reducer/role-selector';\nimport { RoleForm } from './role.models/role.models';\nimport { RoleListModel } from './role.models/role-list.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ng6-toastr-notifications\";\nexport let RoleSandbox = /*#__PURE__*/(() => {\n  class RoleSandbox {\n    constructor(appState, router, toastr) {\n      this.appState = appState;\n      this.router = router;\n      this.toastr = toastr;\n      this.subscriptions = [];\n      this.getRolesList$ = this.appState.select(getRoleList);\n      this.getRoleStatus$ = this.appState.select(newRoleStatus);\n      this.getupdaterole$ = this.appState.select(getupdaterole);\n      this.roleCount$ = this.appState.select(getroleCount);\n      this.roleListLoading$ = this.appState.select(RoleListLoading);\n      this.roleListLoaded$ = this.appState.select(RoleListLoaded);\n      this.roleListFailed$ = this.appState.select(RoleListFailed);\n      this.roleCountLoading$ = this.appState.select(RoleCountLoading);\n      this.roleCountLoaded$ = this.appState.select(RoleCountLoaded);\n      this.roleCountFailed$ = this.appState.select(RoleCountFailed);\n      this.roleAddLoading$ = this.appState.select(RoleAddLoading);\n      this.roleAddLoaded$ = this.appState.select(RoleAddLoaded);\n      this.roleAddFailed$ = this.appState.select(RoleAddFailed);\n      this.roleUpdateLoading$ = this.appState.select(RoleUpdateLoading);\n      this.roleUpdateLoaded$ = this.appState.select(RoleUpdateLoaded);\n      this.roleUpdateFailed$ = this.appState.select(RoleUpdateFailed);\n      this.roleDelete$ = this.appState.select(RoleDelete); // this.subscripe();\n    }\n\n    getRoleList(value) {\n      this.appState.dispatch(new roleActions.DoRoleListAction(new RoleListModel(value)));\n    }\n\n    addRole(value) {\n      this.appState.dispatch(new roleActions.DoNewRolerAction(new RoleForm(value)));\n    }\n\n    getpagination(value) {\n      this.appState.dispatch(new roleActions.GetRoleCountAction(value));\n    }\n\n    updateRole(value) {\n      this.appState.dispatch(new roleActions.DoUpdateRoleAction(new RoleForm(value)));\n    }\n\n    deleteRole(value) {\n      this.appState.dispatch(new roleActions.DeleteRole(value));\n    }\n\n    subscripe() {\n      this.subscriptions.push(this.getRoleStatus$.subscribe(data => {\n        if (data && data.message) {\n          if (data.status === 1) {\n            this.router.navigate(['/settings/role']);\n          }\n        }\n      }));\n      this.subscriptions.push(this.getupdaterole$.subscribe(data => {\n        if (data && data.message) {\n          if (data.status === 1) {\n            this.router.navigate(['/settings/role']);\n          }\n        }\n      }));\n    }\n\n  }\n\n  RoleSandbox.ɵfac = function RoleSandbox_Factory(t) {\n    return new (t || RoleSandbox)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrManager));\n  };\n\n  RoleSandbox.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RoleSandbox,\n    factory: RoleSandbox.ɵfac\n  });\n  return RoleSandbox;\n})();","map":null,"metadata":{},"sourceType":"module"}