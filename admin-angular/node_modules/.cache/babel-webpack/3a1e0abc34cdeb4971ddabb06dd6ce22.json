{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, IterableDiffers, KeyValueDiffers, ViewChild, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { __awaiter } from 'tslib';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nconst _c0 = [\"plot\"];\nconst _c1 = [\"*\"];\n\nclass PlotlyService {\n  static setModuleName(moduleName) {\n    PlotlyService.moduleName = moduleName;\n  }\n\n  static getModuleName() {\n    return PlotlyService.moduleName;\n  }\n\n  static setPlotly(plotly) {\n    if (typeof plotly === 'object' && typeof plotly.react !== 'function') {\n      throw new Error('Invalid plotly.js version. Please, use any version above 1.40.0');\n    }\n\n    PlotlyService.plotly = plotly;\n  }\n\n  static insert(instance) {\n    const index = PlotlyService.instances.indexOf(instance);\n\n    if (index === -1) {\n      PlotlyService.instances.push(instance);\n    }\n\n    return instance;\n  }\n\n  static remove(div) {\n    const index = PlotlyService.instances.indexOf(div);\n\n    if (index >= 0) {\n      PlotlyService.instances.splice(index, 1);\n      PlotlyService.plotly.purge(div);\n    }\n  }\n\n  getInstanceByDivId(id) {\n    for (const instance of PlotlyService.instances) {\n      if (instance && instance.id === id) {\n        return instance;\n      }\n    }\n\n    return undefined;\n  }\n\n  getPlotly() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.waitFor(() => this._getPlotly() !== 'waiting');\n      return this._getPlotly();\n    });\n  }\n\n  _getPlotly() {\n    if (typeof PlotlyService.plotly === 'undefined') {\n      const msg = PlotlyService.moduleName === 'ViaCDN' ? `Error loading Peer dependency plotly.js from CDN url` : `Peer dependency plotly.js isn't installed`;\n      throw new Error(msg);\n    }\n\n    return PlotlyService.plotly;\n  }\n\n  waitFor(fn) {\n    return new Promise(resolve => {\n      const localFn = () => {\n        fn() ? resolve() : setTimeout(localFn, 10);\n      };\n\n      localFn();\n    });\n  } // tslint:disable max-line-length\n\n\n  newPlot(div, data, layout, config, frames) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.waitFor(() => this._getPlotly() !== 'waiting');\n\n      if (frames) {\n        const obj = {\n          data,\n          layout,\n          config,\n          frames\n        };\n        return this._getPlotly().newPlot(div, obj).then(() => PlotlyService.insert(div));\n      }\n\n      return this._getPlotly().newPlot(div, data, layout, config).then(() => PlotlyService.insert(div));\n    });\n  }\n\n  plot(div, data, layout, config, frames) {\n    if (frames) {\n      const obj = {\n        data,\n        layout,\n        config,\n        frames\n      };\n\n      if (typeof this._getPlotly().plot === 'function') {\n        return this._getPlotly().plot(div, obj);\n      } else {\n        // Adds support for Plotly 2.0.0 release candidates\n        return this._getPlotly().newPlot(div, obj);\n      }\n    }\n\n    if (typeof this._getPlotly().plot === 'function') {\n      return this._getPlotly().plot(div, data, layout, config);\n    } else {\n      // Adds support for Plotly 2.0.0 release candidates\n      return this._getPlotly().newPlot(div, data, layout, config);\n    }\n  }\n\n  update(div, data, layout, config, frames) {\n    if (frames) {\n      const obj = {\n        data,\n        layout,\n        config,\n        frames\n      };\n      return this._getPlotly().react(div, obj);\n    }\n\n    return this._getPlotly().react(div, data, layout, config);\n  } // tslint:enable max-line-length\n\n\n  resize(div) {\n    return this._getPlotly().Plots.resize(div);\n  }\n\n}\n\nPlotlyService.ɵfac = function PlotlyService_Factory(t) {\n  return new (t || PlotlyService)();\n};\n\nPlotlyService.instances = [];\nPlotlyService.plotly = undefined;\nPlotlyService.moduleName = undefined;\nPlotlyService.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function PlotlyService_Factory() {\n    return new PlotlyService();\n  },\n  token: PlotlyService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/* tslint:disable component-selector no-output-native no-conflicting-lifecycle */\n// @dynamic\n\n\nlet PlotlyComponent = /*#__PURE__*/(() => {\n  class PlotlyComponent {\n    constructor(plotly, iterableDiffers, keyValueDiffers) {\n      this.plotly = plotly;\n      this.iterableDiffers = iterableDiffers;\n      this.keyValueDiffers = keyValueDiffers;\n      this.defaultClassName = 'js-plotly-plot';\n      this.revision = 0;\n      this.debug = false;\n      this.useResizeHandler = false;\n      this.updateOnLayoutChange = true;\n      this.updateOnDataChange = true;\n      this.updateOnlyWithRevision = false;\n      this.initialized = new EventEmitter();\n      this.update = new EventEmitter();\n      this.purge = new EventEmitter();\n      this.error = new EventEmitter();\n      this.afterExport = new EventEmitter();\n      this.afterPlot = new EventEmitter();\n      this.animated = new EventEmitter();\n      this.animatingFrame = new EventEmitter();\n      this.animationInterrupted = new EventEmitter();\n      this.autoSize = new EventEmitter();\n      this.beforeExport = new EventEmitter();\n      this.buttonClicked = new EventEmitter();\n      this.click = new EventEmitter();\n      this.plotlyClick = new EventEmitter();\n      this.clickAnnotation = new EventEmitter();\n      this.deselect = new EventEmitter();\n      this.doubleClick = new EventEmitter();\n      this.framework = new EventEmitter();\n      this.hover = new EventEmitter();\n      this.legendClick = new EventEmitter();\n      this.legendDoubleClick = new EventEmitter();\n      this.react = new EventEmitter();\n      this.relayout = new EventEmitter();\n      this.restyle = new EventEmitter();\n      this.redraw = new EventEmitter();\n      this.selected = new EventEmitter();\n      this.selecting = new EventEmitter();\n      this.sliderChange = new EventEmitter();\n      this.sliderEnd = new EventEmitter();\n      this.sliderStart = new EventEmitter();\n      this.transitioning = new EventEmitter();\n      this.transitionInterrupted = new EventEmitter();\n      this.unhover = new EventEmitter();\n      this.relayouting = new EventEmitter();\n      this.treemapclick = new EventEmitter();\n      this.sunburstclick = new EventEmitter();\n      this.eventNames = ['afterExport', 'afterPlot', 'animated', 'animatingFrame', 'animationInterrupted', 'autoSize', 'beforeExport', 'buttonClicked', 'clickAnnotation', 'deselect', 'doubleClick', 'framework', 'hover', 'legendClick', 'legendDoubleClick', 'react', 'relayout', 'restyle', 'redraw', 'selected', 'selecting', 'sliderChange', 'sliderEnd', 'sliderStart', 'transitioning', 'transitionInterrupted', 'unhover', 'relayouting', 'treemapclick', 'sunburstclick'];\n    }\n\n    ngOnInit() {\n      this.createPlot().then(() => {\n        const figure = this.createFigure();\n        this.initialized.emit(figure);\n      });\n\n      if (this.click.observers.length > 0) {\n        const msg = 'DEPRECATED: Reconsider using `(plotlyClick)` instead of `(click)` to avoid event conflict. ' + 'Please check https://github.com/plotly/angular-plotly.js#FAQ';\n        console.error(msg);\n      }\n    }\n\n    ngOnDestroy() {\n      if (typeof this.resizeHandler === 'function') {\n        this.getWindow().removeEventListener('resize', this.resizeHandler);\n        this.resizeHandler = undefined;\n      }\n\n      const figure = this.createFigure();\n      this.purge.emit(figure);\n      PlotlyService.remove(this.plotlyInstance);\n    }\n\n    ngOnChanges(changes) {\n      let shouldUpdate = false;\n      const revision = changes.revision;\n\n      if (revision && !revision.isFirstChange()) {\n        shouldUpdate = true;\n      }\n\n      const debug = changes.debug;\n\n      if (debug && !debug.isFirstChange()) {\n        shouldUpdate = true;\n      }\n\n      if (shouldUpdate) {\n        this.updatePlot();\n      }\n\n      this.updateWindowResizeHandler();\n    }\n\n    ngDoCheck() {\n      if (this.updateOnlyWithRevision) {\n        return false;\n      }\n\n      let shouldUpdate = false;\n\n      if (this.updateOnLayoutChange) {\n        if (this.layoutDiffer) {\n          const layoutHasDiff = this.layoutDiffer.diff(this.layout);\n\n          if (layoutHasDiff) {\n            shouldUpdate = true;\n          }\n        } else if (this.layout) {\n          this.layoutDiffer = this.keyValueDiffers.find(this.layout).create();\n        } else {\n          this.layoutDiffer = undefined;\n        }\n      }\n\n      if (this.updateOnDataChange) {\n        if (this.dataDiffer) {\n          const dataHasDiff = this.dataDiffer.diff(this.data);\n\n          if (dataHasDiff) {\n            shouldUpdate = true;\n          }\n        } else if (Array.isArray(this.data)) {\n          this.dataDiffer = this.iterableDiffers.find(this.data).create(this.dataDifferTrackBy);\n        } else {\n          this.dataDiffer = undefined;\n        }\n      }\n\n      if (shouldUpdate && this.plotlyInstance) {\n        this.updatePlot();\n      }\n    }\n\n    getWindow() {\n      return window;\n    }\n\n    getClassName() {\n      let classes = [this.defaultClassName];\n\n      if (Array.isArray(this.className)) {\n        classes = classes.concat(this.className);\n      } else if (this.className) {\n        classes.push(this.className);\n      }\n\n      return classes.join(' ');\n    }\n\n    createPlot() {\n      return this.plotly.newPlot(this.plotEl.nativeElement, this.data, this.layout, this.config, this.frames).then(plotlyInstance => {\n        this.plotlyInstance = plotlyInstance;\n        this.getWindow().gd = this.debug ? plotlyInstance : undefined;\n        this.eventNames.forEach(name => {\n          const eventName = `plotly_${name.toLowerCase()}`;\n          plotlyInstance.on(eventName, data => this[name].emit(data));\n        });\n        plotlyInstance.on('plotly_click', data => {\n          this.click.emit(data);\n          this.plotlyClick.emit(data);\n        });\n        this.updateWindowResizeHandler();\n      }, err => {\n        console.error('Error while plotting:', err);\n        this.error.emit(err);\n      });\n    }\n\n    createFigure() {\n      const p = this.plotlyInstance;\n      const figure = {\n        data: p.data,\n        layout: p.layout,\n        frames: p._transitionData ? p._transitionData._frames : null\n      };\n      return figure;\n    }\n\n    updatePlot() {\n      if (!this.plotlyInstance) {\n        const error = new Error(`Plotly component wasn't initialized`);\n        this.error.emit(error);\n        throw error;\n      }\n\n      const layout = Object.assign({}, this.layout);\n      return this.plotly.update(this.plotlyInstance, this.data, layout, this.config, this.frames).then(() => {\n        const figure = this.createFigure();\n        this.update.emit(figure);\n      }, err => {\n        console.error('Error while updating plot:', err);\n        this.error.emit(err);\n      });\n    }\n\n    updateWindowResizeHandler() {\n      if (this.useResizeHandler) {\n        if (this.resizeHandler === undefined) {\n          this.resizeHandler = () => this.plotly.resize(this.plotlyInstance);\n\n          this.getWindow().addEventListener('resize', this.resizeHandler);\n        }\n      } else {\n        if (typeof this.resizeHandler === 'function') {\n          this.getWindow().removeEventListener('resize', this.resizeHandler);\n          this.resizeHandler = undefined;\n        }\n      }\n    }\n\n    dataDifferTrackBy(_, item) {\n      const obj = Object.assign({}, item, {\n        uid: ''\n      });\n      return JSON.stringify(obj);\n    }\n\n  }\n\n  PlotlyComponent.ɵfac = function PlotlyComponent_Factory(t) {\n    return new (t || PlotlyComponent)(ɵngcc0.ɵɵdirectiveInject(PlotlyService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers));\n  };\n\n  PlotlyComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PlotlyComponent,\n    selectors: [[\"plotly-plot\"]],\n    viewQuery: function PlotlyComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.plotEl = _t.first);\n      }\n    },\n    inputs: {\n      revision: \"revision\",\n      debug: \"debug\",\n      useResizeHandler: \"useResizeHandler\",\n      updateOnLayoutChange: \"updateOnLayoutChange\",\n      updateOnDataChange: \"updateOnDataChange\",\n      updateOnlyWithRevision: \"updateOnlyWithRevision\",\n      data: \"data\",\n      layout: \"layout\",\n      config: \"config\",\n      frames: \"frames\",\n      style: \"style\",\n      divId: \"divId\",\n      className: \"className\"\n    },\n    outputs: {\n      initialized: \"initialized\",\n      update: \"update\",\n      purge: \"purge\",\n      error: \"error\",\n      afterExport: \"afterExport\",\n      afterPlot: \"afterPlot\",\n      animated: \"animated\",\n      animatingFrame: \"animatingFrame\",\n      animationInterrupted: \"animationInterrupted\",\n      autoSize: \"autoSize\",\n      beforeExport: \"beforeExport\",\n      buttonClicked: \"buttonClicked\",\n      click: \"click\",\n      plotlyClick: \"plotlyClick\",\n      clickAnnotation: \"clickAnnotation\",\n      deselect: \"deselect\",\n      doubleClick: \"doubleClick\",\n      framework: \"framework\",\n      hover: \"hover\",\n      legendClick: \"legendClick\",\n      legendDoubleClick: \"legendDoubleClick\",\n      react: \"react\",\n      relayout: \"relayout\",\n      restyle: \"restyle\",\n      redraw: \"redraw\",\n      selected: \"selected\",\n      selecting: \"selecting\",\n      sliderChange: \"sliderChange\",\n      sliderEnd: \"sliderEnd\",\n      sliderStart: \"sliderStart\",\n      transitioning: \"transitioning\",\n      transitionInterrupted: \"transitionInterrupted\",\n      unhover: \"unhover\",\n      relayouting: \"relayouting\",\n      treemapclick: \"treemapclick\",\n      sunburstclick: \"sunburstclick\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([PlotlyService]), ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c1,\n    decls: 3,\n    vars: 3,\n    consts: [[3, \"ngClass\", \"ngStyle\"], [\"plot\", \"\"]],\n    template: function PlotlyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.getClassName())(\"ngStyle\", ctx.style);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.divId);\n      }\n    },\n    directives: [ɵngcc1.NgClass, ɵngcc1.NgStyle],\n    encapsulation: 2\n  });\n  return PlotlyComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet PlotlySharedModule = /*#__PURE__*/(() => {\n  class PlotlySharedModule {\n    constructor() {}\n\n  }\n\n  PlotlySharedModule.ɵfac = function PlotlySharedModule_Factory(t) {\n    return new (t || PlotlySharedModule)();\n  };\n\n  PlotlySharedModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: PlotlySharedModule\n  });\n  PlotlySharedModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [PlotlyService],\n    imports: [[CommonModule]]\n  });\n  return PlotlySharedModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PlotlySharedModule, {\n    declarations: function () {\n      return [PlotlyComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [PlotlyComponent];\n    }\n  });\n})();\n\nlet PlotlyModule = /*#__PURE__*/(() => {\n  class PlotlyModule {\n    constructor() {\n      if (!this.isValid()) {\n        const msg = 'Invalid PlotlyJS object. Please check https://github.com/plotly/angular-plotly.js#quick-start' + ' to see how to add PlotlyJS to your project.';\n        throw new Error(msg);\n      }\n\n      PlotlyService.setPlotly(PlotlyModule.plotlyjs);\n    }\n\n    isValid() {\n      return PlotlyModule.plotlyjs !== undefined && (typeof PlotlyModule.plotlyjs.plot === 'function' || typeof PlotlyModule.plotlyjs.newPlot === 'function');\n    }\n\n  }\n\n  PlotlyModule.ɵfac = function PlotlyModule_Factory(t) {\n    return new (t || PlotlyModule)();\n  };\n\n  PlotlyModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: PlotlyModule\n  });\n  PlotlyModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [PlotlyService],\n    imports: [[CommonModule, PlotlySharedModule], PlotlySharedModule]\n  });\n  PlotlyModule.plotlyjs = {};\n  return PlotlyModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PlotlyModule, {\n    imports: function () {\n      return [CommonModule, PlotlySharedModule];\n    },\n    exports: function () {\n      return [PlotlySharedModule];\n    }\n  });\n})();\n\nlet PlotlyViaCDNModule = /*#__PURE__*/(() => {\n  class PlotlyViaCDNModule {\n    constructor(plotlyService) {\n      this.plotlyService = plotlyService;\n      PlotlyService.setModuleName('ViaCDN');\n    }\n\n    static setPlotlyVersion(version) {\n      const isOk = version === 'latest' || /^\\d\\.\\d{1,2}\\.\\d{1,2}$/.test(version);\n\n      if (!isOk) {\n        throw new Error(`Invalid plotly version. Please set 'latest' or version number (i.e.: 1.4.3)`);\n      }\n\n      PlotlyViaCDNModule.loadViaCDN();\n      PlotlyViaCDNModule.plotlyVersion = version;\n    }\n\n    static setPlotlyBundle(bundle) {\n      const isOk = bundle === null || PlotlyViaCDNModule.plotlyBundleNames.indexOf(bundle) >= 0;\n\n      if (!isOk) {\n        const names = PlotlyViaCDNModule.plotlyBundleNames.map(n => `\"${n}\"`).join(', ');\n        throw new Error(`Invalid plotly bundle. Please set to null for full or ${names} for a partial bundle.`);\n      }\n\n      PlotlyViaCDNModule.plotlyBundle = bundle;\n    }\n\n    static loadViaCDN() {\n      PlotlyService.setPlotly('waiting');\n\n      const init = () => {\n        const src = PlotlyViaCDNModule.plotlyBundle == null ? `https://cdn.plot.ly/plotly-${PlotlyViaCDNModule.plotlyVersion}.min.js` : `https://cdn.plot.ly/plotly-${PlotlyViaCDNModule.plotlyBundle}-${PlotlyViaCDNModule.plotlyVersion}.min.js`;\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = src;\n\n        script.onerror = () => console.error(`Error loading plotly.js library from ${src}`);\n\n        const head = document.getElementsByTagName('head')[0];\n        head.appendChild(script);\n        let counter = 200; // equivalent of 10 seconds...\n\n        const fn = () => {\n          const plotly = window.Plotly;\n\n          if (plotly) {\n            PlotlyService.setPlotly(plotly);\n          } else if (counter > 0) {\n            counter--;\n            setTimeout(fn, 50);\n          } else {\n            throw new Error(`Error loading plotly.js library from ${src}. Timeout.`);\n          }\n        };\n\n        fn();\n      };\n\n      setTimeout(init);\n    }\n\n  }\n\n  PlotlyViaCDNModule.ɵfac = function PlotlyViaCDNModule_Factory(t) {\n    return new (t || PlotlyViaCDNModule)(ɵngcc0.ɵɵinject(PlotlyService));\n  };\n\n  PlotlyViaCDNModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: PlotlyViaCDNModule\n  });\n  PlotlyViaCDNModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [PlotlyService],\n    imports: [[CommonModule, PlotlySharedModule], PlotlySharedModule]\n  });\n  PlotlyViaCDNModule.plotlyBundle = null;\n  PlotlyViaCDNModule.plotlyVersion = 'latest';\n  PlotlyViaCDNModule.plotlyBundleNames = ['basic', 'cartesian', 'geo', 'gl3d', 'gl2d', 'mapbox', 'finance'];\n  return PlotlyViaCDNModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PlotlyViaCDNModule, {\n    imports: function () {\n      return [CommonModule, PlotlySharedModule];\n    },\n    exports: function () {\n      return [PlotlySharedModule];\n    }\n  });\n})();\n\nlet PlotlyViaWindowModule = /*#__PURE__*/(() => {\n  class PlotlyViaWindowModule {\n    constructor() {\n      const plotly = window.Plotly;\n\n      if (typeof plotly === 'undefined') {\n        throw new Error(`Plotly object not found on window.`);\n      }\n\n      PlotlyService.setPlotly(plotly);\n    }\n\n  }\n\n  PlotlyViaWindowModule.ɵfac = function PlotlyViaWindowModule_Factory(t) {\n    return new (t || PlotlyViaWindowModule)();\n  };\n\n  PlotlyViaWindowModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: PlotlyViaWindowModule\n  });\n  PlotlyViaWindowModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [PlotlyService],\n    imports: [[CommonModule, PlotlySharedModule], PlotlySharedModule]\n  });\n  return PlotlyViaWindowModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PlotlyViaWindowModule, {\n    imports: function () {\n      return [CommonModule, PlotlySharedModule];\n    },\n    exports: function () {\n      return [PlotlySharedModule];\n    }\n  });\n})();\n/*\n * Public API Surface of plotly\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { PlotlyComponent, PlotlyModule, PlotlyService, PlotlySharedModule, PlotlyViaCDNModule, PlotlyViaWindowModule }; //# sourceMappingURL=angular-plotly.js.js.map","map":null,"metadata":{},"sourceType":"module"}