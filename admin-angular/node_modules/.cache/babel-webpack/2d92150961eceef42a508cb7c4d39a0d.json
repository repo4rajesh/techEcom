{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { catchError } from 'rxjs/operators';\nimport * as actions from '../order-action/order-action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../order-service\";\nexport class PersonalizeOrderEffect {\n  constructor(action$, service) {\n    this.action$ = action$;\n    this.service = service; // NEW USER\n\n    this.doAddseo$ = this.action$.pipe(ofType(actions.ActionTypes.DO_NEW_ORDER_SETTINGS), map(action => action.payload), switchMap(state => {\n      return this.service.createOrder(state).pipe(switchMap(user => [new actions.DoNewOrderSettingSuccessAction(user)]), catchError(error => of(new actions.DoNewOrderSettingFailAction(error))));\n    })); // GET GENERAL SETTINGS\n\n    this.dogetseosetting$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ORDER_SETTINGS), map(action => action.payload), switchMap(() => {\n      return this.service.getOrder().pipe(switchMap(user => {\n        return [new actions.DoGetOrderSettingSuccessAction(user)];\n      }), catchError(error => of(new actions.DoGetOrderSettingFailAction(error))));\n    }));\n  }\n\n}\n\nPersonalizeOrderEffect.ɵfac = function PersonalizeOrderEffect_Factory(t) {\n  return new (t || PersonalizeOrderEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.PerSonalizeOrderService));\n};\n\nPersonalizeOrderEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PersonalizeOrderEffect,\n  factory: PersonalizeOrderEffect.ɵfac\n});\n\n__decorate([Effect()], PersonalizeOrderEffect.prototype, \"doAddseo$\", void 0);\n\n__decorate([Effect()], PersonalizeOrderEffect.prototype, \"dogetseosetting$\", void 0);","map":null,"metadata":{},"sourceType":"module"}