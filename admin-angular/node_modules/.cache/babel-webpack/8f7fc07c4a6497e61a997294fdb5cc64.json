{"ast":null,"code":"import { __decorate } from \"tslib\"; // effects\n\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators'; // actions\n\nimport * as actions from '../action/media.action';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../media.service\";\nexport class MediaEffects {\n  constructor(action$, apiCli) {\n    this.action$ = action$;\n    this.apiCli = apiCli; // MEDIA UPLOAD\n\n    this.domediaupload$ = this.action$.pipe(ofType(actions.ActionTypes.DO_MEDIAUPLOAD), map(action => action.payload), switchMap(state => {\n      return this.apiCli.document(state).pipe(switchMap(user => [new actions.DoMediaUploadSuccessAction(user)]), catchError(error => of(new actions.DoMediaUploadFailAction(error))));\n    })); // MEDIA CREATE FOLDER\n\n    this.domediafolder$ = this.action$.pipe(ofType(actions.ActionTypes.DO_MEDIACREATEFOLDER), map(action => action.payload), switchMap(state => {\n      return this.apiCli.CreateFolder(state).pipe(switchMap(user => [new actions.DoMediaCreatefolderSuccessAction(user)]), catchError(error => of(new actions.DoMediaCreatefolderFailAction(error))));\n    }));\n    this.dobuckdelfile$ = this.action$.pipe(ofType(actions.ActionTypes.DO_DELETEFILE), map(action => action.payload), switchMap(state => {\n      return this.apiCli.deleteImage(state).pipe(switchMap(user => [new actions.DoDeletefileSuccessAction(user)]), catchError(error => of(new actions.DoDeletefileFailAction(error))));\n    })); // buck del folder\n\n    this.dobuckdelfolder$ = this.action$.pipe(ofType(actions.ActionTypes.DO_DELETEFOLDER), map(action => action.payload), switchMap(state => {\n      return this.apiCli.deleteFolder(state).pipe(switchMap(user => [new actions.DoDeletefolderSuccessAction(user)]), catchError(error => of(new actions.DoDeletefolderFailAction(error))));\n    })); // BUCKETLIST\n\n    this.dobucklists$ = this.action$.pipe(ofType(actions.ActionTypes.DO_BUCKETLIST), map(action => action.payload), switchMap(state => {\n      return this.apiCli.bucketLists(state).pipe(switchMap(user => [new actions.DoBucketlistSuccessAction(user)]), catchError(error => of(new actions.DoBucketlistFailAction(error))));\n    })); // SEARCH FOLDER\n\n    this.dosearchFolder$ = this.action$.pipe(ofType(actions.ActionTypes.DO_SEARCHFOLDER), map(action => action.payload), switchMap(state => {\n      return this.apiCli.searchFolder(state).pipe(switchMap(user => [new actions.DoSearchfolderSuccessAction(user)]), catchError(error => of(new actions.DoSearchfolderFailAction(error))));\n    }));\n  }\n\n}\n\nMediaEffects.ɵfac = function MediaEffects_Factory(t) {\n  return new (t || MediaEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.MediaService));\n};\n\nMediaEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MediaEffects,\n  factory: MediaEffects.ɵfac\n});\n\n__decorate([Effect()], MediaEffects.prototype, \"domediaupload$\", void 0);\n\n__decorate([Effect()], MediaEffects.prototype, \"domediafolder$\", void 0);\n\n__decorate([Effect()], MediaEffects.prototype, \"dobuckdelfile$\", void 0);\n\n__decorate([Effect()], MediaEffects.prototype, \"dobuckdelfolder$\", void 0);\n\n__decorate([Effect()], MediaEffects.prototype, \"dobucklists$\", void 0);\n\n__decorate([Effect()], MediaEffects.prototype, \"dosearchFolder$\", void 0);","map":null,"metadata":{},"sourceType":"module"}