{"ast":null,"code":"/*\n* spurtcommerce\n* http://www.spurtcommerce.com\n*\n* Copyright (c) 2021 Piccosoft Software Labs Pvt Ltd\n* Author Piccosoft Software Labs Pvt Ltd <support@spurtcommerce.com>\n* Licensed under the MIT license.\n*/\nimport { PLATFORM_ID } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { isPlatformBrowser } from '@angular/common';\nimport { BehaviorSubject } from 'rxjs';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"ng6-toastr-notifications\";\nexport let HTTPStatus = /*#__PURE__*/(() => {\n  class HTTPStatus {\n    constructor() {\n      this.requestInFlight$ = new BehaviorSubject(false);\n    }\n\n    setHttpStatus(inFlight) {\n      this.requestInFlight$.next(inFlight);\n    }\n\n    getHttpStatus() {\n      return this.requestInFlight$.asObservable();\n    }\n\n  }\n\n  HTTPStatus.ɵfac = function HTTPStatus_Factory(t) {\n    return new (t || HTTPStatus)();\n  };\n\n  HTTPStatus.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HTTPStatus,\n    factory: HTTPStatus.ɵfac\n  });\n  return HTTPStatus;\n})();\nexport let RequestInterceptor = /*#__PURE__*/(() => {\n  class RequestInterceptor {\n    constructor(router, platformId, toastr, status) {\n      this.router = router;\n      this.platformId = platformId;\n      this.toastr = toastr;\n      this.status = status;\n      this.userTokenDetail = {};\n    }\n\n    intercept(req, next) {\n      if (isPlatformBrowser(this.platformId)) {\n        this.userTokenDetail = sessionStorage.getItem('adminUserdetail') ? JSON.parse(sessionStorage.getItem('adminUserdetail')) : {};\n      }\n\n      this.status.setHttpStatus(true);\n\n      if (this.userTokenDetail) {\n        req = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${this.userTokenDetail.accessToken}`\n          }\n        });\n      }\n\n      return next.handle(req).pipe(map(user => {\n        if (user instanceof HttpResponse) {\n          this.status.setHttpStatus(false);\n          const response = user.body;\n\n          if (response.message && response.message !== '' && req.method !== 'GET') {\n            this.showSuccess(user.body.message);\n          }\n        }\n\n        return user;\n      }), catchError(response => {\n        this.status.setHttpStatus(false);\n\n        if (response.status === 200 || response.status === 201) {\n          return response;\n        }\n\n        switch (response.status) {\n          case 400:\n            this.handleBadRequest(response);\n            break;\n\n          case 422:\n            this.handleUnProcessableEntry(response.error);\n            break;\n\n          case 401:\n            this.handleUnAuthorized();\n            break;\n\n          case 500:\n            this.handleServerError();\n            break;\n\n          default:\n            break;\n        }\n\n        return throwError(response);\n      }));\n    }\n    /**\n     * Shows notification errors when server response status is 401\n     *\n     * @params error\n     */\n\n\n    handleBadRequest(responseBody) {\n      if (responseBody.url === 'http://api.spurtcommerce.com/api/product/product-excel-list/?productId=') {\n        this.showNotificationError('Please Choose a Valid Data');\n      }\n\n      if (responseBody.url === 'http://api.spurtcommerce.com/api/order/order-excel-list/?orderId=') {\n        this.showNotificationError('Please Choose a Valid Data');\n      }\n\n      if (responseBody.url === 'http://api.spurtcommerce.com/api/customer/customer-excel-list/?customerId=') {\n        this.showNotificationError('Please Choose a Valid Data');\n      }\n\n      if (responseBody.error) {\n        try {\n          const bodyParsed = responseBody.error;\n          this.handleErrorMessages(bodyParsed);\n        } catch (error) {}\n      }\n    }\n\n    handleErrorMessages(response) {\n      if (!response) {\n        return;\n      }\n\n      if (!response.message) {\n        return;\n      }\n\n      this.showNotificationError(response.message);\n    }\n\n    handleUnProcessableEntry(error) {\n      if (error && error.data && error.data.message) {\n        this.showNotificationError(Array.isArray(error.data.message) ? error.data.message[0] : error.data.message);\n      }\n    }\n    /**\n     * redirect to login if un authorized\n     *\n     */\n\n\n    handleUnAuthorized() {\n      sessionStorage.clear();\n      this.router.navigate(['/auth/login']);\n    }\n\n    handleServerError() {\n      this.showNotificationError('Server Error');\n    }\n    /**\n     * Shows error notification with given title and message\n     *\n     * @params message\n     */\n\n\n    showNotificationError(message) {\n      this.toastr.errorToastr(message);\n    }\n\n    showSuccess(message) {\n      this.toastr.successToastr(message);\n    }\n\n  }\n\n  RequestInterceptor.ɵfac = function RequestInterceptor_Factory(t) {\n    return new (t || RequestInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i2.ToastrManager), i0.ɵɵinject(HTTPStatus));\n  };\n\n  RequestInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RequestInterceptor,\n    factory: RequestInterceptor.ɵfac\n  });\n  return RequestInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}