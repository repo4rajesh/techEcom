{"ast":null,"code":"/*\n* spurtcommerce\n* http://www.spurtcommerce.com\n*\n* Copyright (c) 2021 Piccosoft Software Labs Pvt Ltd\n* Author Piccosoft Software Labs Pvt Ltd <support@spurtcommerce.com>\n* Licensed under the MIT license.\n*/\nimport * as actions from '../social-action/social.action';\nimport { SocialRecordState } from './social.state';\nimport { SocialResponseModel } from '../social-model/social.response.model';\nexport const initialState = new SocialRecordState();\nexport function reducer(state = initialState, {\n  type,\n  payload\n}) {\n  if (!type) {\n    return state;\n  }\n\n  switch (type) {\n    case actions.ActionTypes.DO_NEW_SOCIAL:\n      {\n        return Object.assign({}, state, {\n          addLoading: true,\n          addLoaded: false,\n          addFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_GET_SOCIAL:\n      {\n        return Object.assign({}, state, {\n          addLoading: true,\n          addLoaded: false,\n          addFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_NEW_SOCIAL_SUCCESS:\n      {\n        return Object.assign({}, initialState, {\n          newsocial: payload,\n          countLoading: false,\n          countLoaded: true,\n          countFailed: true\n        });\n      }\n\n    case actions.ActionTypes.DO_GET_SOCIAL_SUCCESS:\n      {\n        const social = payload.data.map(_setting => {\n          const tempListModel = new SocialResponseModel(_setting);\n          return tempListModel;\n        });\n        return Object.assign({}, initialState, {\n          getsocial: social,\n          countLoading: false,\n          countLoaded: true,\n          countFailed: true\n        });\n      }\n\n    case actions.ActionTypes.DO_NEW_SOCIAL_FAIL:\n      {\n        return Object.assign({}, initialState, {\n          newsocial: payload,\n          countLoading: false,\n          countLoaded: true,\n          countFailed: true\n        });\n      }\n\n    case actions.ActionTypes.DO_GET_SOCIAL_FAIL:\n      {\n        return Object.assign({}, initialState, {\n          getsocial: payload,\n          countLoading: false,\n          countLoaded: true,\n          countFailed: true\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\nexport const getNewSocial = state => state.newsocial;\nexport const getSocial = state => state.getsocial;","map":null,"metadata":{},"sourceType":"module"}