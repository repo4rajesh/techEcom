{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport * as actions from '../action/categories.action';\nimport { catchError } from 'rxjs/operators'; // model\n\nimport { CategorydeleteResponseModel } from '../models/categorydelete.response.model';\nimport { CategoryupdateResponseModel } from '../models/categoryupdate.response.model';\nimport { saveAs } from 'file-saver';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../categories.service\";\nexport class CategoriesEffect {\n  constructor(action$, categoriesService) {\n    this.action$ = action$;\n    this.categoriesService = categoriesService; // CATEGORY LIST\n\n    this.docatlists$ = this.action$.pipe(ofType(actions.ActionTypes.DO_CATEGORIES_LIST), map(action => action.payload), switchMap(state => {\n      return this.categoriesService.categoryList(state).pipe(switchMap(list => [new actions.DoCategorieslistSuccessAction(list)]), catchError(error => of(new actions.DoCategorieslistFailAction(error))));\n    }));\n    this.doDelete$ = this.action$.pipe(ofType(actions.ActionTypes.DO_DELETE_CATEGORIES), map(action => action.payload), switchMap(state => {\n      return this.categoriesService.delete(state).pipe(switchMap(user => [new actions.DoDeleteCategoriesSuccessAction(new CategorydeleteResponseModel(user))]), catchError(error => of(new actions.DoCatcountFailAction(new CategorydeleteResponseModel(error)))));\n    }));\n    this.doaddCategory$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ADDCATEGORIES), map(action => action.payload), switchMap(state => {\n      return this.categoriesService.addCategory(state).pipe(switchMap(add => {\n        return [new actions.DoAddCategoriesSuccessAction(add)];\n      }), catchError(error => of(new actions.DoAddCategoriesFailAction(error))));\n    }));\n    this.doupdateCategory$ = this.action$.pipe(ofType(actions.ActionTypes.DO_UPDATECATEGORIES), map(action => action.payload), switchMap(state => {\n      return this.categoriesService.updateCategory(state).pipe(switchMap(user => {\n        return [new actions.DoUpdateCategoriesSuccessAction(user)];\n      }), catchError(error => of(new actions.DoUpdateCategoriesFailAction(new CategoryupdateResponseModel(error)))));\n    })); // category pagination\n\n    this.docount$ = this.action$.pipe(ofType(actions.ActionTypes.DO_CATEGORIESCOUNT), map(action => action.payload), switchMap(state => {\n      return this.categoriesService.categoryListPagination(state).pipe(switchMap(user => [new actions.DoCategoriescountSuccessAction(user)]), catchError(error => of(new actions.DoCatcountFailAction(error))));\n    })); // CATEGORY DETAILS\n\n    this.categoryDetails$ = this.action$.pipe(ofType(actions.ActionTypes.GET_CATEGORY_DETAILS), map(action => action.payload), switchMap(state => {\n      return this.categoriesService.categoryDetails(state).pipe(switchMap(list => [new actions.GetCategoryDetailsSuccessAction(list)]), catchError(error => of(new actions.GetCategoryDetailsFailAction(error))));\n    })); // CATEGORY EXPORT\n\n    this.CategoryExportExcel$ = this.action$.pipe(ofType(actions.ActionTypes.CATEGORY_EXPORT_EXCEL), map(action => action.payload), switchMap(state => {\n      return this.categoriesService.CategoryExportExcel(state).pipe(tap(data => {\n        const filename = 'SellerExcel_' + Date.now() + '.xlsx';\n        const blob = new Blob([data], {\n          type: 'text/xlsx'\n        });\n        saveAs(blob, filename);\n      }), switchMap(list => [new actions.CategoryExportExcelSuccessAction(list)]), catchError(error => of(new actions.CategoryExportExcelFailAction(error))));\n    })); // CATEGORY EXPORT ALL\n\n    this.ExportAllExcel$ = this.action$.pipe(ofType(actions.ActionTypes.EXPORT_ALL_EXCEL), map(action => action.payload), switchMap(state => {\n      return this.categoriesService.ExportAllExcel(state).pipe(tap(data => {\n        const filename = 'SellerExcel_' + Date.now() + '.xlsx';\n        const blob = new Blob([data], {\n          type: 'text/xlsx'\n        });\n        saveAs(blob, filename);\n      }), switchMap(list => [new actions.ExportAllExcelSuccessAction(list)]), catchError(error => of(new actions.ExportAllExcelFailAction(error))));\n    }));\n  }\n\n}\n\nCategoriesEffect.ɵfac = function CategoriesEffect_Factory(t) {\n  return new (t || CategoriesEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.CategoriesService));\n};\n\nCategoriesEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CategoriesEffect,\n  factory: CategoriesEffect.ɵfac\n});\n\n__decorate([Effect()], CategoriesEffect.prototype, \"docatlists$\", void 0);\n\n__decorate([Effect()], CategoriesEffect.prototype, \"doDelete$\", void 0);\n\n__decorate([Effect()], CategoriesEffect.prototype, \"doaddCategory$\", void 0);\n\n__decorate([Effect()], CategoriesEffect.prototype, \"doupdateCategory$\", void 0);\n\n__decorate([Effect()], CategoriesEffect.prototype, \"docount$\", void 0);\n\n__decorate([Effect()], CategoriesEffect.prototype, \"categoryDetails$\", void 0);\n\n__decorate([Effect()], CategoriesEffect.prototype, \"CategoryExportExcel$\", void 0);\n\n__decorate([Effect()], CategoriesEffect.prototype, \"ExportAllExcel$\", void 0);","map":null,"metadata":{},"sourceType":"module"}