{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as actions from '../action/dashboard.action';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../dashboard.service\";\nexport class DashboardEffects {\n  constructor(action$, dashboardService) {\n    this.action$ = action$;\n    this.dashboardService = dashboardService;\n    this.doTopSellingProducts$ = this.action$.pipe(ofType(actions.ActionTypes.GET_TOP_SELLING_PRODUCTS), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.getTopSellingProducts(state).pipe(switchMap(response => [new actions.GetTopSellingProductsSuccessAction(response)]), catchError(error => of(new actions.GetTopSellingProductsFailAction(error))));\n    }));\n    this.doSalesOrderList$ = this.action$.pipe(ofType(actions.ActionTypes.GET_SALES_ORDER_LIST), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.getSalesOrders(state).pipe(switchMap(response => [new actions.GetSalesOrderSuccessAction(response)]), catchError(error => of(new actions.GetSalesOrderFailAction(error))));\n    }));\n    this.doVisitorLogs$ = this.action$.pipe(ofType(actions.ActionTypes.GET_VISITOR_LOG_LIST), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.getVisitorsList(state).pipe(switchMap(response => [new actions.GetVisitorLogSuccessAction(response)]), catchError(error => of(new actions.GetVisitorLogFailAction(error))));\n    }));\n    this.doRecentVisitorList$ = this.action$.pipe(ofType(actions.ActionTypes.GET_RECENT_VISITOR_LIST), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.getRecentVisitorsList(state).pipe(switchMap(response => [new actions.GetRecentVisitorListSuccessAction(response)]), catchError(error => of(new actions.GetRecentVisitorListFailAction(error))));\n    }));\n    this.doRecentSellingProducts$ = this.action$.pipe(ofType(actions.ActionTypes.GET_RECENT_SELLING_PRODUCT), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.getRecentSellingProductList(state).pipe(switchMap(response => [new actions.GetRecentSellingProductSuccessAction(response)]), catchError(error => of(new actions.GetRecentSellingProductFailAction(error))));\n    }));\n    this.doItemPageCount$ = this.action$.pipe(ofType(actions.ActionTypes.GET_ITEMS_PAGECOUNT), map(action => action.payload), switchMap(() => {\n      return this.dashboardService.getItemsPerPageCount().pipe(tap(res => {\n        sessionStorage.setItem('itemsPerPage', res.data[0].itemsPerPage);\n      }), switchMap(user => {\n        return [new actions.GetItemPerPageCountSuccessAction(user)];\n      }), catchError(error => of(new actions.GetItemPerPageCountFailAction(error))));\n    })); // get dashboard overall counts\n\n    this.dashboardCount$ = this.action$.pipe(ofType(actions.ActionTypes.GET_DASHBOARD_COUNT), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.getDashboardCount().pipe(switchMap(response => [new actions.GetDashboardCountSuccessAction(response)]), catchError(error => of(new actions.GetDashboardCountFailAction(error))));\n    })); // average Order Value\n\n    this.averageOrderValue$ = this.action$.pipe(ofType(actions.ActionTypes.AVERAGE_ORDER_VALUE), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.averageOrderValue(state).pipe(switchMap(response => [new actions.averageOrderValueSuccessAction(response)]), catchError(error => of(new actions.averageOrderValueFailAction(error))));\n    }));\n    /*Total Customers*/\n\n    this.totalCustomersList$ = this.action$.pipe(ofType(actions.ActionTypes.TOTAL_CUSTOMERS_LIST), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.totalCustomersList(state).pipe(switchMap(response => [new actions.totalCustomersListSuccessAction(response)]), catchError(error => of(new actions.totalCustomersListFailAction(error))));\n    }));\n    this.getTopSellingProductListCount$ = this.action$.pipe(ofType(actions.ActionTypes.TOP_SELLING_PRODUCT_COUNT), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.getTopSellingProductListCount(state).pipe(switchMap(response => [new actions.getTopSellingProductListCountSuccessAction(response)]), catchError(error => of(new actions.getTopSellingProductListCountFailAction(error))));\n    }));\n    /*Total Revenue*/\n\n    this.totalRevenue$ = this.action$.pipe(ofType(actions.ActionTypes.TOTAL_REVENUE), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.totalRevenue(state).pipe(switchMap(response => [new actions.totalRevenueSuccessAction(response)]), catchError(error => of(new actions.totalRevenueFailAction(error))));\n    }));\n    /*Total Orders*/\n\n    this.totalOrders$ = this.action$.pipe(ofType(actions.ActionTypes.TOTAL_ORDERS), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.totalOrders(state).pipe(switchMap(response => [new actions.totalOrdersSuccessAction(response)]), catchError(error => of(new actions.totalOrdersFailAction(error))));\n    }));\n    /*New Customers*/\n\n    this.newCustomers$ = this.action$.pipe(ofType(actions.ActionTypes.NEW_CUSTOMERS), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.newCustomers(state).pipe(switchMap(response => [new actions.newCustomersSuccessAction(response)]), catchError(error => of(new actions.newCustomersFailAction(error))));\n    })); // average Conversion Ratio\n\n    this.averageConversionRatio$ = this.action$.pipe(ofType(actions.ActionTypes.AVERAGE_CONVERSION_RATIO), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.averageConversionRatio(state).pipe(switchMap(response => [new actions.averageConversionRatioSuccessAction(response)]), catchError(error => of(new actions.averageConversionRatioFailAction(error))));\n    }));\n    /*Transaction values*/\n\n    this.transactionValues$ = this.action$.pipe(ofType(actions.ActionTypes.TRANSACTION_VALUES), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.transactionValues(state).pipe(switchMap(response => [new actions.transactionValuesSuccessAction(response)]), catchError(error => of(new actions.transactionValuesFailAction(error))));\n    }));\n    /*Vendor*/\n\n    this.vendor$ = this.action$.pipe(ofType(actions.ActionTypes.VENDOR), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.vendor(state).pipe(switchMap(response => [new actions.vendorSuccessAction(response)]), catchError(error => of(new actions.vendorFailAction(error))));\n    }));\n    /*Sales graph*/\n\n    this.salesgraph$ = this.action$.pipe(ofType(actions.ActionTypes.SALESGRAPH), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.salesgraph(state).pipe(switchMap(response => [new actions.salesgraphSuccessAction(response)]), catchError(error => of(new actions.salesgraphFailAction(error))));\n    }));\n    /*weekly sales product*/\n\n    this.weeklysalesproduct$ = this.action$.pipe(ofType(actions.ActionTypes.WEEKLYSALESPRODUCT), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.weeklysalesproduct(state).pipe(switchMap(response => [new actions.weeklysalesproductSuccessAction(response)]), catchError(error => of(new actions.weeklysalesproductFailAction(error))));\n    }));\n    /*Top 10 Weekly Products*/\n\n    this.toptenweeklyproducts$ = this.action$.pipe(ofType(actions.ActionTypes.TOPTENWEEKLYPRODUCTS), map(action => action.payload), switchMap(state => {\n      return this.dashboardService.toptenweeklyproducts(state).pipe(switchMap(response => [new actions.toptenweeklyproductsSuccessAction(response)]), catchError(error => of(new actions.toptenweeklyproductsFailAction(error))));\n    }));\n  }\n\n}\n\nDashboardEffects.ɵfac = function DashboardEffects_Factory(t) {\n  return new (t || DashboardEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.DashboardService));\n};\n\nDashboardEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DashboardEffects,\n  factory: DashboardEffects.ɵfac\n});\n\n__decorate([Effect()], DashboardEffects.prototype, \"doTopSellingProducts$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"doSalesOrderList$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"doVisitorLogs$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"doRecentVisitorList$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"doRecentSellingProducts$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"doItemPageCount$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"dashboardCount$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"averageOrderValue$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"totalCustomersList$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"getTopSellingProductListCount$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"totalRevenue$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"totalOrders$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"newCustomers$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"averageConversionRatio$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"transactionValues$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"vendor$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"salesgraph$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"weeklysalesproduct$\", void 0);\n\n__decorate([Effect()], DashboardEffects.prototype, \"toptenweeklyproducts$\", void 0);","map":null,"metadata":{},"sourceType":"module"}