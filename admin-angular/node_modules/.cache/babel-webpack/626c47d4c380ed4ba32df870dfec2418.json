{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { catchError } from 'rxjs/operators';\nimport * as actions from '../action/order-fullfilment.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../order-fullfilment.service\";\nexport class OrderfullfillmentEffect {\n  constructor(action$, service) {\n    this.action$ = action$;\n    this.service = service;\n    /*Order fullFillment List*/\n\n    this.Orderfullfillmentlist$ = this.action$.pipe(ofType(actions.ActionTypes.ORDER_FULLFILLMENT_LIST), map(action => action.payload), switchMap(state => {\n      return this.service.Orderfullfillmentlist(state).pipe(switchMap(user => [new actions.OrderfullfillmentListSuccessAction(user)]), catchError(error => of(new actions.OrderfullfillmentListFailAction(error))));\n    }));\n    this.addOrderfullfillment$ = this.action$.pipe(ofType(actions.ActionTypes.ADD_ORDER_FULLFILLMENT), map(action => action.payload), switchMap(state => {\n      return this.service.addOrderfullfillment(state).pipe(switchMap(user => [new actions.addOrderfullfillmentSuccessAction(user)]), catchError(error => of(new actions.addOrderfullfillmentFailAction(error))));\n    }));\n    /*Order fullFillment Status*/\n\n    this.orderfullfillmentstatus$ = this.action$.pipe(ofType(actions.ActionTypes.ORDER_FULLFILLMENT_STATUS), map(action => action.payload), switchMap(state => {\n      return this.service.orderfullfillmentstatus(state).pipe(switchMap(user => [new actions.orderfullfillmentstatusSuccessAction(user)]), catchError(error => of(new actions.orderfullfillmentstatusFailAction(error))));\n    }));\n    /*Update Order fullFillment Status*/\n\n    this.updateOrderfullfillment$ = this.action$.pipe(ofType(actions.ActionTypes.UPDATE_ORDER_FULLFILLMENT_STATUS), map(action => action.payload), switchMap(state => {\n      return this.service.updateOrderfullfillment(state).pipe(switchMap(user => [new actions.updateOrderfullfillmentSuccessAction(user)]), catchError(error => of(new actions.updateOrderfullfillmentFailAction(error))));\n    }));\n  }\n\n}\n\nOrderfullfillmentEffect.ɵfac = function OrderfullfillmentEffect_Factory(t) {\n  return new (t || OrderfullfillmentEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.OrderfullfillmentService));\n};\n\nOrderfullfillmentEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrderfullfillmentEffect,\n  factory: OrderfullfillmentEffect.ɵfac\n});\n\n__decorate([Effect()], OrderfullfillmentEffect.prototype, \"Orderfullfillmentlist$\", void 0);\n\n__decorate([Effect()], OrderfullfillmentEffect.prototype, \"addOrderfullfillment$\", void 0);\n\n__decorate([Effect()], OrderfullfillmentEffect.prototype, \"orderfullfillmentstatus$\", void 0);\n\n__decorate([Effect()], OrderfullfillmentEffect.prototype, \"updateOrderfullfillment$\", void 0);","map":null,"metadata":{},"sourceType":"module"}