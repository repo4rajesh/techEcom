{"ast":null,"code":"import * as permissionActions from './permission-action/permission.action';\nimport { getPermissionCount, getPermissionList, getUpdatePermission, newPermissionStatus, PermissionAddFailed, PermissionAddLoaded, PermissionAddLoading, PermissionCountFailed, PermissionCountLoaded, PermissionCountLoading, PermissionListFailed, PermissionListLoaded, PermissionListLoading, PermissionUpdateFailed, PermissionUpdateLoaded, PermissionUpdateLoading, PermissionGet, PermissionFailed, PermissionLoaded, PermissionLoading } from './permission-reducer/permission-selector';\nimport { PermissionForm } from './permission.models/permission.models';\nimport { PermissionListModel } from './permission.models/permission-list.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ng6-toastr-notifications\";\nexport let PermissionSandbox = /*#__PURE__*/(() => {\n  class PermissionSandbox {\n    constructor(appState, router, toastr) {\n      this.appState = appState;\n      this.router = router;\n      this.toastr = toastr;\n      this.subscriptions = [];\n      this.getPermissionsList$ = this.appState.select(getPermissionList);\n      this.getPermissionStatus$ = this.appState.select(newPermissionStatus);\n      this.getUpdatePermission$ = this.appState.select(getUpdatePermission);\n      this.permissionCount$ = this.appState.select(getPermissionCount);\n      this.permissionListLoading$ = this.appState.select(PermissionListLoading);\n      this.permissionListLoaded$ = this.appState.select(PermissionListLoaded);\n      this.permissionListFailed$ = this.appState.select(PermissionListFailed);\n      this.permissionCountLoading$ = this.appState.select(PermissionCountLoading);\n      this.permissionCountLoaded$ = this.appState.select(PermissionCountLoaded);\n      this.permissionCountFailed$ = this.appState.select(PermissionCountFailed);\n      this.permissionAddLoading$ = this.appState.select(PermissionAddLoading);\n      this.permissionAddLoaded$ = this.appState.select(PermissionAddLoaded);\n      this.permissionAddFailed$ = this.appState.select(PermissionAddFailed);\n      this.permissionUpdateLoading$ = this.appState.select(PermissionUpdateLoading);\n      this.permissionUpdateLoaded$ = this.appState.select(PermissionUpdateLoaded);\n      this.permissionUpdateFailed$ = this.appState.select(PermissionUpdateFailed);\n      this.permissionGet$ = this.appState.select(PermissionGet);\n      this.permissionLoading$ = this.appState.select(PermissionLoading);\n      this.permissionLoaded$ = this.appState.select(PermissionLoaded);\n      this.permissionFailed$ = this.appState.select(PermissionFailed);\n      this.subscripe();\n    }\n\n    getPermissionlist(value) {\n      this.appState.dispatch(new permissionActions.DoPermissionListAction(new PermissionListModel(value)));\n    }\n\n    selectAllPermission(value) {\n      this.appState.dispatch(new permissionActions.SelectAllPermission(value));\n    }\n\n    addPermission(value) {\n      this.appState.dispatch(new permissionActions.DoNewPermissionrAction(new PermissionForm(value)));\n    }\n\n    getpagination(value) {\n      this.appState.dispatch(new permissionActions.GetPermissionCountAction(value));\n    }\n\n    updatePermission(value) {\n      this.appState.dispatch(new permissionActions.DoUpdatePermissionAction(new PermissionForm(value)));\n    }\n\n    getPermission(value) {\n      this.appState.dispatch(new permissionActions.GetPermission(value));\n    }\n\n    subscripe() {\n      this.subscriptions.push(this.getPermissionStatus$.subscribe(data => {\n        if (data && data['message']) {\n          if (data.status === 1) {// this.router.navigate(['/settings/access-and-permission/role']);\n          }\n        }\n      }));\n      this.subscriptions.push(this.getUpdatePermission$.subscribe(data => {\n        if (data && data.message) {\n          if (data.status === 1) {// this.router.navigate(['/settings/access-and-permission/role']);\n          }\n        }\n      }));\n    }\n\n  }\n\n  PermissionSandbox.ɵfac = function PermissionSandbox_Factory(t) {\n    return new (t || PermissionSandbox)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrManager));\n  };\n\n  PermissionSandbox.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PermissionSandbox,\n    factory: PermissionSandbox.ɵfac\n  });\n  return PermissionSandbox;\n})();","map":null,"metadata":{},"sourceType":"module"}