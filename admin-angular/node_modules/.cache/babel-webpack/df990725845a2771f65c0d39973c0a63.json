{"ast":null,"code":"/*\n* spurtcommerce\n* http://www.spurtcommerce.com\n*\n* Copyright (c) 2021 Piccosoft Software Labs Pvt Ltd\n* Author Piccosoft Software Labs Pvt Ltd <support@spurtcommerce.com>\n* Licensed under the MIT license.\n*/\nimport * as actions from '../permission-action/permission.action';\nimport { PermissionStateRecord } from '../permission-reducer/permission.state';\nimport { PermissionListResponseModel } from '../permission.models/permission-list-response.model';\nexport const initialState = new PermissionStateRecord();\nexport function reducer(state = initialState, {\n  type,\n  payload\n}) {\n  if (!type) {\n    return state;\n  }\n\n  switch (type) {\n    case actions.ActionTypes.DO_PERMISSION_LIST:\n      {\n        return Object.assign({}, state, {\n          listLoading: true,\n          listLoaded: false,\n          listFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_NEW_PERMISSION:\n      {\n        return Object.assign({}, state, {\n          addLoading: true,\n          addLoaded: false,\n          addFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_UPDATE_PERMISSION:\n      {\n        return Object.assign({}, state, {\n          updateLoading: true,\n          updateLoaded: false,\n          updateFailed: false\n        });\n      }\n\n    case actions.ActionTypes.GET_PERMISSION_COUNT:\n      {\n        return Object.assign({}, state, {\n          countLoading: true,\n          countLoaded: false,\n          countFailed: false\n        });\n      }\n\n    case actions.ActionTypes.GET_PERMISSION_COUNT_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          countLoading: false,\n          countLoaded: true,\n          countFailed: false,\n          permissionCount: payload.data\n        });\n      }\n\n    case actions.ActionTypes.DO_PERMISSION_LIST_SUCCESS:\n      {\n        const permissionlistModel = payload.data.map(_permissions => {\n          const temppermissionModel = new PermissionListResponseModel(_permissions);\n          return temppermissionModel;\n        });\n        return Object.assign({}, state, {\n          listLoading: false,\n          listLoaded: true,\n          listFailed: false,\n          permissionlist: permissionlistModel,\n          tempPermissionList: permissionlistModel\n        });\n      }\n\n    case actions.ActionTypes.DO_NEW_PERMISSION_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          addLoading: false,\n          addLoaded: true,\n          addFailed: false,\n          newPermissionStatus: payload\n        });\n      }\n\n    case actions.ActionTypes.DO_NEW_PERMISSION_FAIL:\n      {\n        return Object.assign({}, state, {\n          addLoading: false,\n          addLoaded: false,\n          addFailed: true\n        });\n      }\n\n    case actions.ActionTypes.DO_UPDATE_PERMISSION_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          updateLoading: false,\n          updateLoaded: true,\n          updateFailed: false,\n          updatepermission: payload\n        });\n      }\n\n    case actions.ActionTypes.DO_PERMISSION_LIST_FAIL:\n      return Object.assign({}, state, {\n        listLoading: false,\n        listLoaded: false,\n        listFailed: true\n      });\n\n    case actions.ActionTypes.DO_UPDATE_PERMISSION_FAIL:\n      {\n        return Object.assign({}, state, {\n          updateLoading: false,\n          updateLoaded: false,\n          updateFailed: true\n        });\n      }\n\n    case actions.ActionTypes.GET_PERMISSION_COUNT_FAIL:\n      {\n        return Object.assign({}, state, {\n          countLoading: false,\n          countLoaded: true,\n          countFailed: true\n        });\n      }\n\n    case actions.ActionTypes.GET_PERMISSION:\n      {\n        return Object.assign({}, state, {\n          permissionLoading: true,\n          permissionLoaded: false,\n          permissionFailed: false\n        });\n      }\n\n    case actions.ActionTypes.GET_PERMISSION_SUCCESS:\n      {\n        let permArray = [];\n        permArray = state.permissionlist;\n        const selectedPermissionArray = [];\n\n        if (payload.data) {\n          const permissionArray = Object.keys(payload.data).map(key => ({\n            type: key,\n            value: payload.data[key]\n          }));\n          permissionArray.forEach(data => {\n            if (data.value === true) {\n              selectedPermissionArray.push(data.type);\n            }\n          });\n          permArray.map(data => {\n            if (data) {\n              data.permissionModule = data.permissionModule.map(moduleData => {\n                selectedPermissionArray.forEach(item => {\n                  if (moduleData.slugName === item) {\n                    const opts = Object.assign(Object.assign({}, moduleData), {\n                      selected: true\n                    });\n                    moduleData = Object.assign({}, opts);\n                  }\n                });\n                return Object.assign({}, moduleData);\n              });\n            }\n          });\n          permArray.map(data => {\n            data.permissionModule = data.permissionModule.map(moduleData => {\n              if (!moduleData.selected) {\n                const opts = Object.assign(Object.assign({}, moduleData), {\n                  selected: false\n                });\n                moduleData = Object.assign({}, opts);\n              }\n\n              return Object.assign({}, moduleData);\n            });\n          });\n        }\n\n        return Object.assign({}, state, {\n          permissionGet: payload,\n          permissionLoading: false,\n          permissionLoaded: true,\n          permissionFailed: false,\n          permissionlist: permArray,\n          tempPermissionList: permArray\n        });\n      }\n\n    case actions.ActionTypes.GET_PERMISSION_FAIL:\n      {\n        return Object.assign({}, state, {\n          permissionLoading: false,\n          permissionLoaded: true,\n          permissionFailed: true\n        });\n      }\n\n    case actions.ActionTypes.SELECT_ALL_PERMISSION:\n      {\n        state.permissionlist.map(data => {\n          if (data) {\n            data.permissionModule.map(moduleData => {\n              if (payload === true) {\n                const opts = Object.assign(Object.assign({}, moduleData), {\n                  selected: true\n                });\n                Object.assign(moduleData, opts);\n              } else {\n                const opts = Object.assign(Object.assign({}, moduleData), {\n                  selected: false\n                });\n                Object.assign(moduleData, opts);\n              }\n            });\n          }\n        });\n        return Object.assign({}, state, {});\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\nexport const getPermissionList = state => state.permissionlist;\nexport const getNewPermissionStatus = state => state.newPermissionStatus;\nexport const getUpdatePermission = state => state.updatepermission;\nexport const getPermissionCount = state => state.permissionCount;\nexport const getpaginatioListLoading = state => state.listLoading;\nexport const getpaginatioListLoaded = state => state.listLoaded;\nexport const getpaginatioListFailed = state => state.listFailed;\nexport const getpaginatioCountLoading = state => state.countLoading;\nexport const getpaginatioCountLoaded = state => state.countLoaded;\nexport const getpaginatioCountFailed = state => state.countFailed;\nexport const getpaginatioAddLoading = state => state.addLoading;\nexport const getpaginatioAddLoaded = state => state.addLoaded;\nexport const getpaginatioAddFailed = state => state.addFailed;\nexport const getpaginatioUpdateLoading = state => state.updateLoading;\nexport const getpaginatioUpdateLoaded = state => state.updateLoaded;\nexport const getpaginatioUpdateFailed = state => state.updateFailed;\nexport const getPermissionGet = state => state.permissionGet;\nexport const getPermissionLoading = state => state.permissionLoading;\nexport const getPermissionLoaded = state => state.permissionLoaded;\nexport const getPermissionFailed = state => state.permissionFailed;","map":null,"metadata":{},"sourceType":"module"}