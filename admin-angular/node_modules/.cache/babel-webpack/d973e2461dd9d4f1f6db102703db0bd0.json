{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { catchError } from 'rxjs/operators';\nimport * as actions from '../country-action/country.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../country.service\";\nimport * as i3 from \"@angular/router\";\nexport class CountryEffect {\n  constructor(action$, service, router) {\n    this.action$ = action$;\n    this.service = service;\n    this.router = router; // NEW COUNTRY\n\n    this.doAddCountry$ = this.action$.pipe(ofType(actions.ActionTypes.DO_NEW_COUNTRY), map(action => action.payload), switchMap(state => {\n      return this.service.addCountry(state).pipe(tap(val => {\n        this.router.navigate(['/settings/local/countries']);\n      }), switchMap(role => [new actions.DoNewCountrySuccessAction(role)]), catchError(error => of(new actions.DoNewCountryFailAction(error))));\n    })); // UPDATE COUNTRY\n\n    this.doUpdateCountry$ = this.action$.pipe(ofType(actions.ActionTypes.DO_UPDATE_COUNTRY), map(action => action.payload), switchMap(state => {\n      return this.service.updateCountry(state).pipe(tap(val => {\n        this.router.navigate(['/settings/local/countries']);\n      }), map(analysis => new actions.DoUpdateCountrySuccessAction(analysis)), catchError(error => of(new actions.DoUpdateCountryFailAction(error))));\n    })); // COUNTRY LIST\n\n    this.docountrylists$ = this.action$.pipe(ofType(actions.ActionTypes.GET_COUNTRY_LIST), map(action => action.payload), switchMap(state => {\n      return this.service.countrylist(state).pipe(switchMap(user => [new actions.GetCountrylistSuccessAction(user)]), catchError(error => of(new actions.GetCountrylistFailAction(error))));\n    })); // PAGINATION COUNTRY\n\n    this.docountrypagination$ = this.action$.pipe(ofType(actions.ActionTypes.GET_COUNTRY_COUNT_ACTION), map(action => action.payload), switchMap(state => {\n      return this.service.countrypagiantion(state).pipe(switchMap(user => [new actions.GetCountryCountSuccessAction(user)]), catchError(error => of(new actions.GetCountryCountFailAction(error))));\n    })); // COUNTRY DELETE\n\n    this.doCountryDelete$ = this.action$.pipe(ofType(actions.ActionTypes.DO_COUNTRY_DELETE), map(action => action.payload), switchMap(state => {\n      const countryId = state.countryId;\n      return this.service.deletecountry(state, countryId).pipe(switchMap(user => [new actions.DoCountryDeleteSuccessAction(user)]), catchError(error => of(new actions.DoCountryDeleteFailAction(error))));\n    }));\n  }\n\n}\n\nCountryEffect.ɵfac = function CountryEffect_Factory(t) {\n  return new (t || CountryEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.CountryService), i0.ɵɵinject(i3.Router));\n};\n\nCountryEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CountryEffect,\n  factory: CountryEffect.ɵfac\n});\n\n__decorate([Effect()], CountryEffect.prototype, \"doAddCountry$\", void 0);\n\n__decorate([Effect()], CountryEffect.prototype, \"doUpdateCountry$\", void 0);\n\n__decorate([Effect()], CountryEffect.prototype, \"docountrylists$\", void 0);\n\n__decorate([Effect()], CountryEffect.prototype, \"docountrypagination$\", void 0);\n\n__decorate([Effect()], CountryEffect.prototype, \"doCountryDelete$\", void 0);","map":null,"metadata":{},"sourceType":"module"}