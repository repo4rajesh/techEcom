{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport * as actions from '../pagesaction/page.action';\nimport { catchError } from 'rxjs/operators';\nimport { PagesupdateResponseModel } from '../pages-model/pagesupdate.response.model';\nimport { PagescountResponseModel } from '../pages-model/pagescount.response.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../pages.ApiclientService\";\nimport * as i3 from \"@ngrx/store\";\nexport class PageEffects {\n  constructor(action$, apiCli, appState) {\n    this.action$ = action$;\n    this.apiCli = apiCli;\n    this.appState = appState; // PAGES LIST EFFECT\n\n    this.doPagesList$ = this.action$.pipe(ofType(actions.ActionTypes.DO_PAGES_LIST_ACTION), map(action => action.payload), switchMap(state => {\n      return this.apiCli.getpageslist(state).pipe(switchMap(pages => [new actions.DoPagesSuccessAction(pages)]), catchError(error => of(new actions.DoPagesFailAction(error))));\n    })); // PAGES  COUNT LIST EFFECT\n\n    this.doPagesCountList$ = this.action$.pipe(ofType(actions.ActionTypes.DO_PAGES_COUNT_LIST_ACTION), map(action => action.payload), switchMap(state => {\n      return this.apiCli.getpageslist(state).pipe(switchMap(pagesCount => [new actions.DoPagescountSuccessAction(new PagescountResponseModel(pagesCount))]), catchError(error => of(new actions.DoPagescountFailAction(error))));\n    })); // ACTIVE PAGES  COUNT  EFFECT\n\n    this.activePageCount$ = this.action$.pipe(ofType(actions.ActionTypes.GET_ACTIVE_COUNT), map(action => action.payload), switchMap(state => {\n      return this.apiCli.getpageslist(state).pipe(switchMap(pagesCount => [new actions.GetActiveCountSuccess(new PagescountResponseModel(pagesCount))]), catchError(error => of(new actions.GetActiveCountFail(error))));\n    })); // IN-ACTIVE PAGES  COUNT  EFFECT\n\n    this.in_activePageCount$ = this.action$.pipe(ofType(actions.ActionTypes.GET_IN_ACTIVE_COUNT), map(action => action.payload), switchMap(state => {\n      return this.apiCli.getpageslist(state).pipe(switchMap(pagesCount => [new actions.GetInactiveCountSuccess(new PagescountResponseModel(pagesCount))]), catchError(error => of(new actions.GetInactiveCountFail(error))));\n    })); // add - pages\n\n    this.doAddPagesList$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ADD_PAGES_LIST), map(action => action.payload), switchMap(state => {\n      return this.apiCli.Addpages(state).pipe(tap(response => {\n        this.appState.dispatch(new actions.GetActiveCount({\n          count: 1,\n          status: 1\n        }));\n        this.appState.dispatch(new actions.GetInactiveCount({\n          count: 1,\n          status: 1\n        }));\n      }), map(analysis => new actions.DoAddPagesSuccessAction(analysis)), catchError(error => of(new actions.DoAddPagesFailAction(error))));\n    })); // update - pages\n\n    this.doUpdatePagesList$ = this.action$.pipe(ofType(actions.ActionTypes.DO_UPDATE_PAGES_LIST), map(action => action.payload), switchMap(state => {\n      const pageId = state.pageId;\n      return this.apiCli.updatepages(state, pageId).pipe(tap(response => {\n        this.appState.dispatch(new actions.GetActiveCount({\n          count: 1,\n          status: 1\n        }));\n        this.appState.dispatch(new actions.GetInactiveCount({\n          count: 1,\n          status: 1\n        }));\n      }), map(analysis => new actions.DoUpdatepagesSuccessAction(new PagesupdateResponseModel(analysis))), catchError(error => of(new actions.DoUpdatepagesFailAction(error))));\n    }));\n    this.doPagesDelete$ = this.action$.pipe(ofType(actions.ActionTypes.DO_PAGES_DELETE), map(action => action.payload), switchMap(state => {\n      const pageId = state.pageId;\n      return this.apiCli.deletepageslist(state, pageId).pipe(tap(response => {\n        this.appState.dispatch(new actions.GetActiveCount({\n          count: 1,\n          status: 1\n        }));\n        this.appState.dispatch(new actions.GetInactiveCount({\n          count: 1,\n          status: 1\n        }));\n      }), switchMap(user => [new actions.DoPagesDeleteSuccessAction(user)]), catchError(error => of(new actions.DoPagesDeleteFailAction(error))));\n    })); // Pages Bulk Delete\n\n    this.doPagesBulkDelete$ = this.action$.pipe(ofType(actions.ActionTypes.DO_PAGES_BULK_DELETE), map(action => action.payload), switchMap(state => {\n      return this.apiCli.pagesBulkDelete(state).pipe(tap(response => {\n        this.appState.dispatch(new actions.GetActiveCount({\n          count: 1,\n          status: 1\n        }));\n        this.appState.dispatch(new actions.GetInactiveCount({\n          count: 1,\n          status: 0\n        }));\n      }), switchMap(user => [new actions.DoPagesBulkDeleteSuccess(user)]), catchError(error => of(new actions.DoPagesBulkDeleteFail(error))));\n    })); // get all counts in pages\n\n    this.pageCount$ = this.action$.pipe(ofType(actions.ActionTypes.GET_PAGE_COUNT), map(action => action.payload), switchMap(state => {\n      return this.apiCli.getPageCount().pipe(switchMap(pages => [new actions.GetPageCountSuccessAction(pages)]), catchError(error => of(new actions.GetPageCountFailAction(error))));\n    })); // PAGES DETAILS\n\n    this.pageDetails$ = this.action$.pipe(ofType(actions.ActionTypes.GET_PAGE_DETAILS), map(action => action.payload), switchMap(state => {\n      return this.apiCli.getpageDetails(state).pipe(switchMap(pages => [new actions.GetPageDetailsSuccessAction(pages)]), catchError(error => of(new actions.GetPageDetailsFailAction(error))));\n    }));\n    this.groupList$ = this.action$.pipe(ofType(actions.ActionTypes.GROUP_LIST), map(action => action.payload), switchMap(state => {\n      return this.apiCli.groupList(state).pipe(switchMap(pages => [new actions.GroupListSuccessAction(pages)]), catchError(error => of(new actions.GroupListFailAction(error))));\n    }));\n  }\n\n}\n\nPageEffects.ɵfac = function PageEffects_Factory(t) {\n  return new (t || PageEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.PagesApiclientService), i0.ɵɵinject(i3.Store));\n};\n\nPageEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PageEffects,\n  factory: PageEffects.ɵfac\n});\n\n__decorate([Effect()], PageEffects.prototype, \"doPagesList$\", void 0);\n\n__decorate([Effect()], PageEffects.prototype, \"doPagesCountList$\", void 0);\n\n__decorate([Effect()], PageEffects.prototype, \"activePageCount$\", void 0);\n\n__decorate([Effect()], PageEffects.prototype, \"in_activePageCount$\", void 0);\n\n__decorate([Effect()], PageEffects.prototype, \"doAddPagesList$\", void 0);\n\n__decorate([Effect()], PageEffects.prototype, \"doUpdatePagesList$\", void 0);\n\n__decorate([Effect()], PageEffects.prototype, \"doPagesDelete$\", void 0);\n\n__decorate([Effect()], PageEffects.prototype, \"doPagesBulkDelete$\", void 0);\n\n__decorate([Effect()], PageEffects.prototype, \"pageCount$\", void 0);\n\n__decorate([Effect()], PageEffects.prototype, \"pageDetails$\", void 0);\n\n__decorate([Effect()], PageEffects.prototype, \"groupList$\", void 0);","map":null,"metadata":{},"sourceType":"module"}