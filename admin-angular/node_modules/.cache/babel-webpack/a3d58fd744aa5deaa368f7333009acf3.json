{"ast":null,"code":"import { Validators, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../../../../../../../core/admin/settings/role/role.sandbox\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../../../../../../../../core/admin/settings/role/role.ApiClientService\";\nimport * as i5 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"../../../../../../shared/components/directives/disable-if-unauthorized.directive\";\nimport * as i8 from \"@ngx-translate/core\";\n\nfunction RoleAddComponent_div_17_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, \"Settings.Role.Error.RoleNameisrequired\"));\n  }\n}\n\nfunction RoleAddComponent_div_17_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"Settings.Role.Error.Mustbemax64characterslong\"), \" \");\n  }\n}\n\nfunction RoleAddComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵtemplate(1, RoleAddComponent_div_17_div_1_Template, 3, 3, \"div\", 23);\n    i0.ɵɵtemplate(2, RoleAddComponent_div_17_div_2_Template, 3, 3, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f.roleName.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.roleForm.get(\"roleName\").hasError(\"maxlength\"));\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\n\nexport let RoleAddComponent = /*#__PURE__*/(() => {\n  class RoleAddComponent {\n    constructor(fb, appSandbox, route, router, service, modalService) {\n      this.fb = fb;\n      this.appSandbox = appSandbox;\n      this.route = route;\n      this.router = router;\n      this.service = service;\n      this.modalService = modalService;\n      this.roleInfo = [];\n      this.submitted = false;\n      this.pageSize = '10';\n      this.keyword = '';\n    }\n\n    ngOnInit() {\n      this.value = 0;\n      this.roleName = null;\n      this.isActive = null;\n      this.initForm();\n      this.editRoleId = this.route.snapshot.paramMap.get('id');\n      this.editRoleList();\n    }\n\n    beforeChange($event) {\n      if ($event.panelId === 'preventchange-2') {\n        $event.preventDefault();\n      }\n\n      if ($event.panelId === 'preventchange-3' && $event.nextState === false) {\n        $event.preventDefault();\n      }\n    }\n\n    initForm() {\n      this.roleName = new FormControl('', Validators.compose([Validators.required, Validators.maxLength(64)]));\n      this.isActive = new FormControl('');\n      this.roleForm = this.fb.group({\n        roleName: this.roleName,\n        isActive: this.isActive\n      });\n    }\n\n    getRolelist(offset = 0, pageSize) {\n      const params = {};\n      params.limit = pageSize;\n      params.offset = offset;\n      params.keyword = this.keyword;\n      this.appSandbox.getRoleList(params);\n    }\n\n    getRoleListCount(offset = 0, pageSize) {\n      const params = {};\n      params.limit = pageSize;\n      params.offset = offset;\n      params.keyword = this.keyword;\n      params.count = true;\n      this.appSandbox.getpagination(params);\n    }\n\n    cancel() {\n      this.roleInfo = null;\n      this.roleInfo = ' ';\n      this.modalService.close('close');\n    }\n\n    onChangestatus(evt) {\n      this.isChecked = evt.target.checked;\n\n      if (this.isChecked === true) {\n        this.value = 1;\n      } else if (this.isChecked === false) {\n        this.value = 0;\n      }\n    }\n    /**\n     * Handles form 'submit' event. Calls sandbox Role updateRole and addRole function if form is valid.\n     *\n     * @param roleForm entire form value\n     * @param params storing entire value\n     */\n\n\n    onSubmit(role) {\n      this.submitted = true;\n\n      if (this.roleForm.invalid) {\n        return;\n      }\n\n      if (this.roleForm.value.name !== '') {\n        const params = {};\n        params.name = this.roleForm.value.roleName;\n        params.status = this.value;\n\n        if (this.roleInfo && this.roleInfo[0] && this.roleInfo[0].groupId) {\n          params.groupId = this.roleInfo[0].groupId;\n          this.appSandbox.updateRole(params);\n          this.modalService.close('close');\n        } else {\n          this.appSandbox.addRole(params);\n          this.modalService.close('close');\n        }\n      }\n    }\n\n    close() {\n      this.modalService.close('close');\n    }\n\n    editRoleList() {\n      this.roleInfo.push(this.service.rolegetdata());\n\n      if (this.roleInfo[0] !== null) {\n        if (this.roleInfo[0] && this.roleInfo[0].name) {\n          if (this.edit === 'edit') {\n            this.roleName = this.roleInfo[0].name;\n            this.isActive = this.roleInfo[0].isActive;\n            this.roleForm.controls['roleName'].setValue(this.roleInfo[0].name);\n\n            if (this.roleInfo[0].isActive === 1) {\n              this.roleForm.controls['isActive'].setValue(true);\n            } else if (this.roleInfo[0].isActive === 0) {\n              this.roleForm.controls['isActive'].setValue(false);\n            }\n          }\n        }\n      } else {\n        this.roleInfo = null;\n      }\n    }\n\n    get f() {\n      return this.roleForm.controls;\n    }\n\n  }\n\n  RoleAddComponent.ɵfac = function RoleAddComponent_Factory(t) {\n    return new (t || RoleAddComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.RoleSandbox), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.RoleApiClientService), i0.ɵɵdirectiveInject(i5.NgbActiveModal));\n  };\n\n  RoleAddComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RoleAddComponent,\n    selectors: [[\"app-spurt-settings-role-add\"]],\n    inputs: {\n      edit: \"edit\",\n      id: \"id\"\n    },\n    decls: 34,\n    vars: 22,\n    consts: [[1, \"flex\", \"setting2-inner-header\"], [1, \"close\"], [1, \"bton\", 3, \"click\"], [\"src\", \"assets/img/icon-close-lite.svg\"], [1, \"settings-right-wrapper\", \"addnewuser\"], [1, \"new-user\"], [1, \"form-horizontal\", 3, \"formGroup\", \"ngSubmit\"], [1, \"row\"], [1, \"col-lg-12\", \"col-xs-12\"], [1, \"form-group\"], [\"type\", \"text\", \"formControlName\", \"roleName\", 1, \"form-control\", 3, \"placeholder\", \"ngClass\"], [\"class\", \"validation-error\", 4, \"ngIf\"], [1, \"suprs-form\", \"col-lg-12\"], [1, \"suprs-form-row\", \"flex\"], [1, \"mm-row\", \"flex\", 3, \"appDisableIfUnauthorized\"], [1, \"toggle\"], [\"formControlName\", \"isActive\", \"id\", \"cb1\", \"type\", \"checkbox\", 1, \"tgl\", \"tgl-light\", 3, \"appDisableIfUnauthorized\", \"checked\", \"change\"], [\"for\", \"cb1\", 1, \"tgl-btn\"], [1, \"col-12\"], [1, \"flex\", \"srbtn\"], [1, \"cancel\", 3, \"click\"], [\"type\", \"submit\"], [1, \"validation-error\"], [4, \"ngIf\"]],\n    template: function RoleAddComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"h3\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1);\n        i0.ɵɵelementStart(4, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function RoleAddComponent_Template_button_click_4_listener() {\n          return ctx.close();\n        });\n        i0.ɵɵelement(5, \"img\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵelementStart(8, \"form\", 6);\n        i0.ɵɵlistener(\"ngSubmit\", function RoleAddComponent_Template_form_ngSubmit_8_listener() {\n          return ctx.onSubmit(ctx.roleForm.value);\n        });\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵelementStart(10, \"div\", 8);\n        i0.ɵɵelementStart(11, \"div\", 9);\n        i0.ɵɵelementStart(12, \"label\");\n        i0.ɵɵtext(13);\n        i0.ɵɵpipe(14, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 10);\n        i0.ɵɵpipe(16, \"translate\");\n        i0.ɵɵtemplate(17, RoleAddComponent_div_17_Template, 3, 2, \"div\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 12);\n        i0.ɵɵelementStart(19, \"div\", 13);\n        i0.ɵɵelementStart(20, \"div\", 14);\n        i0.ɵɵelementStart(21, \"label\");\n        i0.ɵɵtext(22);\n        i0.ɵɵpipe(23, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 15);\n        i0.ɵɵelementStart(25, \"input\", 16);\n        i0.ɵɵlistener(\"change\", function RoleAddComponent_Template_input_change_25_listener($event) {\n          return ctx.onChangestatus($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(26, \"label\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"div\", 18);\n        i0.ɵɵelementStart(28, \"div\", 19);\n        i0.ɵɵelementStart(29, \"button\", 20);\n        i0.ɵɵlistener(\"click\", function RoleAddComponent_Template_button_click_29_listener() {\n          return ctx.close();\n        });\n        i0.ɵɵtext(30);\n        i0.ɵɵpipe(31, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"button\", 21);\n        i0.ɵɵtext(33);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.roleInfo ? \"Update Role\" : \" Add Role\", \" \");\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formGroup\", ctx.roleForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(14, 12, \"Settings.Role.RoleName\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(16, 14, \"Settings.Role.RoleName\"));\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(20, _c0, ctx.submitted && ctx.f.roleName.errors));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.roleName.errors);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"appDisableIfUnauthorized\", \"edit-general-settings\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(23, 16, \"Settings.Role.Status\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"appDisableIfUnauthorized\", \"edit-general-settings\")(\"checked\", true);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(31, 18, \"Settings.User.Cancle\"), \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.roleInfo ? \"Update Role\" : \"Save\");\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i6.NgClass, i6.NgIf, i7.MyDisableIfUnauthorizedDirective, i1.CheckboxControlValueAccessor],\n    pipes: [i8.TranslatePipe],\n    styles: [\".settings-right-wrapper{margin-top:0!important}.setting1-inner-header{margin-top:40px!important}.suprs-form .suprs-form-row .toggle .tgl-light+.tgl-btn:after{background:#ef1717}\\n\"],\n    encapsulation: 2\n  });\n  return RoleAddComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}