{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport * as actions from '../action/brand.actions';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { saveAs } from 'file-saver';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../brandApiClientservice\";\nexport class BrandEffects {\n  constructor(action$, brandApi) {\n    this.action$ = action$;\n    this.brandApi = brandApi; // manufacture update\n\n    this.doUpdateManufacturer$ = this.action$.pipe(ofType(actions.ActionTypes.DO_MANUFACTURE_UPDATE_ACTION), map(action => action.payload), switchMap(state => {\n      if (state.image === '') {\n        delete state.image;\n      }\n\n      return this.brandApi.updateManufacturer(state).pipe(switchMap(user => {\n        return [new actions.DoManufacturerUpdataSuccess(user)];\n      }), catchError(error => of(new actions.DoManufacturerUpdateFail())));\n    })); // manufacture add\n\n    this.doManufactureAdd$ = this.action$.pipe(ofType(actions.ActionTypes.DO_MANUFACTURE_ADD_ACTION), map(action => action.payload), switchMap(state => {\n      return this.brandApi.addManufactureData(state).pipe(map(data => new actions.DoAddManufaeturerSuccess(data)), catchError(error => of(new actions.DoAddManufaeturerFail(error))));\n    })); // manufacture count\n\n    this.doManufacturerCount$ = this.action$.pipe(ofType(actions.ActionTypes.DO_MANUFACTURER_COUNT_ACTION), map(action => action.payload), switchMap(state => {\n      return this.brandApi.manufacturerCount(state).pipe(switchMap(user => [new actions.DoManufactCountSuccess(user)]), catchError(error => of(new actions.DomanufactCountFail(error))));\n    })); // Manufacturer List\n\n    this.doManufacturerlists$ = this.action$.pipe(ofType(actions.ActionTypes.DO_MANUFACTURER_LIST_ACTION), map(action => action.payload), switchMap(state => {\n      return this.brandApi.manufacturerList(state).pipe(switchMap(user => [new actions.DoManufacturerListSuccess(user)]), catchError(error => of(new actions.DomanufacturerListFail())));\n    })); // DELETE MANUFACTURE\n\n    this.doManufacturerDelete$ = this.action$.pipe(ofType(actions.ActionTypes.DO_MANUFACTURER_DELETE_ACTION), map(action => action.payload), switchMap(state => {\n      return this.brandApi.deleteManufacturer(state).pipe(switchMap(user => [new actions.ManufacturerdeleteSuccess(user)]), catchError(error => of(new actions.ManufacturerDeleteFail(error))));\n    })); // manufacture Delete\n\n    this.manufacturerBulkDelete$ = this.action$.pipe(ofType(actions.ActionTypes.DO_MANUFACTURER_BULK_DELETE_ACTION), map(action => action.payload), switchMap(state => {\n      return this.brandApi.bulkDelete(state).pipe(map(data => new actions.ManufacturerBulkDeleteSuccess(data)), catchError(error => of(new actions.ManufacturerBulkDeleteFail(error))));\n    })); // manufacture EXPORT\n\n    this.manufacturerExport$ = this.action$.pipe(ofType(actions.ActionTypes.EXPORT_MANUFACTURER_ACTION), map(action => action.payload), switchMap(state => {\n      return this.brandApi.exportManufacturer(state).pipe(tap(data => {\n        const filename = 'manufacturer_excel_' + Date.now() + '.xlsx';\n        const blob = new Blob([data], {\n          type: 'text/xlsx'\n        });\n        saveAs(blob, filename);\n      }), map(data => new actions.ExportManufacturerSuccess(data)), catchError(error => of(new actions.ExportManufacturerFail(error))));\n    }));\n  }\n\n}\n\nBrandEffects.ɵfac = function BrandEffects_Factory(t) {\n  return new (t || BrandEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.BrandApiClient));\n};\n\nBrandEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BrandEffects,\n  factory: BrandEffects.ɵfac\n});\n\n__decorate([Effect()], BrandEffects.prototype, \"doUpdateManufacturer$\", void 0);\n\n__decorate([Effect()], BrandEffects.prototype, \"doManufactureAdd$\", void 0);\n\n__decorate([Effect()], BrandEffects.prototype, \"doManufacturerCount$\", void 0);\n\n__decorate([Effect()], BrandEffects.prototype, \"doManufacturerlists$\", void 0);\n\n__decorate([Effect()], BrandEffects.prototype, \"doManufacturerDelete$\", void 0);\n\n__decorate([Effect()], BrandEffects.prototype, \"manufacturerBulkDelete$\", void 0);\n\n__decorate([Effect()], BrandEffects.prototype, \"manufacturerExport$\", void 0);","map":null,"metadata":{},"sourceType":"module"}