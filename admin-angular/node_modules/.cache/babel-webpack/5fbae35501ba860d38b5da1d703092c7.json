{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as actions from '../changepassword-action/changepassword.action';\nimport { catchError } from 'rxjs/operators';\nimport { ChangepasswordResponseModel } from '../changepassword-models/changepassword.response.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../changepassword.service\";\nexport class ChangepasswordEffect {\n  constructor(action$, service) {\n    this.action$ = action$;\n    this.service = service;\n    this.doChangePassword$ = this.action$.pipe(ofType(actions.ActionTypes.DO_CHANGE_PASWORD), map(action => action.payload), switchMap(state => {\n      return this.service.changePassword(state).pipe(switchMap(user => [new actions.DoChangePasswordSucessAction(new ChangepasswordResponseModel(user))]), catchError(error => of(new actions.DoChangePasswordFailAction(error))));\n    }));\n  }\n\n}\n\nChangepasswordEffect.ɵfac = function ChangepasswordEffect_Factory(t) {\n  return new (t || ChangepasswordEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ChangePasswordService));\n};\n\nChangepasswordEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChangepasswordEffect,\n  factory: ChangepasswordEffect.ɵfac\n});\n\n__decorate([Effect()], ChangepasswordEffect.prototype, \"doChangePassword$\", void 0);","map":null,"metadata":{},"sourceType":"module"}