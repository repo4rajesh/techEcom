{"ast":null,"code":"/*\n* spurtcommerce\n* http://www.spurtcommerce.com\n*\n* Copyright (c) 2021 Piccosoft Software Labs Pvt Ltd\n* Author Piccosoft Software Labs Pvt Ltd <support@spurtcommerce.com>\n* Licensed under the MIT license.\n*/\nimport * as actions from '../../user/user-action/user.action';\nimport { UserRecordState } from './user.state';\nimport { UserListResponseModel } from '../user-model/userlist.response.model';\nimport { UserResponseModel } from '../user-model/user.response.model';\nexport const initialState = new UserRecordState();\nexport function reducer(state = initialState, {\n  type,\n  payload\n}) {\n  if (!type) {\n    return state;\n  }\n\n  switch (type) {\n    case actions.ActionTypes.DO_NEW_USER:\n      {\n        return Object.assign({}, state, {\n          addLoading: true,\n          addLoaded: false,\n          addFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_UPDATE_USER:\n      {\n        return Object.assign({}, state, {\n          updateLoading: true,\n          updateLoaded: false,\n          updateFailed: false\n        });\n      }\n\n    case actions.ActionTypes.GET_USER_LIST:\n      {\n        return Object.assign({}, state, {\n          listLoading: true,\n          listLoaded: false,\n          listFailed: false\n        });\n      }\n\n    case actions.ActionTypes.GET_USER_GROUP_LIST:\n      {\n        return Object.assign({}, state, {\n          groupListLoading: true,\n          groupListLoaded: false,\n          groupListFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_USER_COUNT_ACTION:\n      {\n        return Object.assign({}, state, {\n          countLoading: true,\n          countLoaded: false,\n          countFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_NEW_USER_SUCCESS:\n      {\n        const newUser = new UserResponseModel(payload.data);\n        return Object.assign({}, state, {\n          newUser: payload,\n          newUserData: newUser,\n          addLoading: false,\n          addLoaded: true,\n          addFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_UPDATE_USER_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          updateUser: payload,\n          updateLoading: false,\n          updateLoaded: true,\n          updateFailed: false\n        });\n      }\n\n    case actions.ActionTypes.GET_USER_LIST_SUCCESS:\n      {\n        let userList = [];\n\n        if (payload.data) {\n          userList = payload.data.map(_users => {\n            const tempListModel = new UserListResponseModel(_users);\n            return tempListModel;\n          });\n        }\n\n        return Object.assign({}, state, {\n          userList: userList,\n          listLoading: false,\n          listLoaded: true,\n          listFailed: false\n        });\n      }\n\n    case actions.ActionTypes.GET_USER_GROUP_LIST_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          userGroupList: payload.data,\n          groupListLoading: false,\n          groupListLoaded: true,\n          groupListFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_USER_COUNT_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          userPagination: payload.data,\n          countLoading: false,\n          countLoaded: true,\n          countFailed: false\n        });\n      }\n\n    case actions.ActionTypes.DO_NEW_USER_FAIL:\n      {\n        return Object.assign({}, state, {\n          newUser: payload,\n          countLoading: false,\n          countLoaded: true,\n          countFailed: true\n        });\n      }\n\n    case actions.ActionTypes.DO_UPDATE_USER_FAIL:\n      {\n        return Object.assign({}, state, {\n          updateUser: payload,\n          updateLoading: false,\n          updateLoaded: true,\n          updateFailed: true\n        });\n      }\n\n    case actions.ActionTypes.GET_USER_LIST_FAIL:\n      {\n        return Object.assign({}, state, {\n          listLoading: false,\n          listLoaded: true,\n          listFailed: true\n        });\n      }\n\n    case actions.ActionTypes.GET_USER_GROUP_LIST_FAIL:\n      {\n        return Object.assign({}, state, {\n          groupListLoading: false,\n          groupListLoaded: true,\n          groupListFailed: true\n        });\n      }\n\n    case actions.ActionTypes.DELETE_USER:\n      {\n        return Object.assign({}, state, {});\n      }\n\n    case actions.ActionTypes.DELETE_USER_SUCCESS:\n      {\n        return Object.assign({}, state, {\n          userDelate: payload\n        });\n      }\n\n    case actions.ActionTypes.DELETE_USER_FAIL:\n      {\n        return Object.assign({}, state, {});\n      }\n\n    case actions.ActionTypes.CLEAR_VARIABLE:\n      {\n        return Object.assign({}, state, {\n          userGroupList: []\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\nexport const getNewUser = state => state.newUser;\nexport const getNewUserData = state => state.newUserData;\nexport const getUpdateUser = state => state.updateUser;\nexport const getUserList = state => state.userList;\nexport const getUserGroupList = state => state.userGroupList;\nexport const userPagination = state => state.userPagination;\nexport const getUserListLoading = state => state.listLoading;\nexport const getUserListLoaded = state => state.listLoaded;\nexport const getUserListFailed = state => state.listFailed;\nexport const getUserCountLoading = state => state.countLoading;\nexport const getUserCountLoaded = state => state.countLoaded;\nexport const getUserCountFailed = state => state.countFailed;\nexport const getUserAddLoading = state => state.addLoading;\nexport const getUserAddLoaded = state => state.addLoaded;\nexport const getUserAddFailed = state => state.addFailed;\nexport const getUserUpdateLoading = state => state.updateLoading;\nexport const getUserUpdateLoaded = state => state.updateLoaded;\nexport const getUserUpdateFailed = state => state.updateFailed;\nexport const getUserGroupLoading = state => state.userGroupLoading;\nexport const getUserGroupLoaded = state => state.userGroupLoaded;\nexport const getUserGroupFailed = state => state.userGroupFailed;\nexport const getUserDelate = state => state.userDelate;","map":null,"metadata":{},"sourceType":"module"}