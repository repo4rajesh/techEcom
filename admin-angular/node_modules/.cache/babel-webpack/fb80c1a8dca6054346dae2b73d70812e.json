{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as actions from '../customer-action/customers.action';\nimport { catchError } from 'rxjs/operators';\nimport { CustomerFormResponseModel } from '../customer-model/customerform.response.model';\nimport { AddAddressResponseForm } from '../customer-model/addAddressform.response.model';\nimport { tap } from 'rxjs/operators';\nimport { saveAs } from 'file-saver';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../customer.ApiClient.service\";\nexport class Customereffects {\n  constructor(action$, Service) {\n    this.action$ = action$;\n    this.Service = Service; // Customer list\n\n    this.docatlists$ = this.action$.pipe(ofType(actions.ActionTypes.DO_Customers_List), map(action => action.payload), switchMap(state => {\n      return this.Service.customersList(state).pipe(switchMap(customers => [new actions.DoCustomerslistSuccessAction(customers)]), catchError(error => of(new actions.DoCustomerslistFailAction(error))));\n    })); // customerList Pagination\n\n    this.doPginationcustomers$ = this.action$.pipe(ofType(actions.ActionTypes.DO_PAGINATION_CUSTOMER_List), map(action => action.payload), switchMap(state => {\n      return this.Service.customersList(state).pipe(switchMap(customers => [new actions.DoPaginationCustomersSuccessAction(customers)]), catchError(error => of(new actions.DoPaginationCustomersFailAction(error))));\n    })); // Add customer\n\n    this.doADDcustomers$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ADD_Customers_Action), map(action => action.payload), switchMap(state => {\n      return this.Service.addcustomer(state).pipe(switchMap(customers => [new actions.DoAddCustomersListActionSuccess(customers)]), catchError(error => of(new actions.DoAddCustomersListFailAction(error))));\n    })); // update Customer\n\n    this.doupdateCustomer$ = this.action$.pipe(ofType(actions.ActionTypes.DO_UPDATE_CUSTOMER_ACTION), map(action => action.payload), switchMap(state => {\n      return this.Service.updatecustomer(state).pipe(switchMap(user => {\n        return [new actions.DoUpdateCustomerSuccess(user)];\n      }), catchError(error => of(new actions.DoUpdateCustomerFail(error))));\n    })); // delete customer\n\n    this.doCustomerDelete$ = this.action$.pipe(ofType(actions.ActionTypes.DO_DELETE_CUSTOMER_ACTION), map(action => action.payload), switchMap(state => {\n      const customerId = state.customerId;\n      return this.Service.deleteCustomer(state, customerId).pipe(switchMap(user => [new actions.DoDeleteCustomerSuccess(user)]), catchError(error => of(new actions.DoDeleteCustomerFail(error))));\n    })); // Add Address List\n\n    this.doaddaddressList$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ADD_ADDRESS_LIST_ACTION), map(action => action.payload), switchMap(state => {\n      const custId = state.customerId;\n      return this.Service.addAddressList(state, custId).pipe(switchMap(customers => [new actions.DoAddAddressListSuccess(customers)]), catchError(error => of(new actions.DoAddAddressListFail(error))));\n    })); // Add Address Pagination\n\n    this.doaddaddressListPagination$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ADD_ADDRESS_PAGINATION_ACTION), map(action => action.payload), switchMap(state => {\n      const custId = state.customerId;\n      return this.Service.addAddressPagination(state, custId).pipe(switchMap(address => [new actions.DoAddAddressPaginationSuccess(address)]), catchError(error => of(new actions.DoAddAddressPaginationFail(error))));\n    })); // Add Address Add\n\n    this.doAddressAdd$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ADD_ADDRESS_ADD_ACTION), map(action => action.payload), switchMap(state => {\n      return this.Service.addaddressAdd(state).pipe(switchMap(customers => [new actions.DoAddAddressAddSuccess(customers)]), catchError(error => of(new actions.DoAddAddressAddFail(error))));\n    })); // Add Address Update\n\n    this.doaddaddressUpadte$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ADD_ADDRESS_UPDATE_ACTION), map(action => action.payload), switchMap(state => {\n      return this.Service.updateAddAddress(state).pipe(switchMap(user => {\n        return [new actions.DoAddAddressUpdateSuccess(new AddAddressResponseForm(user))];\n      }), catchError(error => of(new actions.DoAddAddressUpdateFail(new CustomerFormResponseModel(error)))));\n    })); // delete customer Address\n\n    this.doAddAddressDelete$ = this.action$.pipe(ofType(actions.ActionTypes.DO_ADD_ADDRESS_DELETE_ACTION), map(action => action.payload), switchMap(state => {\n      const addressId = state.addressId;\n      return this.Service.deleteAddAddress(state, addressId).pipe(switchMap(user => [new actions.DoDeleteAddAddressSuccess(user)]), catchError(error => of(new actions.DoDeleteAddAddressFail(error))));\n    })); // Customer  Detail  Effect\n\n    this.doCustomerDeatail$ = this.action$.pipe(ofType(actions.ActionTypes.DO_CUSTOMER_DETAIL_ACTION), map(action => action.payload), switchMap(state => {\n      const Id = state.id;\n      return this.Service.customerDetail(state, Id).pipe(switchMap(user => [new actions.DoCustomerDetailSuccess(user)]), catchError(error => of(new actions.DoCustomerDetailFail(error))));\n    })); // Customer Bulk Delete\n\n    this.doCustomerBulkDelete$ = this.action$.pipe(ofType(actions.ActionTypes.DO_CUSTOMER_BULK_DELETE), map(action => action.payload), switchMap(state => {\n      return this.Service.customerBulkDelete(state).pipe(switchMap(user => [new actions.DoCustomerBulkDeleteSuccess(user)]), catchError(error => of(new actions.DoCustomerBulkDeleteFail(error))));\n    })); // Customer Bulk Delete\n\n    this.doCustomerExcel$ = this.action$.pipe(ofType(actions.ActionTypes.GET_CUSTOMER_EXCEL), map(action => action.payload), switchMap(state => {\n      return this.Service.customerExcel(state).pipe(tap(data => {\n        const filename = 'CustomerExcel_' + Date.now() + '.xlsx';\n        const blob = new Blob([data], {\n          type: 'text/xlsx'\n        });\n        saveAs(blob, filename);\n      }), switchMap(user => [new actions.DoCustomerExcelSuccess(user)]), catchError(error => of(new actions.DoCustomerExcelFail(error))));\n    })); // Customer Bulk Delete\n\n    this.doCustomerAllExcel$ = this.action$.pipe(ofType(actions.ActionTypes.GET_CUSTOMER_ALL_EXCEL), map(action => action.payload), switchMap(state => {\n      return this.Service.customerAllExcel(state).pipe(tap(data => {\n        const filename = 'CustomerAllExcel_' + Date.now() + '.xlsx';\n        const blob = new Blob([data], {\n          type: 'text/xlsx'\n        });\n        saveAs(blob, filename);\n      }), switchMap(user => [new actions.DoCustomerAllExcelSuccess(user)]), catchError(error => of(new actions.DoCustomerAllExcelFail(error))));\n    }));\n    this.viewOrderProduct$ = this.action$.pipe(ofType(actions.ActionTypes.VIEW_ORDER_PRODUCT), map(action => action.payload), switchMap(state => {\n      return this.Service.viewOrderProduct(state).pipe(switchMap(user => [new actions.ViewOrderProductSuccess(user)]), catchError(error => of(new actions.ViewOrderProductFail(error))));\n    }));\n    this.viewOrderProductCount$ = this.action$.pipe(ofType(actions.ActionTypes.VIEW_ORDER_PRODUCT_COUNT), map(action => action.payload), switchMap(state => {\n      return this.Service.viewOrderProductCount(state).pipe(switchMap(user => [new actions.ViewOrderProductCountSuccess(user)]), catchError(error => of(new actions.ViewOrderProductCountFail(error))));\n    }));\n    this.viewCustomerProduct$ = this.action$.pipe(ofType(actions.ActionTypes.VIEW_CUSTOMER_PRODUCT), map(action => action.payload), switchMap(state => {\n      return this.Service.viewCustomerProduct(state).pipe(switchMap(user => [new actions.ViewCustomerProductSuccess(user)]), catchError(error => of(new actions.ViewCustomerProductFail(error))));\n    }));\n    this.viewCustomerProductCount$ = this.action$.pipe(ofType(actions.ActionTypes.VIEW_CUSTOMER_PRODUCT_COUNT), map(action => action.payload), switchMap(state => {\n      return this.Service.viewCustomerProductCount(state).pipe(switchMap(user => [new actions.ViewCustomerProductCountSuccess(user)]), catchError(error => of(new actions.ViewCustomerProductCountFail(error))));\n    }));\n  }\n\n}\n\nCustomereffects.ɵfac = function Customereffects_Factory(t) {\n  return new (t || Customereffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.CustomersApiClientService));\n};\n\nCustomereffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: Customereffects,\n  factory: Customereffects.ɵfac\n});\n\n__decorate([Effect()], Customereffects.prototype, \"docatlists$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"doPginationcustomers$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"doADDcustomers$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"doupdateCustomer$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"doCustomerDelete$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"doaddaddressList$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"doaddaddressListPagination$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"doAddressAdd$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"doaddaddressUpadte$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"doAddAddressDelete$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"doCustomerDeatail$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"doCustomerBulkDelete$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"doCustomerExcel$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"doCustomerAllExcel$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"viewOrderProduct$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"viewOrderProductCount$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"viewCustomerProduct$\", void 0);\n\n__decorate([Effect()], Customereffects.prototype, \"viewCustomerProductCount$\", void 0);","map":null,"metadata":{},"sourceType":"module"}