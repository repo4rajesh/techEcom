import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { PlotlyService } from './plotly.service';
import { PlotlySharedModule } from './plotly-shared.module';
export class PlotlyViaCDNModule {
    constructor(plotlyService) {
        this.plotlyService = plotlyService;
        PlotlyService.setModuleName('ViaCDN');
    }
    static setPlotlyVersion(version) {
        const isOk = version === 'latest' || /^\d\.\d{1,2}\.\d{1,2}$/.test(version);
        if (!isOk) {
            throw new Error(`Invalid plotly version. Please set 'latest' or version number (i.e.: 1.4.3)`);
        }
        PlotlyViaCDNModule.loadViaCDN();
        PlotlyViaCDNModule.plotlyVersion = version;
    }
    static setPlotlyBundle(bundle) {
        const isOk = bundle === null || PlotlyViaCDNModule.plotlyBundleNames.indexOf(bundle) >= 0;
        if (!isOk) {
            const names = PlotlyViaCDNModule.plotlyBundleNames.map(n => `"${n}"`).join(', ');
            throw new Error(`Invalid plotly bundle. Please set to null for full or ${names} for a partial bundle.`);
        }
        PlotlyViaCDNModule.plotlyBundle = bundle;
    }
    static loadViaCDN() {
        PlotlyService.setPlotly('waiting');
        const init = () => {
            const src = PlotlyViaCDNModule.plotlyBundle == null
                ? `https://cdn.plot.ly/plotly-${PlotlyViaCDNModule.plotlyVersion}.min.js`
                : `https://cdn.plot.ly/plotly-${PlotlyViaCDNModule.plotlyBundle}-${PlotlyViaCDNModule.plotlyVersion}.min.js`;
            const script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = src;
            script.onerror = () => console.error(`Error loading plotly.js library from ${src}`);
            const head = document.getElementsByTagName('head')[0];
            head.appendChild(script);
            let counter = 200; // equivalent of 10 seconds...
            const fn = () => {
                const plotly = window.Plotly;
                if (plotly) {
                    PlotlyService.setPlotly(plotly);
                }
                else if (counter > 0) {
                    counter--;
                    setTimeout(fn, 50);
                }
                else {
                    throw new Error(`Error loading plotly.js library from ${src}. Timeout.`);
                }
            };
            fn();
        };
        setTimeout(init);
    }
}
PlotlyViaCDNModule.plotlyBundle = null;
PlotlyViaCDNModule.plotlyVersion = 'latest';
PlotlyViaCDNModule.plotlyBundleNames = ['basic', 'cartesian', 'geo', 'gl3d', 'gl2d', 'mapbox', 'finance'];
PlotlyViaCDNModule.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                imports: [CommonModule, PlotlySharedModule],
                providers: [PlotlyService],
                exports: [PlotlySharedModule],
            },] }
];
PlotlyViaCDNModule.ctorParameters = () => [
    { type: PlotlyService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxvdGx5LXZpYS1jZG4ubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvcGxvdGx5L3NyYy9saWIvcGxvdGx5LXZpYS1jZG4ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQVk1RCxNQUFNLE9BQU8sa0JBQWtCO0lBSzNCLFlBQW1CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzNDLGFBQWEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFlO1FBQzFDLE1BQU0sSUFBSSxHQUFHLE9BQU8sS0FBSyxRQUFRLElBQUksd0JBQXdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVFLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDUCxNQUFNLElBQUksS0FBSyxDQUFDLDZFQUE2RSxDQUFDLENBQUM7U0FDbEc7UUFFRCxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNoQyxrQkFBa0IsQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDO0lBQy9DLENBQUM7SUFFTSxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQStCO1FBQ3pELE1BQU0sSUFBSSxHQUFHLE1BQU0sS0FBSyxJQUFJLElBQUksa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRixJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1AsTUFBTSxLQUFLLEdBQUcsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqRixNQUFNLElBQUksS0FBSyxDQUFDLHlEQUF5RCxLQUFLLHdCQUF3QixDQUFDLENBQUM7U0FDM0c7UUFFRCxrQkFBa0IsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO0lBQzdDLENBQUM7SUFFTSxNQUFNLENBQUMsVUFBVTtRQUNwQixhQUFhLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRW5DLE1BQU0sSUFBSSxHQUFHLEdBQUcsRUFBRTtZQUNkLE1BQU0sR0FBRyxHQUFHLGtCQUFrQixDQUFDLFlBQVksSUFBSSxJQUFJO2dCQUMvQyxDQUFDLENBQUMsOEJBQThCLGtCQUFrQixDQUFDLGFBQWEsU0FBUztnQkFDekUsQ0FBQyxDQUFDLDhCQUE4QixrQkFBa0IsQ0FBQyxZQUFZLElBQUksa0JBQWtCLENBQUMsYUFBYSxTQUFTLENBQUM7WUFFakgsTUFBTSxNQUFNLEdBQXNCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbkUsTUFBTSxDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQztZQUNoQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUNqQixNQUFNLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsd0NBQXdDLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFFcEYsTUFBTSxJQUFJLEdBQW9CLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2RSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRXpCLElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLDhCQUE4QjtZQUVqRCxNQUFNLEVBQUUsR0FBRyxHQUFHLEVBQUU7Z0JBQ1osTUFBTSxNQUFNLEdBQUksTUFBYyxDQUFDLE1BQU0sQ0FBQztnQkFDdEMsSUFBSSxNQUFNLEVBQUU7b0JBQ1IsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDbkM7cUJBQU0sSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO29CQUNwQixPQUFPLEVBQUcsQ0FBQztvQkFDWCxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2lCQUN0QjtxQkFBTTtvQkFDSCxNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxHQUFHLFlBQVksQ0FBQyxDQUFDO2lCQUM1RTtZQUNMLENBQUMsQ0FBQztZQUVGLEVBQUUsRUFBRSxDQUFDO1FBQ1QsQ0FBQyxDQUFDO1FBRUYsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JCLENBQUM7O0FBOURjLCtCQUFZLEdBQVksSUFBSSxDQUFDO0FBQzdCLGdDQUFhLEdBQUcsUUFBUSxDQUFDO0FBQzFCLG9DQUFpQixHQUF1QixDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDOztZQVQ1SCxRQUFRLFNBQUM7Z0JBQ04sWUFBWSxFQUFFLEVBQUU7Z0JBQ2hCLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxrQkFBa0IsQ0FBQztnQkFDM0MsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDO2dCQUMxQixPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQzthQUNoQzs7O1lBWlEsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBQbG90bHlTZXJ2aWNlIH0gZnJvbSAnLi9wbG90bHkuc2VydmljZSc7XG5pbXBvcnQgeyBQbG90bHlTaGFyZWRNb2R1bGUgfSBmcm9tICcuL3Bsb3RseS1zaGFyZWQubW9kdWxlJztcblxuXG5leHBvcnQgdHlwZSBQbG90bHlCdW5kbGVOYW1lID0gJ2Jhc2ljJyB8ICdjYXJ0ZXNpYW4nIHwgJ2dlbycgfCAnZ2wzZCcgfCAnZ2wyZCcgfCAnbWFwYm94JyB8ICdmaW5hbmNlJztcblxuXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW10sXG4gICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgUGxvdGx5U2hhcmVkTW9kdWxlXSxcbiAgICBwcm92aWRlcnM6IFtQbG90bHlTZXJ2aWNlXSxcbiAgICBleHBvcnRzOiBbUGxvdGx5U2hhcmVkTW9kdWxlXSxcbn0pXG5leHBvcnQgY2xhc3MgUGxvdGx5VmlhQ0ROTW9kdWxlIHtcbiAgICBwcml2YXRlIHN0YXRpYyBwbG90bHlCdW5kbGU/OiBzdHJpbmcgPSBudWxsO1xuICAgIHByaXZhdGUgc3RhdGljIHBsb3RseVZlcnNpb24gPSAnbGF0ZXN0JztcbiAgICBwdWJsaWMgc3RhdGljIHBsb3RseUJ1bmRsZU5hbWVzOiBQbG90bHlCdW5kbGVOYW1lW10gPSBbJ2Jhc2ljJywgJ2NhcnRlc2lhbicsICdnZW8nLCAnZ2wzZCcsICdnbDJkJywgJ21hcGJveCcsICdmaW5hbmNlJ107XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcGxvdGx5U2VydmljZTogUGxvdGx5U2VydmljZSkge1xuICAgICAgICBQbG90bHlTZXJ2aWNlLnNldE1vZHVsZU5hbWUoJ1ZpYUNETicpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgc2V0UGxvdGx5VmVyc2lvbih2ZXJzaW9uOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaXNPayA9IHZlcnNpb24gPT09ICdsYXRlc3QnIHx8IC9eXFxkXFwuXFxkezEsMn1cXC5cXGR7MSwyfSQvLnRlc3QodmVyc2lvbik7XG4gICAgICAgIGlmICghaXNPaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHBsb3RseSB2ZXJzaW9uLiBQbGVhc2Ugc2V0ICdsYXRlc3QnIG9yIHZlcnNpb24gbnVtYmVyIChpLmUuOiAxLjQuMylgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFBsb3RseVZpYUNETk1vZHVsZS5sb2FkVmlhQ0ROKCk7XG4gICAgICAgIFBsb3RseVZpYUNETk1vZHVsZS5wbG90bHlWZXJzaW9uID0gdmVyc2lvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHNldFBsb3RseUJ1bmRsZShidW5kbGU6IFBsb3RseUJ1bmRsZU5hbWUgfCBudWxsKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGlzT2sgPSBidW5kbGUgPT09IG51bGwgfHwgUGxvdGx5VmlhQ0ROTW9kdWxlLnBsb3RseUJ1bmRsZU5hbWVzLmluZGV4T2YoYnVuZGxlKSA+PSAwO1xuICAgICAgICBpZiAoIWlzT2spIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gUGxvdGx5VmlhQ0ROTW9kdWxlLnBsb3RseUJ1bmRsZU5hbWVzLm1hcChuID0+IGBcIiR7bn1cImApLmpvaW4oJywgJyk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcGxvdGx5IGJ1bmRsZS4gUGxlYXNlIHNldCB0byBudWxsIGZvciBmdWxsIG9yICR7bmFtZXN9IGZvciBhIHBhcnRpYWwgYnVuZGxlLmApO1xuICAgICAgICB9XG5cbiAgICAgICAgUGxvdGx5VmlhQ0ROTW9kdWxlLnBsb3RseUJ1bmRsZSA9IGJ1bmRsZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGxvYWRWaWFDRE4oKTogdm9pZCB7XG4gICAgICAgIFBsb3RseVNlcnZpY2Uuc2V0UGxvdGx5KCd3YWl0aW5nJyk7XG5cbiAgICAgICAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNyYyA9IFBsb3RseVZpYUNETk1vZHVsZS5wbG90bHlCdW5kbGUgPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gYGh0dHBzOi8vY2RuLnBsb3QubHkvcGxvdGx5LSR7UGxvdGx5VmlhQ0ROTW9kdWxlLnBsb3RseVZlcnNpb259Lm1pbi5qc2BcbiAgICAgICAgICAgICAgICA6IGBodHRwczovL2Nkbi5wbG90Lmx5L3Bsb3RseS0ke1Bsb3RseVZpYUNETk1vZHVsZS5wbG90bHlCdW5kbGV9LSR7UGxvdGx5VmlhQ0ROTW9kdWxlLnBsb3RseVZlcnNpb259Lm1pbi5qc2A7XG5cbiAgICAgICAgICAgIGNvbnN0IHNjcmlwdDogSFRNTFNjcmlwdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgICAgIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICAgICAgICBzY3JpcHQuc3JjID0gc3JjO1xuICAgICAgICAgICAgc2NyaXB0Lm9uZXJyb3IgPSAoKSA9PiBjb25zb2xlLmVycm9yKGBFcnJvciBsb2FkaW5nIHBsb3RseS5qcyBsaWJyYXJ5IGZyb20gJHtzcmN9YCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGhlYWQ6IEhUTUxIZWFkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gICAgICAgICAgICBoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG5cbiAgICAgICAgICAgIGxldCBjb3VudGVyID0gMjAwOyAvLyBlcXVpdmFsZW50IG9mIDEwIHNlY29uZHMuLi5cblxuICAgICAgICAgICAgY29uc3QgZm4gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGxvdGx5ID0gKHdpbmRvdyBhcyBhbnkpLlBsb3RseTtcbiAgICAgICAgICAgICAgICBpZiAocGxvdGx5KSB7XG4gICAgICAgICAgICAgICAgICAgIFBsb3RseVNlcnZpY2Uuc2V0UGxvdGx5KHBsb3RseSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb3VudGVyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb3VudGVyIC0tO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZuLCA1MCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBsb2FkaW5nIHBsb3RseS5qcyBsaWJyYXJ5IGZyb20gJHtzcmN9LiBUaW1lb3V0LmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZuKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2V0VGltZW91dChpbml0KTtcbiAgICB9XG59XG4iXX0=