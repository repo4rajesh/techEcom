import { Injectable, ɵɵdefineInjectable, Pipe, EventEmitter, Component, forwardRef, ChangeDetectorRef, ElementRef, Input, Output, ViewChildren, HostListener, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-select-dropdown.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectDropDownService {
    constructor() {
        // constructor
        this._isOpen = false;
    }
    /**
     * @return {?}
     */
    get isOpen() {
        return this._isOpen;
    }
}
SelectDropDownService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root",
            },] }
];
/** @nocollapse */
SelectDropDownService.ctorParameters = () => [];
/** @nocollapse */ SelectDropDownService.ɵprov = ɵɵdefineInjectable({ factory: function SelectDropDownService_Factory() { return new SelectDropDownService(); }, token: SelectDropDownService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    SelectDropDownService.prototype._isOpen;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/filter-by.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * filters an array based on searctext
 */
class FilterByPipe {
    /**
     * @param {?} array
     * @param {?=} searchText
     * @param {?=} keyName
     * @return {?}
     */
    transform(array, searchText, keyName) {
        if (!array || !searchText || !Array.isArray(array)) {
            return array;
        }
        if (typeof array[0] === 'string') {
            return array.filter((/**
             * @param {?} item
             * @return {?}
             */
            (item) => item.toLowerCase().indexOf(searchText.toLowerCase()) > -1));
        }
        // filter array, items which match and return true will be
        // kept, false will be filtered out
        if (!keyName) {
            return array.filter((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                for (const key in item) {
                    if (typeof item[key] !== 'object' && item[key].toString().toLowerCase().indexOf(searchText.toLowerCase()) > -1) {
                        return true;
                    }
                }
                return false;
            }));
        }
        else {
            return array.filter((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (typeof item[keyName] !== 'object' && item[keyName].toString().toLowerCase().indexOf(searchText.toLowerCase()) > -1) {
                    return true;
                }
                return false;
            }));
        }
    }
}
FilterByPipe.decorators = [
    { type: Pipe, args: [{
                name: 'filterBy'
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-select-dropdown.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxSelectDropdownComponent {
    /**
     * @param {?} cdref
     * @param {?} _elementRef
     */
    constructor(cdref, _elementRef) {
        this.cdref = cdref;
        this._elementRef = _elementRef;
        /**
         * Get the required inputs
         */
        this.options = [];
        /**
         * configuration options
         */
        this.config = {};
        /**
         * Whether multiple selection or single selection allowed
         */
        this.multiple = false;
        /**
         * change event when value changes to provide user to handle things in change event
         */
        this.change = new EventEmitter();
        /**
         * The search text change event emitter emitted when user type in the search input
         */
        this.searchChange = new EventEmitter();
        /**
         * Event emitted when dropdown is open.
         */
        this.open = new EventEmitter();
        /**
         * Event emitted when dropdown is open.
         */
        this.close = new EventEmitter();
        /**
         * Toogle the dropdown list
         */
        this.toggleDropdown = false;
        /**
         * Available items for selection
         */
        this.availableItems = [];
        /**
         * Selected Items
         */
        this.selectedItems = [];
        /**
         * Selection text to be Displayed
         */
        this.selectedDisplayText = 'Select';
        /**
         * variable to track if clicked inside or outside of component
         */
        this.clickedInside = false;
        /**
         * variable to track keypress event inside and outsid of component
         */
        this.insideKeyPress = false;
        /**
         * variable to track the focused item whenuser uses arrow keys to select item
         */
        this.focusedItemIndex = null;
        /**
         * element to show not found text when not itmes match the search
         */
        this.showNotFound = false;
        this.onChange = (/**
         * @return {?}
         */
        () => {
            // empty
        });
        this.onTouched = (/**
         * @return {?}
         */
        () => {
            // empty
        });
        this.multiple = false;
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.onChange(val);
        this.onTouched();
    }
    /**
     * click listener for host inside this component i.e
     * if many instances are there, this detects if clicked inside
     * this instance
     * @return {?}
     */
    clickInsideComponent() {
        this.clickedInside = true;
    }
    /**
     * @return {?}
     */
    blur() {
        this.toggleDropdown = false;
    }
    /**
     * @return {?}
     */
    focus() {
        /* istanbul ignore else */
        if (!this.disabled) {
            this.toggleSelectDropdown();
        }
    }
    /**
     * click handler on documnent to hide the open dropdown if clicked outside
     * @return {?}
     */
    clickOutsideComponent() {
        /* istanbul ignore else */
        if (!this.clickedInside) {
            this.toggleDropdown = false;
            this.resetArrowKeyActiveElement();
            // clear searh on close
            this.searchText = null;
            this.close.emit();
        }
        this.clickedInside = false;
    }
    /**
     * click handler on documnent to hide the open dropdown if clicked outside
     * @return {?}
     */
    KeyPressOutsideComponent() {
        /* istanbul ignore else */
        if (!this.insideKeyPress) {
            this.toggleDropdown = false;
            this.resetArrowKeyActiveElement();
        }
        this.insideKeyPress = false;
    }
    /**
     * Event handler for key up and down event and enter press for selecting element
     * @param {?} $event
     * @return {?}
     */
    handleKeyboardEvent($event) {
        this.insideKeyPress = true;
        /* istanbul ignore else */
        if ($event.keyCode === 27 || this.disabled) {
            this.toggleDropdown = false;
            this.insideKeyPress = false;
            return;
        }
        /** @type {?} */
        const avaOpts = this.availableOptions.toArray();
        /* istanbul ignore else */
        if ($event.keyCode !== 9 && avaOpts.length === 0 && !this.toggleDropdown) {
            this.toggleDropdown = true;
        }
        // Arrow Down
        /* istanbul ignore else */
        if ($event.keyCode === 40 && avaOpts.length > 0) {
            this.onArrowKeyDown();
            /* istanbul ignore else */
            if (this.focusedItemIndex >= avaOpts.length) {
                this.focusedItemIndex = 0;
            }
            avaOpts[this.focusedItemIndex].nativeElement.focus();
            $event.preventDefault();
        }
        // Arrow Up
        /* istanbul ignore else */
        if ($event.keyCode === 38 && avaOpts.length) {
            this.onArrowKeyUp();
            /* istanbul ignore else */
            if (this.focusedItemIndex >= avaOpts.length) {
                this.focusedItemIndex = avaOpts.length - 1;
            }
            avaOpts[this.focusedItemIndex].nativeElement.focus();
            $event.preventDefault();
        }
        // Enter
        /* istanbul ignore else */
        if ($event.keyCode === 13 && this.focusedItemIndex !== null) {
            /** @type {?} */
            const filteredItems = new FilterByPipe().transform(this.availableItems, this.searchText, this.config.searchOnKey);
            this.selectItem(filteredItems[this.focusedItemIndex], this.availableItems.indexOf(filteredItems[this.focusedItemIndex]));
            return false;
        }
    }
    /**
     * Component onInit
     * @return {?}
     */
    ngOnInit() {
        /* istanbul ignore else */
        if (typeof this.options !== 'undefined' && Array.isArray(this.options)) {
            this.availableItems = [
                ...this.options.sort(this.config.customComparator),
            ];
            this.initDropdownValuesAndOptions();
        }
    }
    /**
     * after view init to subscribe to available option changes
     * @return {?}
     */
    ngAfterViewInit() {
        this.availableOptions.changes.subscribe(this.setNotFoundState.bind(this));
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} value
     * @param {?=} internal
     * @return {?}
     */
    writeValue(value, internal) {
        if (value) {
            if (Array.isArray(value)) {
                if (this.multiple) {
                    this.value = value;
                }
                else if (value.length > 0) {
                    this.value = value[0];
                }
            }
            else {
                this.value = value;
            }
            /* istanbul ignore else */
            if (this.selectedItems.length === 0) {
                if (Array.isArray(value)) {
                    this.selectedItems = value;
                }
                else {
                    this.selectedItems.push(value);
                }
                this.initDropdownValuesAndOptions();
            }
        }
        else {
            this.value = [];
            /* istanbul ignore else */
            if (!internal) {
                this.reset();
            }
        }
        /* istanbul ignore else */
        if (!internal) {
            this.reset();
        }
    }
    /**
     * @return {?}
     */
    reset() {
        this.selectedItems = [];
        this.availableItems = [...this.options.sort(this.config.customComparator)];
        this.initDropdownValuesAndOptions();
    }
    /**
     * function sets whether to show items not found text or not
     * @return {?}
     */
    setNotFoundState() {
        if (this.availableOptions.length === 0) {
            this.showNotFound = true;
        }
        else {
            this.showNotFound = false;
        }
        this.cdref.detectChanges();
    }
    /**
     * Component onchage i.e when any of the input properties change
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.selectedItems = [];
        // this.searchText = null;
        this.options = this.options || [];
        /* istanbul ignore else */
        if (changes.options) {
            this.availableItems = [
                ...this.options.sort(this.config.customComparator),
            ];
        }
        /* istanbul ignore else */
        if (changes.value) {
            /* istanbul ignore else */
            if (JSON.stringify(changes.value.currentValue) === JSON.stringify([]) ||
                changes.value.currentValue === '' ||
                changes.value.currentValue === null) {
                this.availableItems = [
                    ...this.options.sort(this.config.customComparator),
                ];
            }
        }
        this.initDropdownValuesAndOptions();
    }
    /**
     * Deselct a selected items
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    deselectItem(item, index) {
        this.selectedItems.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        (element, i) => {
            /* istanbul ignore else */
            if (item === element) {
                this.selectedItems.splice(i, 1);
            }
        }));
        /** @type {?} */
        let sortedItems = [...this.availableItems];
        /* istanbul ignore else */
        if (!this.availableItems.includes(item)) {
            this.availableItems.push(item);
            sortedItems = this.availableItems.sort(this.config.customComparator);
        }
        this.selectedItems = [...this.selectedItems];
        this.availableItems = [...sortedItems];
        /* istanbul ignore else */
        if (!Array.isArray(this.value)) {
            this.value = [];
        }
        this.valueChanged();
        this.resetArrowKeyActiveElement();
    }
    /**
     * Select an item
     * @param {?} item
     * @param {?=} index
     * @return {?}
     */
    selectItem(item, index) {
        /* istanbul ignore else */
        if (!this.multiple) {
            /* istanbul ignore else */
            if (this.selectedItems.length > 0) {
                this.availableItems.push(this.selectedItems[0]);
            }
            this.selectedItems = [];
            this.toggleDropdown = false;
        }
        this.availableItems.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        (element, i) => {
            /* istanbul ignore else */
            if (item === element) {
                this.selectedItems.push(item);
                this.availableItems.splice(i, 1);
            }
        }));
        /* istanbul ignore else */
        if (this.config.clearOnSelection) {
            this.searchText = null;
        }
        this.selectedItems = [...this.selectedItems];
        this.availableItems = [...this.availableItems];
        this.selectedItems.sort(this.config.customComparator);
        this.availableItems.sort(this.config.customComparator);
        // this.searchText = null;
        this.valueChanged();
        this.resetArrowKeyActiveElement();
    }
    /**
     * When selected items changes trigger the chaange back to parent
     * @return {?}
     */
    valueChanged() {
        this.writeValue(this.selectedItems, true);
        // this.valueChange.emit(this.value);
        this.change.emit({ value: this.value });
        this.setSelectedDisplayText();
    }
    /**
     * Toggle the dropdownlist on/off
     * @return {?}
     */
    toggleSelectDropdown() {
        this.toggleDropdown = !this.toggleDropdown;
        if (this.toggleDropdown) {
            this.open.emit();
        }
        else {
            this.searchText = null;
            this.close.emit();
        }
        this.resetArrowKeyActiveElement();
    }
    /**
     * The change handler for search text
     * @return {?}
     */
    searchTextChanged() {
        this.searchChange.emit(this.searchText);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    changeSearchText($event) {
        $event.stopPropagation();
    }
    /**
     * initialize the config and other properties
     * @private
     * @return {?}
     */
    initDropdownValuesAndOptions() {
        /** @type {?} */
        const config = {
            displayKey: 'description',
            height: 'auto',
            search: false,
            placeholder: 'Select',
            searchPlaceholder: 'Search...',
            limitTo: 0,
            customComparator: undefined,
            noResultsFound: 'No results found!',
            moreText: 'more',
            searchOnKey: null,
            clearOnSelection: false,
            inputDirection: 'ltr',
        };
        /* istanbul ignore else */
        if (this.config === 'undefined' || Object.keys(this.config).length === 0) {
            this.config = Object.assign({}, config);
        }
        for (const key of Object.keys(config)) {
            this.config[key] = this.config[key] ? this.config[key] : config[key];
        }
        this.config = Object.assign({}, this.config);
        // Adding placeholder in config as default param
        this.selectedDisplayText = this.config['placeholder'];
        /* istanbul ignore else */
        if (this.value !== '' && typeof this.value !== 'undefined') {
            if (Array.isArray(this.value)) {
                this.selectedItems = this.value;
            }
            else if (this.value !== '' && this.value !== null) {
                this.selectedItems[0] = this.value;
            }
            else {
                this.selectedItems = [];
                this.value = [];
            }
            this.selectedItems.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                /** @type {?} */
                const ind = this.availableItems.findIndex((/**
                 * @param {?} aItem
                 * @return {?}
                 */
                (aItem) => JSON.stringify(item) === JSON.stringify(aItem)));
                if (ind !== -1) {
                    this.availableItems.splice(ind, 1);
                }
            }));
        }
        this.setSelectedDisplayText();
    }
    /**
     * set the text to be displayed
     * @private
     * @return {?}
     */
    setSelectedDisplayText() {
        /** @type {?} */
        let text = this.selectedItems[0];
        /* istanbul ignore else */
        if (typeof this.selectedItems[0] === 'object') {
            text = this.config.displayFn
                ? this.config.displayFn(this.selectedItems[0])
                : this.selectedItems[0][this.config.displayKey];
        }
        if (this.multiple && this.selectedItems.length > 0) {
            this.selectedDisplayText =
                this.selectedItems.length === 1
                    ? text
                    : text +
                        ` + ${this.selectedItems.length - 1} ${this.config.moreText}`;
        }
        else {
            this.selectedDisplayText =
                this.selectedItems.length === 0 ? this.config.placeholder : text;
        }
    }
    /**
     * Event handler for arrow key up event thats focuses on a item
     * @private
     * @return {?}
     */
    onArrowKeyUp() {
        /* istanbul ignore else */
        if (this.focusedItemIndex === 0) {
            this.focusedItemIndex = this.availableItems.length - 1;
            return;
        }
        /* istanbul ignore else */
        if (this.onArrowKey()) {
            this.focusedItemIndex--;
        }
    }
    /**
     * Event handler for arrow key down event thats focuses on a item
     * @private
     * @return {?}
     */
    onArrowKeyDown() {
        /* istanbul ignore else */
        if (this.focusedItemIndex === this.availableItems.length - 1) {
            this.focusedItemIndex = 0;
            return;
        }
        /* istanbul ignore else */
        if (this.onArrowKey()) {
            this.focusedItemIndex++;
        }
    }
    /**
     * @private
     * @return {?}
     */
    onArrowKey() {
        /* istanbul ignore else */
        if (this.focusedItemIndex === null) {
            this.focusedItemIndex = 0;
            return false;
        }
        return true;
    }
    /**
     * will reset the element that is marked active using arrow keys
     * @private
     * @return {?}
     */
    resetArrowKeyActiveElement() {
        this.focusedItemIndex = null;
    }
}
NgxSelectDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-select-dropdown',
                template: "<div class=\"ngx-dropdown-container\" tabindex=\"0\">\n    <button type=\"button\" tabindex=\"-1\" class=\"ngx-dropdown-button\" [ngClass]=\"{ 'ngx-disabled': disabled }\"\n        [disabled]=\"disabled\" (click)=\"toggleSelectDropdown()\">\n        <span class=\"display-text\">{{ selectedDisplayText }} </span>\n        <span class=\"nsdicon-angle-down\"></span>\n    </button>\n    <div class=\"ngx-dropdown-list-container\" *ngIf=\"toggleDropdown\" [style.maxHeight]=\"config.height\">\n        <div class=\"search-container\" *ngIf=\"config.search\">\n            <input (change)=\"changeSearchText($event)\" [style.direction]=\"config.inputDirection\" name=\"search-text\"\n                (input)=\"searchTextChanged()\" [(ngModel)]=\"searchText\" tabindex=\"-1\" autocomplete=\"off\" />\n            <label [ngClass]=\"{ active: searchText }\">\n                <span class=\"nsdicon-search\"></span>\n                {{ config.searchPlaceholder }}</label>\n        </div>\n        <ul class=\"selected-items\">\n            <li tabindex=\"-1\" *ngFor=\"let selected of selectedItems; let i = index\" (click)=\"deselectItem(selected, i)\">\n                <span class=\"nsdicon-close\">x</span>\n                <span>\n                    {{\n                    config.displayFn\n                    ? config.displayFn(selected)\n                    : selected[config.displayKey] || selected\n                    }}\n                </span>\n            </li>\n        </ul>\n        <hr *ngIf=\"selectedItems.length > 0 && availableItems.length > 0\" />\n        <ul class=\"available-items\">\n            <li #availableOption *ngFor=\"\n            let item of availableItems\n              | filterBy: searchText:config.searchOnKey\n              | limitTo: config.limitTo;\n            let i = index\n          \" tabindex=\"-1\" [ngClass]=\"{\n            active: focusedItemIndex == i && !item.disabled,\n            disabled: item.disabled\n          }\" (click)=\"selectItem(item, i)\">\n                {{\n                config.displayFn\n                ? config.displayFn(item)\n                : item[config.displayKey] || item\n                }}\n            </li>\n            <li *ngIf=\"showNotFound\">{{ config.noResultsFound }}</li>\n        </ul>\n    </div>\n</div>",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NgxSelectDropdownComponent)),
                        multi: true,
                    },
                ],
                styles: [".ngx-dropdown-container{width:100%;position:relative}.ngx-dropdown-container button{display:inline-block;margin-bottom:0;font-weight:400;line-height:1.42857143;vertical-align:middle;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid #ccc;border-radius:4px;color:#333;background-color:#fff;white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis;text-align:left}.ngx-dropdown-container button span{display:inline;vertical-align:middle}.ngx-dropdown-container button .nsdicon-angle-down{right:5px;position:relative;float:right}.ngx-dropdown-container button .nsdicon-angle-down::before{border-style:solid;border-width:.1em .1em 0 0;content:\"\";display:inline-block;height:10px;position:relative;vertical-align:text-top;width:10px;top:0;transform:rotate(135deg)}.ngx-dropdown-container .ngx-dropdown-button{width:100%;min-height:30px;padding:5px 10px;background-color:#fff}.ngx-dropdown-container .ngx-dropdown-button .display-text{display:inline-block;width:calc(100% - 20px)}.ngx-dropdown-container .ngx-dropdown-list-container{box-sizing:border-box;border:1px solid rgba(0,0,0,.15);border-radius:4px;padding-left:10px;padding-right:10px;z-index:999999999;width:100%;background:#fff;position:absolute;box-shadow:5px 5px 5px 0 rgba(0,0,0,.21);overflow-y:auto}.ngx-dropdown-container .ngx-dropdown-list-container .search-container{position:relative;padding-top:10px;margin-top:5px}.ngx-dropdown-container .ngx-dropdown-list-container .search-container input{background-color:transparent;border:none;border-bottom:1px solid #9e9e9e;border-radius:0;outline:0;height:2rem;width:100%;font-size:13px;margin:0;padding:0;box-shadow:none;box-sizing:content-box;transition:.3s}.ngx-dropdown-container .ngx-dropdown-list-container .search-container input:focus{border-bottom:1px solid #26a69a}.ngx-dropdown-container .ngx-dropdown-list-container .search-container input:focus+label{transform:translateY(-2px) scale(.8);transform-origin:0 0}.ngx-dropdown-container .ngx-dropdown-list-container .search-container label{color:#9e9e9e;position:absolute;top:0;left:0;height:100%;font-size:1rem;cursor:text;transition:transform .2s ease-out;transform-origin:0 100%;text-align:initial;transform:translateY(12px);pointer-events:none}.ngx-dropdown-container .ngx-dropdown-list-container .search-container label.active{transform:translateY(-2px) scale(.8);transform-origin:0 0}.ngx-dropdown-container .ngx-dropdown-list-container ul{margin-top:1rem;margin-bottom:1rem;list-style-type:none;padding-left:0}.ngx-dropdown-container .ngx-dropdown-list-container ul.selected-items li{background-color:#337ab7;color:#fff;margin-bottom:2px}.ngx-dropdown-container .ngx-dropdown-list-container ul.selected-items li .nsdicon-close{font-weight:700;font-size:large}.ngx-dropdown-container .ngx-dropdown-list-container ul.available-items li.active{background-color:#337ab7;color:#ffff}.ngx-dropdown-container .ngx-dropdown-list-container ul li{font-size:inherit;cursor:pointer;display:block;padding:3px 20px;clear:both;font-weight:400;line-height:1.42857143;color:#333;white-space:normal}.ngx-dropdown-container .ngx-disabled{pointer-events:none;background-color:#e9ecef;opacity:1;cursor:no-drop}"]
            }] }
];
/** @nocollapse */
NgxSelectDropdownComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
NgxSelectDropdownComponent.propDecorators = {
    _value: [{ type: Input }],
    options: [{ type: Input }],
    config: [{ type: Input }],
    multiple: [{ type: Input }],
    disabled: [{ type: Input }],
    change: [{ type: Output }],
    searchChange: [{ type: Output }],
    open: [{ type: Output }],
    close: [{ type: Output }],
    availableOptions: [{ type: ViewChildren, args: ['availableOption',] }],
    clickInsideComponent: [{ type: HostListener, args: ['click',] }],
    blur: [{ type: HostListener, args: ['blur',] }],
    focus: [{ type: HostListener, args: ['focus',] }],
    clickOutsideComponent: [{ type: HostListener, args: ['document:click',] }],
    KeyPressOutsideComponent: [{ type: HostListener, args: ['document:keydown',] }],
    handleKeyboardEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /**
     * value of the dropdown
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype._value;
    /**
     * Get the required inputs
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.options;
    /**
     * configuration options
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.config;
    /**
     * Whether multiple selection or single selection allowed
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.multiple;
    /**
     * Value
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.disabled;
    /**
     * change event when value changes to provide user to handle things in change event
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.change;
    /**
     * The search text change event emitter emitted when user type in the search input
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.searchChange;
    /**
     * Event emitted when dropdown is open.
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.open;
    /**
     * Event emitted when dropdown is open.
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.close;
    /**
     * Toogle the dropdown list
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.toggleDropdown;
    /**
     * Available items for selection
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.availableItems;
    /**
     * Selected Items
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.selectedItems;
    /**
     * Selection text to be Displayed
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.selectedDisplayText;
    /**
     * Search text
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.searchText;
    /**
     * variable to track if clicked inside or outside of component
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.clickedInside;
    /**
     * variable to track keypress event inside and outsid of component
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.insideKeyPress;
    /**
     * variable to track the focused item whenuser uses arrow keys to select item
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.focusedItemIndex;
    /**
     * element to show not found text when not itmes match the search
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.showNotFound;
    /**
     * Hold the reference to available items in the list to focus on the item when scrolling
     * @type {?}
     */
    NgxSelectDropdownComponent.prototype.availableOptions;
    /** @type {?} */
    NgxSelectDropdownComponent.prototype.onChange;
    /** @type {?} */
    NgxSelectDropdownComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    NgxSelectDropdownComponent.prototype.cdref;
    /** @type {?} */
    NgxSelectDropdownComponent.prototype._elementRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/limit-to.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LimitToPipe {
    /**
     * @param {?} array
     * @param {?} itemsCount
     * @param {?=} startIndex
     * @return {?}
     */
    transform(array, itemsCount, startIndex = 0) {
        if (!Array.isArray(array) || itemsCount === 0) {
            return array;
        }
        return array.slice(startIndex, startIndex + itemsCount);
    }
}
LimitToPipe.decorators = [
    { type: Pipe, args: [{
                name: 'limitTo'
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-select-dropdown.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectDropDownModule {
}
SelectDropDownModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NgxSelectDropdownComponent, FilterByPipe, LimitToPipe],
                imports: [CommonModule, FormsModule],
                exports: [NgxSelectDropdownComponent, FilterByPipe, LimitToPipe]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ngx-select-dropdown.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FilterByPipe, LimitToPipe, NgxSelectDropdownComponent, SelectDropDownModule, SelectDropDownService };
//# sourceMappingURL=ngx-select-dropdown.js.map
