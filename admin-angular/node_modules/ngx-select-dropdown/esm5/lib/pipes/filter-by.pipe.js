/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/filter-by.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
/**
 * filters an array based on searctext
 */
var FilterByPipe = /** @class */ (function () {
    function FilterByPipe() {
    }
    /**
     * @param {?} array
     * @param {?=} searchText
     * @param {?=} keyName
     * @return {?}
     */
    FilterByPipe.prototype.transform = /**
     * @param {?} array
     * @param {?=} searchText
     * @param {?=} keyName
     * @return {?}
     */
    function (array, searchText, keyName) {
        if (!array || !searchText || !Array.isArray(array)) {
            return array;
        }
        if (typeof array[0] === 'string') {
            return array.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.toLowerCase().indexOf(searchText.toLowerCase()) > -1; }));
        }
        // filter array, items which match and return true will be
        // kept, false will be filtered out
        if (!keyName) {
            return array.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                for (var key in item) {
                    if (typeof item[key] !== 'object' && item[key].toString().toLowerCase().indexOf(searchText.toLowerCase()) > -1) {
                        return true;
                    }
                }
                return false;
            }));
        }
        else {
            return array.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (typeof item[keyName] !== 'object' && item[keyName].toString().toLowerCase().indexOf(searchText.toLowerCase()) > -1) {
                    return true;
                }
                return false;
            }));
        }
    };
    FilterByPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'filterBy'
                },] }
    ];
    return FilterByPipe;
}());
export { FilterByPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWJ5LnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2VsZWN0LWRyb3Bkb3duLyIsInNvdXJjZXMiOlsibGliL3BpcGVzL2ZpbHRlci1ieS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7Ozs7QUFLcEQ7SUFBQTtJQWdDQSxDQUFDOzs7Ozs7O0lBNUJTLGdDQUFTOzs7Ozs7SUFBaEIsVUFBaUIsS0FBWSxFQUFFLFVBQW1CLEVBQUUsT0FBZ0I7UUFDakUsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDakQsT0FBTyxLQUFLLENBQUM7U0FDZjtRQUNELElBQUksT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxFQUFFO1lBQy9CLE9BQU8sS0FBSyxDQUFDLE1BQU07Ozs7WUFBQyxVQUFDLElBQUksSUFBSyxPQUFBLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQXpELENBQXlELEVBQUMsQ0FBQztTQUMzRjtRQUNELDBEQUEwRDtRQUMxRCxtQ0FBbUM7UUFDbkMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNYLE9BQU8sS0FBSyxDQUFDLE1BQU07Ozs7WUFBQyxVQUFDLElBQVM7Z0JBQzNCLEtBQUssSUFBTSxHQUFHLElBQUksSUFBSSxFQUFFO29CQUNyQixJQUFJLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO3dCQUM3RyxPQUFPLElBQUksQ0FBQztxQkFDZDtpQkFDSDtnQkFDRCxPQUFPLEtBQUssQ0FBQztZQUNoQixDQUFDLEVBQUMsQ0FBQztTQUNMO2FBQU07WUFDSixPQUFPLEtBQUssQ0FBQyxNQUFNOzs7O1lBQUMsVUFBQyxJQUFTO2dCQUMzQixJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO29CQUNySCxPQUFPLElBQUksQ0FBQztpQkFDZDtnQkFDRCxPQUFPLEtBQUssQ0FBQztZQUNoQixDQUFDLEVBQUMsQ0FBQztTQUNMO0lBRUosQ0FBQzs7Z0JBL0JILElBQUksU0FBQztvQkFDSCxJQUFJLEVBQUUsVUFBVTtpQkFDbEI7O0lBOEJELG1CQUFDO0NBQUEsQUFoQ0QsSUFnQ0M7U0E3QlksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBmaWx0ZXJzIGFuIGFycmF5IGJhc2VkIG9uIHNlYXJjdGV4dFxuICovXG5AUGlwZSh7XG4gICBuYW1lOiAnZmlsdGVyQnknXG59KVxuZXhwb3J0IGNsYXNzIEZpbHRlckJ5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgcHVibGljIHRyYW5zZm9ybShhcnJheTogYW55W10sIHNlYXJjaFRleHQ/OiBzdHJpbmcsIGtleU5hbWU/OiBzdHJpbmcpIHtcbiAgICAgIGlmICghYXJyYXkgfHwgIXNlYXJjaFRleHQgfHwgIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG4gICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGFycmF5WzBdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgcmV0dXJuIGFycmF5LmZpbHRlcigoaXRlbSkgPT4gaXRlbS50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2VhcmNoVGV4dC50b0xvd2VyQ2FzZSgpKSA+IC0xKTtcbiAgICAgIH1cbiAgICAgIC8vIGZpbHRlciBhcnJheSwgaXRlbXMgd2hpY2ggbWF0Y2ggYW5kIHJldHVybiB0cnVlIHdpbGwgYmVcbiAgICAgIC8vIGtlcHQsIGZhbHNlIHdpbGwgYmUgZmlsdGVyZWQgb3V0XG4gICAgICBpZiAoIWtleU5hbWUpIHtcbiAgICAgICAgIHJldHVybiBhcnJheS5maWx0ZXIoKGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaXRlbSkge1xuICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtW2tleV0gIT09ICdvYmplY3QnICYmIGl0ZW1ba2V5XS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWFyY2hUZXh0LnRvTG93ZXJDYXNlKCkpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgcmV0dXJuIGFycmF5LmZpbHRlcigoaXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW1ba2V5TmFtZV0gIT09ICdvYmplY3QnICYmIGl0ZW1ba2V5TmFtZV0udG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2VhcmNoVGV4dC50b0xvd2VyQ2FzZSgpKSA+IC0xKSB7XG4gICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICB9XG59XG4iXX0=