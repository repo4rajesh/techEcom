{"version":3,"file":"ngx-select-dropdown.component.d.ts","sources":["ngx-select-dropdown.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, EventEmitter, OnChanges, SimpleChanges, ElementRef, QueryList, AfterViewInit, ChangeDetectorRef } from '@angular/core';\nexport declare class NgxSelectDropdownComponent implements OnInit, OnChanges, AfterViewInit {\n    private cdref;\n    _elementRef: ElementRef;\n    /** value of the dropdown */\n    _value: any;\n    /**\n     * Get the required inputs\n     */\n    options: any;\n    /**\n     * configuration options\n     */\n    config: any;\n    /**\n     * Whether multiple selection or single selection allowed\n     */\n    multiple: boolean;\n    /**\n     * Value\n     */\n    disabled: boolean;\n    /**\n     * change event when value changes to provide user to handle things in change event\n     */\n    change: EventEmitter<any>;\n    /**\n     * The search text change event emitter emitted when user type in the search input\n     */\n    searchChange: EventEmitter<any>;\n    /**\n     * Event emitted when dropdown is open.\n     */\n    open: EventEmitter<any>;\n    /**\n     * Event emitted when dropdown is open.\n     */\n    close: EventEmitter<any>;\n    /**\n     * Toogle the dropdown list\n     */\n    toggleDropdown: boolean;\n    /**\n     * Available items for selection\n     */\n    availableItems: any;\n    /**\n     * Selected Items\n     */\n    selectedItems: any;\n    /**\n     * Selection text to be Displayed\n     */\n    selectedDisplayText: string;\n    /**\n     * Search text\n     */\n    searchText: string;\n    /**\n     * variable to track if clicked inside or outside of component\n     */\n    clickedInside: boolean;\n    /**\n     * variable to track keypress event inside and outsid of component\n     */\n    insideKeyPress: boolean;\n    /**\n     * variable to track the focused item whenuser uses arrow keys to select item\n     */\n    focusedItemIndex: number;\n    /**\n     * element to show not found text when not itmes match the search\n     */\n    showNotFound: boolean;\n    /**\n     * Hold the reference to available items in the list to focus on the item when scrolling\n     */\n    availableOptions: QueryList<ElementRef>;\n    get value(): any;\n    set value(val: any);\n    constructor(cdref: ChangeDetectorRef, _elementRef: ElementRef);\n    onChange: any;\n    onTouched: any;\n    /**\n     * click listener for host inside this component i.e\n     * if many instances are there, this detects if clicked inside\n     * this instance\n     */\n    clickInsideComponent(): void;\n    blur(): void;\n    focus(): void;\n    /**\n     * click handler on documnent to hide the open dropdown if clicked outside\n     */\n    clickOutsideComponent(): void;\n    /**\n     * click handler on documnent to hide the open dropdown if clicked outside\n     */\n    KeyPressOutsideComponent(): void;\n    /**\n     * Event handler for key up and down event and enter press for selecting element\n     */\n    handleKeyboardEvent($event: KeyboardEvent | any): boolean;\n    /**\n     * Component onInit\n     */\n    ngOnInit(): void;\n    /**\n     * after view init to subscribe to available option changes\n     */\n    ngAfterViewInit(): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    writeValue(value: any, internal?: boolean): void;\n    reset(): void;\n    /**\n     * function sets whether to show items not found text or not\n     */\n    setNotFoundState(): void;\n    /**\n     * Component onchage i.e when any of the input properties change\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Deselct a selected items\n     * @param item:  item to be deselected\n     * @param index:  index of the item\n     */\n    deselectItem(item: any, index: number): void;\n    /**\n     * Select an item\n     * @param item:  item to be selected\n     * @param index:  index of the item\n     */\n    selectItem(item: string, index?: number): void;\n    /**\n     * When selected items changes trigger the chaange back to parent\n     */\n    valueChanged(): void;\n    /**\n     * Toggle the dropdownlist on/off\n     */\n    toggleSelectDropdown(): void;\n    /**\n     * The change handler for search text\n     */\n    searchTextChanged(): void;\n    changeSearchText($event: any): void;\n    /**\n     * initialize the config and other properties\n     */\n    private initDropdownValuesAndOptions;\n    /**\n     * set the text to be displayed\n     */\n    private setSelectedDisplayText;\n    /**\n     * Event handler for arrow key up event thats focuses on a item\n     */\n    private onArrowKeyUp;\n    /**\n     * Event handler for arrow key down event thats focuses on a item\n     */\n    private onArrowKeyDown;\n    private onArrowKey;\n    /**\n     * will reset the element that is marked active using arrow keys\n     */\n    private resetArrowKeyActiveElement;\n}\n"]}